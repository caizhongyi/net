//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading;

namespace DeepEarth.Provider.VirtualEarth.VEGeocodeService
{
    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RequestBase", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (ReverseGeocodeRequest))]
    [KnownType(typeof (GeocodeRequest))]
    public class RequestBase : object, INotifyPropertyChanged
    {
        private Credentials CredentialsField;

        private string CultureField;

        private ExecutionOptions ExecutionOptionsField;

        private UserProfile UserProfileField;

        [DataMember]
        public Credentials Credentials
        {
            get { return CredentialsField; }
            set
            {
                if ((ReferenceEquals(CredentialsField, value) != true))
                {
                    CredentialsField = value;
                    RaisePropertyChanged("Credentials");
                }
            }
        }

        [DataMember]
        public string Culture
        {
            get { return CultureField; }
            set
            {
                if ((ReferenceEquals(CultureField, value) != true))
                {
                    CultureField = value;
                    RaisePropertyChanged("Culture");
                }
            }
        }

        [DataMember]
        public ExecutionOptions ExecutionOptions
        {
            get { return ExecutionOptionsField; }
            set
            {
                if ((ReferenceEquals(ExecutionOptionsField, value) != true))
                {
                    ExecutionOptionsField = value;
                    RaisePropertyChanged("ExecutionOptions");
                }
            }
        }

        [DataMember]
        public UserProfile UserProfile
        {
            get { return UserProfileField; }
            set
            {
                if ((ReferenceEquals(UserProfileField, value) != true))
                {
                    UserProfileField = value;
                    RaisePropertyChanged("UserProfile");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Credentials", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Credentials : object, INotifyPropertyChanged
    {
        private string ApplicationIdField;

        private string TokenField;

        [DataMember]
        public string ApplicationId
        {
            get { return ApplicationIdField; }
            set
            {
                if ((ReferenceEquals(ApplicationIdField, value) != true))
                {
                    ApplicationIdField = value;
                    RaisePropertyChanged("ApplicationId");
                }
            }
        }

        [DataMember]
        public string Token
        {
            get { return TokenField; }
            set
            {
                if ((ReferenceEquals(TokenField, value) != true))
                {
                    TokenField = value;
                    RaisePropertyChanged("Token");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ExecutionOptions", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class ExecutionOptions : object, INotifyPropertyChanged
    {
        private bool SuppressFaultsField;

        [DataMember]
        public bool SuppressFaults
        {
            get { return SuppressFaultsField; }
            set
            {
                if ((SuppressFaultsField.Equals(value) != true))
                {
                    SuppressFaultsField = value;
                    RaisePropertyChanged("SuppressFaults");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "UserProfile", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class UserProfile : object, INotifyPropertyChanged
    {
        private Heading CurrentHeadingField;

        private UserLocation CurrentLocationField;

        private DeviceType DeviceTypeField;

        private DistanceUnit DistanceUnitField;

        private string IPAddressField;

        private ShapeBase MapViewField;

        private SizeOfint ScreenSizeField;

        [DataMember]
        public Heading CurrentHeading
        {
            get { return CurrentHeadingField; }
            set
            {
                if ((ReferenceEquals(CurrentHeadingField, value) != true))
                {
                    CurrentHeadingField = value;
                    RaisePropertyChanged("CurrentHeading");
                }
            }
        }

        [DataMember]
        public UserLocation CurrentLocation
        {
            get { return CurrentLocationField; }
            set
            {
                if ((ReferenceEquals(CurrentLocationField, value) != true))
                {
                    CurrentLocationField = value;
                    RaisePropertyChanged("CurrentLocation");
                }
            }
        }

        [DataMember]
        public DeviceType DeviceType
        {
            get { return DeviceTypeField; }
            set
            {
                if ((DeviceTypeField.Equals(value) != true))
                {
                    DeviceTypeField = value;
                    RaisePropertyChanged("DeviceType");
                }
            }
        }

        [DataMember]
        public DistanceUnit DistanceUnit
        {
            get { return DistanceUnitField; }
            set
            {
                if ((DistanceUnitField.Equals(value) != true))
                {
                    DistanceUnitField = value;
                    RaisePropertyChanged("DistanceUnit");
                }
            }
        }

        [DataMember]
        public string IPAddress
        {
            get { return IPAddressField; }
            set
            {
                if ((ReferenceEquals(IPAddressField, value) != true))
                {
                    IPAddressField = value;
                    RaisePropertyChanged("IPAddress");
                }
            }
        }

        [DataMember]
        public ShapeBase MapView
        {
            get { return MapViewField; }
            set
            {
                if ((ReferenceEquals(MapViewField, value) != true))
                {
                    MapViewField = value;
                    RaisePropertyChanged("MapView");
                }
            }
        }

        [DataMember]
        public SizeOfint ScreenSize
        {
            get { return ScreenSizeField; }
            set
            {
                if ((ReferenceEquals(ScreenSizeField, value) != true))
                {
                    ScreenSizeField = value;
                    RaisePropertyChanged("ScreenSize");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ReverseGeocodeRequest", Namespace = "http://dev.virtualearth.net/webservices/v1/geocode")]
    public class ReverseGeocodeRequest : RequestBase
    {
        private Location LocationField;

        [DataMember]
        public Location Location
        {
            get { return LocationField; }
            set
            {
                if ((ReferenceEquals(LocationField, value) != true))
                {
                    LocationField = value;
                    RaisePropertyChanged("Location");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "GeocodeRequest", Namespace = "http://dev.virtualearth.net/webservices/v1/geocode")]
    public class GeocodeRequest : RequestBase
    {
        private Address AddressField;

        private GeocodeOptions OptionsField;

        private string QueryField;

        [DataMember]
        public Address Address
        {
            get { return AddressField; }
            set
            {
                if ((ReferenceEquals(AddressField, value) != true))
                {
                    AddressField = value;
                    RaisePropertyChanged("Address");
                }
            }
        }

        [DataMember]
        public GeocodeOptions Options
        {
            get { return OptionsField; }
            set
            {
                if ((ReferenceEquals(OptionsField, value) != true))
                {
                    OptionsField = value;
                    RaisePropertyChanged("Options");
                }
            }
        }

        [DataMember]
        public string Query
        {
            get { return QueryField; }
            set
            {
                if ((ReferenceEquals(QueryField, value) != true))
                {
                    QueryField = value;
                    RaisePropertyChanged("Query");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Address", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Address : object, INotifyPropertyChanged
    {
        private string AddressLineField;

        private string AdminDistrictField;

        private string CountryRegionField;

        private string DistrictField;

        private string FormattedAddressField;

        private string LocalityField;

        private string PostalCodeField;

        private string PostalTownField;

        [DataMember]
        public string AddressLine
        {
            get { return AddressLineField; }
            set
            {
                if ((ReferenceEquals(AddressLineField, value) != true))
                {
                    AddressLineField = value;
                    RaisePropertyChanged("AddressLine");
                }
            }
        }

        [DataMember]
        public string AdminDistrict
        {
            get { return AdminDistrictField; }
            set
            {
                if ((ReferenceEquals(AdminDistrictField, value) != true))
                {
                    AdminDistrictField = value;
                    RaisePropertyChanged("AdminDistrict");
                }
            }
        }

        [DataMember]
        public string CountryRegion
        {
            get { return CountryRegionField; }
            set
            {
                if ((ReferenceEquals(CountryRegionField, value) != true))
                {
                    CountryRegionField = value;
                    RaisePropertyChanged("CountryRegion");
                }
            }
        }

        [DataMember]
        public string District
        {
            get { return DistrictField; }
            set
            {
                if ((ReferenceEquals(DistrictField, value) != true))
                {
                    DistrictField = value;
                    RaisePropertyChanged("District");
                }
            }
        }

        [DataMember]
        public string FormattedAddress
        {
            get { return FormattedAddressField; }
            set
            {
                if ((ReferenceEquals(FormattedAddressField, value) != true))
                {
                    FormattedAddressField = value;
                    RaisePropertyChanged("FormattedAddress");
                }
            }
        }

        [DataMember]
        public string Locality
        {
            get { return LocalityField; }
            set
            {
                if ((ReferenceEquals(LocalityField, value) != true))
                {
                    LocalityField = value;
                    RaisePropertyChanged("Locality");
                }
            }
        }

        [DataMember]
        public string PostalCode
        {
            get { return PostalCodeField; }
            set
            {
                if ((ReferenceEquals(PostalCodeField, value) != true))
                {
                    PostalCodeField = value;
                    RaisePropertyChanged("PostalCode");
                }
            }
        }

        [DataMember]
        public string PostalTown
        {
            get { return PostalTownField; }
            set
            {
                if ((ReferenceEquals(PostalTownField, value) != true))
                {
                    PostalTownField = value;
                    RaisePropertyChanged("PostalTown");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "GeocodeOptions", Namespace = "http://dev.virtualearth.net/webservices/v1/geocode")]
    public class GeocodeOptions : object, INotifyPropertyChanged
    {
        private int? CountField;

        private List<FilterBase> FiltersField;

        [DataMember]
        public int? Count
        {
            get { return CountField; }
            set
            {
                if ((CountField.Equals(value) != true))
                {
                    CountField = value;
                    RaisePropertyChanged("Count");
                }
            }
        }

        [DataMember]
        public List<FilterBase> Filters
        {
            get { return FiltersField; }
            set
            {
                if ((ReferenceEquals(FiltersField, value) != true))
                {
                    FiltersField = value;
                    RaisePropertyChanged("Filters");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Heading", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Heading : object, INotifyPropertyChanged
    {
        private double OrientationField;

        [DataMember]
        public double Orientation
        {
            get { return OrientationField; }
            set
            {
                if ((OrientationField.Equals(value) != true))
                {
                    OrientationField = value;
                    RaisePropertyChanged("Orientation");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "UserLocation", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class UserLocation : Location
    {
        private Confidence ConfidenceField;

        [DataMember]
        public Confidence Confidence
        {
            get { return ConfidenceField; }
            set
            {
                if ((ConfidenceField.Equals(value) != true))
                {
                    ConfidenceField = value;
                    RaisePropertyChanged("Confidence");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ShapeBase", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (Rectangle))]
    [KnownType(typeof (Circle))]
    [KnownType(typeof (Polygon))]
    public class ShapeBase : object, INotifyPropertyChanged
    {
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "SizeOfint", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class SizeOfint : object, INotifyPropertyChanged
    {
        private int HeightField;

        private int WidthField;

        [DataMember]
        public int Height
        {
            get { return HeightField; }
            set
            {
                if ((HeightField.Equals(value) != true))
                {
                    HeightField = value;
                    RaisePropertyChanged("Height");
                }
            }
        }

        [DataMember]
        public int Width
        {
            get { return WidthField; }
            set
            {
                if ((WidthField.Equals(value) != true))
                {
                    WidthField = value;
                    RaisePropertyChanged("Width");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "DeviceType", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum DeviceType
    {
        [EnumMember] Desktop = 0,

        [EnumMember] Mobile = 1,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "DistanceUnit", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum DistanceUnit
    {
        [EnumMember] Kilometer = 0,

        [EnumMember] Mile = 1,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Location", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (GeocodeLocation))]
    [KnownType(typeof (UserLocation))]
    public class Location : object, INotifyPropertyChanged
    {
        private double AltitudeField;

        private double LatitudeField;

        private double LongitudeField;

        [DataMember]
        public double Altitude
        {
            get { return AltitudeField; }
            set
            {
                if ((AltitudeField.Equals(value) != true))
                {
                    AltitudeField = value;
                    RaisePropertyChanged("Altitude");
                }
            }
        }

        [DataMember]
        public double Latitude
        {
            get { return LatitudeField; }
            set
            {
                if ((LatitudeField.Equals(value) != true))
                {
                    LatitudeField = value;
                    RaisePropertyChanged("Latitude");
                }
            }
        }

        [DataMember]
        public double Longitude
        {
            get { return LongitudeField; }
            set
            {
                if ((LongitudeField.Equals(value) != true))
                {
                    LongitudeField = value;
                    RaisePropertyChanged("Longitude");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "GeocodeLocation", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class GeocodeLocation : Location
    {
        private string CalculationMethodField;

        [DataMember]
        public string CalculationMethod
        {
            get { return CalculationMethodField; }
            set
            {
                if ((ReferenceEquals(CalculationMethodField, value) != true))
                {
                    CalculationMethodField = value;
                    RaisePropertyChanged("CalculationMethod");
                }
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Confidence", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum Confidence
    {
        [EnumMember] High = 0,

        [EnumMember] Medium = 1,

        [EnumMember] Low = 2,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Rectangle", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Rectangle : ShapeBase
    {
        private Location NortheastField;

        private Location SouthwestField;

        [DataMember]
        public Location Northeast
        {
            get { return NortheastField; }
            set
            {
                if ((ReferenceEquals(NortheastField, value) != true))
                {
                    NortheastField = value;
                    RaisePropertyChanged("Northeast");
                }
            }
        }

        [DataMember]
        public Location Southwest
        {
            get { return SouthwestField; }
            set
            {
                if ((ReferenceEquals(SouthwestField, value) != true))
                {
                    SouthwestField = value;
                    RaisePropertyChanged("Southwest");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Circle", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Circle : ShapeBase
    {
        private Location CenterField;

        private DistanceUnit DistanceUnitField;

        private double RadiusField;

        [DataMember]
        public Location Center
        {
            get { return CenterField; }
            set
            {
                if ((ReferenceEquals(CenterField, value) != true))
                {
                    CenterField = value;
                    RaisePropertyChanged("Center");
                }
            }
        }

        [DataMember]
        public DistanceUnit DistanceUnit
        {
            get { return DistanceUnitField; }
            set
            {
                if ((DistanceUnitField.Equals(value) != true))
                {
                    DistanceUnitField = value;
                    RaisePropertyChanged("DistanceUnit");
                }
            }
        }

        [DataMember]
        public double Radius
        {
            get { return RadiusField; }
            set
            {
                if ((RadiusField.Equals(value) != true))
                {
                    RadiusField = value;
                    RaisePropertyChanged("Radius");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Polygon", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Polygon : ShapeBase
    {
        private List<Location> VerticesField;

        [DataMember]
        public List<Location> Vertices
        {
            get { return VerticesField; }
            set
            {
                if ((ReferenceEquals(VerticesField, value) != true))
                {
                    VerticesField = value;
                    RaisePropertyChanged("Vertices");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "FilterBase", Namespace = "http://dev.virtualearth.net/webservices/v1/geocode")]
    [KnownType(typeof (ConfidenceFilter))]
    public class FilterBase : object, INotifyPropertyChanged
    {
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ConfidenceFilter", Namespace = "http://dev.virtualearth.net/webservices/v1/geocode")]
    public class ConfidenceFilter : FilterBase
    {
        private Confidence MinimumConfidenceField;

        [DataMember]
        public Confidence MinimumConfidence
        {
            get { return MinimumConfidenceField; }
            set
            {
                if ((MinimumConfidenceField.Equals(value) != true))
                {
                    MinimumConfidenceField = value;
                    RaisePropertyChanged("MinimumConfidence");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ResponseBase", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (GeocodeResponse))]
    public class ResponseBase : object, INotifyPropertyChanged
    {
        private ResponseSummary ResponseSummaryField;

        [DataMember]
        public ResponseSummary ResponseSummary
        {
            get { return ResponseSummaryField; }
            set
            {
                if ((ReferenceEquals(ResponseSummaryField, value) != true))
                {
                    ResponseSummaryField = value;
                    RaisePropertyChanged("ResponseSummary");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ResponseSummary", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class ResponseSummary : object, INotifyPropertyChanged
    {
        private AuthenticationResultCode AuthenticationResultCodeField;

        private string CopyrightField;

        private string FaultReasonField;

        private ResponseStatusCode StatusCodeField;

        private string TraceIdField;

        [DataMember]
        public AuthenticationResultCode AuthenticationResultCode
        {
            get { return AuthenticationResultCodeField; }
            set
            {
                if ((AuthenticationResultCodeField.Equals(value) != true))
                {
                    AuthenticationResultCodeField = value;
                    RaisePropertyChanged("AuthenticationResultCode");
                }
            }
        }

        [DataMember]
        public string Copyright
        {
            get { return CopyrightField; }
            set
            {
                if ((ReferenceEquals(CopyrightField, value) != true))
                {
                    CopyrightField = value;
                    RaisePropertyChanged("Copyright");
                }
            }
        }

        [DataMember]
        public string FaultReason
        {
            get { return FaultReasonField; }
            set
            {
                if ((ReferenceEquals(FaultReasonField, value) != true))
                {
                    FaultReasonField = value;
                    RaisePropertyChanged("FaultReason");
                }
            }
        }

        [DataMember]
        public ResponseStatusCode StatusCode
        {
            get { return StatusCodeField; }
            set
            {
                if ((StatusCodeField.Equals(value) != true))
                {
                    StatusCodeField = value;
                    RaisePropertyChanged("StatusCode");
                }
            }
        }

        [DataMember]
        public string TraceId
        {
            get { return TraceIdField; }
            set
            {
                if ((ReferenceEquals(TraceIdField, value) != true))
                {
                    TraceIdField = value;
                    RaisePropertyChanged("TraceId");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "GeocodeResponse", Namespace = "http://dev.virtualearth.net/webservices/v1/geocode")]
    public class GeocodeResponse : ResponseBase
    {
        private List<GeocodeResult> ResultsField;

        [DataMember]
        public List<GeocodeResult> Results
        {
            get { return ResultsField; }
            set
            {
                if ((ReferenceEquals(ResultsField, value) != true))
                {
                    ResultsField = value;
                    RaisePropertyChanged("Results");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "GeocodeResult", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class GeocodeResult : object, INotifyPropertyChanged
    {
        private Address AddressField;

        private Rectangle BestViewField;

        private Confidence ConfidenceField;

        private string DisplayNameField;

        private string EntityTypeField;

        private List<GeocodeLocation> LocationsField;

        private List<string> MatchCodesField;

        [DataMember]
        public Address Address
        {
            get { return AddressField; }
            set
            {
                if ((ReferenceEquals(AddressField, value) != true))
                {
                    AddressField = value;
                    RaisePropertyChanged("Address");
                }
            }
        }

        [DataMember]
        public Rectangle BestView
        {
            get { return BestViewField; }
            set
            {
                if ((ReferenceEquals(BestViewField, value) != true))
                {
                    BestViewField = value;
                    RaisePropertyChanged("BestView");
                }
            }
        }

        [DataMember]
        public Confidence Confidence
        {
            get { return ConfidenceField; }
            set
            {
                if ((ConfidenceField.Equals(value) != true))
                {
                    ConfidenceField = value;
                    RaisePropertyChanged("Confidence");
                }
            }
        }

        [DataMember]
        public string DisplayName
        {
            get { return DisplayNameField; }
            set
            {
                if ((ReferenceEquals(DisplayNameField, value) != true))
                {
                    DisplayNameField = value;
                    RaisePropertyChanged("DisplayName");
                }
            }
        }

        [DataMember]
        public string EntityType
        {
            get { return EntityTypeField; }
            set
            {
                if ((ReferenceEquals(EntityTypeField, value) != true))
                {
                    EntityTypeField = value;
                    RaisePropertyChanged("EntityType");
                }
            }
        }

        [DataMember]
        public List<GeocodeLocation> Locations
        {
            get { return LocationsField; }
            set
            {
                if ((ReferenceEquals(LocationsField, value) != true))
                {
                    LocationsField = value;
                    RaisePropertyChanged("Locations");
                }
            }
        }

        [DataMember]
        public List<string> MatchCodes
        {
            get { return MatchCodesField; }
            set
            {
                if ((ReferenceEquals(MatchCodesField, value) != true))
                {
                    MatchCodesField = value;
                    RaisePropertyChanged("MatchCodes");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "AuthenticationResultCode", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum AuthenticationResultCode
    {
        [EnumMember] None = 0,

        [EnumMember] NoCredentials = 1,

        [EnumMember] ValidCredentials = 2,

        [EnumMember] InvalidCredentials = 3,

        [EnumMember] CredentialsExpired = 4,

        [EnumMember] NotAuthorized = 7,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ResponseStatusCode", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum ResponseStatusCode
    {
        [EnumMember] Success = 0,

        [EnumMember] BadRequest = 1,

        [EnumMember] ServerError = 2,
    }

    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    [ServiceContract(Namespace = "http://dev.virtualearth.net/webservices/v1/geocode/contracts",
        ConfigurationName = "VEGeocodeService.IGeocodeService")]
    public interface IGeocodeService
    {
        [OperationContract(AsyncPattern = true,
            Action = "http://dev.virtualearth.net/webservices/v1/geocode/contracts/IGeocodeService/Geoc" +
                     "ode",
            ReplyAction = "http://dev.virtualearth.net/webservices/v1/geocode/contracts/IGeocodeService/Geoc" +
                          "odeResponse")]
        IAsyncResult BeginGeocode(GeocodeRequest request, AsyncCallback callback, object asyncState);

        GeocodeResponse EndGeocode(IAsyncResult result);

        [OperationContract(AsyncPattern = true,
            Action = "http://dev.virtualearth.net/webservices/v1/geocode/contracts/IGeocodeService/Reve" +
                     "rseGeocode",
            ReplyAction = "http://dev.virtualearth.net/webservices/v1/geocode/contracts/IGeocodeService/Reve" +
                          "rseGeocodeResponse")]
        IAsyncResult BeginReverseGeocode(ReverseGeocodeRequest request, AsyncCallback callback, object asyncState);

        GeocodeResponse EndReverseGeocode(IAsyncResult result);
    }

    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public interface IGeocodeServiceChannel : IGeocodeService, IClientChannel
    {
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class GeocodeCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public GeocodeCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public GeocodeResponse Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GeocodeResponse) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class ReverseGeocodeCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public ReverseGeocodeCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public GeocodeResponse Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((GeocodeResponse) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class GeocodeServiceClient : ClientBase<IGeocodeService>, IGeocodeService
    {
        private BeginOperationDelegate onBeginCloseDelegate;
        private BeginOperationDelegate onBeginGeocodeDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;
        private BeginOperationDelegate onBeginReverseGeocodeDelegate;
        private SendOrPostCallback onCloseCompletedDelegate;
        private EndOperationDelegate onEndCloseDelegate;
        private EndOperationDelegate onEndGeocodeDelegate;

        private EndOperationDelegate onEndOpenDelegate;
        private EndOperationDelegate onEndReverseGeocodeDelegate;
        private SendOrPostCallback onGeocodeCompletedDelegate;

        private SendOrPostCallback onOpenCompletedDelegate;
        private SendOrPostCallback onReverseGeocodeCompletedDelegate;

        public GeocodeServiceClient()
        {
        }

        public GeocodeServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public GeocodeServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public GeocodeServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public GeocodeServiceClient(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        #region IGeocodeService Members

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult IGeocodeService.BeginGeocode(GeocodeRequest request, AsyncCallback callback, object asyncState)
        {
            return Channel.BeginGeocode(request, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        GeocodeResponse IGeocodeService.EndGeocode(IAsyncResult result)
        {
            return Channel.EndGeocode(result);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult IGeocodeService.BeginReverseGeocode(ReverseGeocodeRequest request, AsyncCallback callback,
                                                         object asyncState)
        {
            return Channel.BeginReverseGeocode(request, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        GeocodeResponse IGeocodeService.EndReverseGeocode(IAsyncResult result)
        {
            return Channel.EndReverseGeocode(result);
        }

        #endregion

        public event EventHandler<GeocodeCompletedEventArgs> GeocodeCompleted;

        public event EventHandler<ReverseGeocodeCompletedEventArgs> ReverseGeocodeCompleted;

        public event EventHandler<AsyncCompletedEventArgs> OpenCompleted;

        public event EventHandler<AsyncCompletedEventArgs> CloseCompleted;

        private IAsyncResult OnBeginGeocode(object[] inValues, AsyncCallback callback, object asyncState)
        {
            var request = ((GeocodeRequest) (inValues[0]));
            return ((IGeocodeService) (this)).BeginGeocode(request, callback, asyncState);
        }

        private object[] OnEndGeocode(IAsyncResult result)
        {
            GeocodeResponse retVal = ((IGeocodeService) (this)).EndGeocode(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnGeocodeCompleted(object state)
        {
            if ((GeocodeCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                GeocodeCompleted(this, new GeocodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void GeocodeAsync(GeocodeRequest request)
        {
            GeocodeAsync(request, null);
        }

        public void GeocodeAsync(GeocodeRequest request, object userState)
        {
            if ((onBeginGeocodeDelegate == null))
            {
                onBeginGeocodeDelegate = OnBeginGeocode;
            }
            if ((onEndGeocodeDelegate == null))
            {
                onEndGeocodeDelegate = OnEndGeocode;
            }
            if ((onGeocodeCompletedDelegate == null))
            {
                onGeocodeCompletedDelegate = OnGeocodeCompleted;
            }
            InvokeAsync(onBeginGeocodeDelegate, new object[]
                                                         {
                                                             request
                                                         }, onEndGeocodeDelegate, onGeocodeCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginReverseGeocode(object[] inValues, AsyncCallback callback, object asyncState)
        {
            var request = ((ReverseGeocodeRequest) (inValues[0]));
            return ((IGeocodeService) (this)).BeginReverseGeocode(request, callback, asyncState);
        }

        private object[] OnEndReverseGeocode(IAsyncResult result)
        {
            GeocodeResponse retVal = ((IGeocodeService) (this)).EndReverseGeocode(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnReverseGeocodeCompleted(object state)
        {
            if ((ReverseGeocodeCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                ReverseGeocodeCompleted(this,
                                        new ReverseGeocodeCompletedEventArgs(e.Results, e.Error, e.Cancelled,
                                                                             e.UserState));
            }
        }

        public void ReverseGeocodeAsync(ReverseGeocodeRequest request)
        {
            ReverseGeocodeAsync(request, null);
        }

        public void ReverseGeocodeAsync(ReverseGeocodeRequest request, object userState)
        {
            if ((onBeginReverseGeocodeDelegate == null))
            {
                onBeginReverseGeocodeDelegate = OnBeginReverseGeocode;
            }
            if ((onEndReverseGeocodeDelegate == null))
            {
                onEndReverseGeocodeDelegate = OnEndReverseGeocode;
            }
            if ((onReverseGeocodeCompletedDelegate == null))
            {
                onReverseGeocodeCompletedDelegate = OnReverseGeocodeCompleted;
            }
            InvokeAsync(onBeginReverseGeocodeDelegate, new object[]
                                                                {
                                                                    request
                                                                }, onEndReverseGeocodeDelegate,
                             onReverseGeocodeCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginOpen(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((OpenCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                OpenCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((onBeginOpenDelegate == null))
            {
                onBeginOpenDelegate = OnBeginOpen;
            }
            if ((onEndOpenDelegate == null))
            {
                onEndOpenDelegate = OnEndOpen;
            }
            if ((onOpenCompletedDelegate == null))
            {
                onOpenCompletedDelegate = OnOpenCompleted;
            }
            InvokeAsync(onBeginOpenDelegate, null, onEndOpenDelegate, onOpenCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginClose(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((CloseCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                CloseCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((onBeginCloseDelegate == null))
            {
                onBeginCloseDelegate = OnBeginClose;
            }
            if ((onEndCloseDelegate == null))
            {
                onEndCloseDelegate = OnEndClose;
            }
            if ((onCloseCompletedDelegate == null))
            {
                onCloseCompletedDelegate = OnCloseCompleted;
            }
            InvokeAsync(onBeginCloseDelegate, null, onEndCloseDelegate, onCloseCompletedDelegate, userState);
        }

        protected override IGeocodeService CreateChannel()
        {
            return new GeocodeServiceClientChannel(this);
        }

        #region Nested type: GeocodeServiceClientChannel

        private class GeocodeServiceClientChannel : ChannelBase<IGeocodeService>, IGeocodeService
        {
            public GeocodeServiceClientChannel(ClientBase<IGeocodeService> client) :
                base(client)
            {
            }

            #region IGeocodeService Members

            public IAsyncResult BeginGeocode(GeocodeRequest request, AsyncCallback callback, object asyncState)
            {
                var _args = new object[1];
                _args[0] = request;
                IAsyncResult _result = BeginInvoke("Geocode", _args, callback, asyncState);
                return _result;
            }

            public GeocodeResponse EndGeocode(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((GeocodeResponse) (EndInvoke("Geocode", _args, result)));
                return _result;
            }

            public IAsyncResult BeginReverseGeocode(ReverseGeocodeRequest request, AsyncCallback callback,
                                                    object asyncState)
            {
                var _args = new object[1];
                _args[0] = request;
                IAsyncResult _result = BeginInvoke("ReverseGeocode", _args, callback, asyncState);
                return _result;
            }

            public GeocodeResponse EndReverseGeocode(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((GeocodeResponse) (EndInvoke("ReverseGeocode", _args, result)));
                return _result;
            }

            #endregion
        }

        #endregion
    }
}