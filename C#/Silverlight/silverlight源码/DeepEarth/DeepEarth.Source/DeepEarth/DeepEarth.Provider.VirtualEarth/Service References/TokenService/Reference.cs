//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading;

namespace DeepEarth.Provider.VirtualEarth.TokenService
{
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    [ServiceContract(Namespace = "http://codeplex.com/deepearth", ConfigurationName = "TokenService.ITokenService")]
    public interface ITokenService
    {
        [OperationContract(AsyncPattern = true, Action = "http://codeplex.com/deepearth/ITokenService/GetToken",
            ReplyAction = "http://codeplex.com/deepearth/ITokenService/GetTokenResponse")]
        IAsyncResult BeginGetToken(AsyncCallback callback, object asyncState);

        string EndGetToken(IAsyncResult result);
    }

    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public interface ITokenServiceChannel : ITokenService, IClientChannel
    {
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class GetTokenCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public GetTokenCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public string Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((string) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class TokenServiceClient : ClientBase<ITokenService>, ITokenService
    {
        private BeginOperationDelegate onBeginCloseDelegate;
        private BeginOperationDelegate onBeginGetTokenDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;
        private SendOrPostCallback onCloseCompletedDelegate;
        private EndOperationDelegate onEndCloseDelegate;
        private EndOperationDelegate onEndGetTokenDelegate;

        private EndOperationDelegate onEndOpenDelegate;
        private SendOrPostCallback onGetTokenCompletedDelegate;

        private SendOrPostCallback onOpenCompletedDelegate;

        public TokenServiceClient()
        {
        }

        public TokenServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public TokenServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public TokenServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public TokenServiceClient(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        #region ITokenService Members

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult ITokenService.BeginGetToken(AsyncCallback callback, object asyncState)
        {
            return Channel.BeginGetToken(callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        string ITokenService.EndGetToken(IAsyncResult result)
        {
            return Channel.EndGetToken(result);
        }

        #endregion

        public event EventHandler<GetTokenCompletedEventArgs> GetTokenCompleted;

        public event EventHandler<AsyncCompletedEventArgs> OpenCompleted;

        public event EventHandler<AsyncCompletedEventArgs> CloseCompleted;

        private IAsyncResult OnBeginGetToken(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ITokenService) (this)).BeginGetToken(callback, asyncState);
        }

        private object[] OnEndGetToken(IAsyncResult result)
        {
            string retVal = ((ITokenService) (this)).EndGetToken(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnGetTokenCompleted(object state)
        {
            if ((GetTokenCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                GetTokenCompleted(this, new GetTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void GetTokenAsync()
        {
            GetTokenAsync(null);
        }

        public void GetTokenAsync(object userState)
        {
            if ((onBeginGetTokenDelegate == null))
            {
                onBeginGetTokenDelegate = OnBeginGetToken;
            }
            if ((onEndGetTokenDelegate == null))
            {
                onEndGetTokenDelegate = OnEndGetToken;
            }
            if ((onGetTokenCompletedDelegate == null))
            {
                onGetTokenCompletedDelegate = OnGetTokenCompleted;
            }
            InvokeAsync(onBeginGetTokenDelegate, null, onEndGetTokenDelegate, onGetTokenCompletedDelegate,
                             userState);
        }

        private IAsyncResult OnBeginOpen(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((OpenCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                OpenCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((onBeginOpenDelegate == null))
            {
                onBeginOpenDelegate = OnBeginOpen;
            }
            if ((onEndOpenDelegate == null))
            {
                onEndOpenDelegate = OnEndOpen;
            }
            if ((onOpenCompletedDelegate == null))
            {
                onOpenCompletedDelegate = OnOpenCompleted;
            }
            InvokeAsync(onBeginOpenDelegate, null, onEndOpenDelegate, onOpenCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginClose(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((CloseCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                CloseCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((onBeginCloseDelegate == null))
            {
                onBeginCloseDelegate = OnBeginClose;
            }
            if ((onEndCloseDelegate == null))
            {
                onEndCloseDelegate = OnEndClose;
            }
            if ((onCloseCompletedDelegate == null))
            {
                onCloseCompletedDelegate = OnCloseCompleted;
            }
            InvokeAsync(onBeginCloseDelegate, null, onEndCloseDelegate, onCloseCompletedDelegate, userState);
        }

        protected override ITokenService CreateChannel()
        {
            return new TokenServiceClientChannel(this);
        }

        #region Nested type: TokenServiceClientChannel

        private class TokenServiceClientChannel : ChannelBase<ITokenService>, ITokenService
        {
            public TokenServiceClientChannel(ClientBase<ITokenService> client) :
                base(client)
            {
            }

            #region ITokenService Members

            public IAsyncResult BeginGetToken(AsyncCallback callback, object asyncState)
            {
                var _args = new object[0];
                IAsyncResult _result = BeginInvoke("GetToken", _args, callback, asyncState);
                return _result;
            }

            public string EndGetToken(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((string) (EndInvoke("GetToken", _args, result)));
                return _result;
            }

            #endregion
        }

        #endregion
    }
}