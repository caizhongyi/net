//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading;

namespace DeepEarth.Provider.VirtualEarth.VERouteService
{
    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RequestBase", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (MajorRoutesRequest))]
    [KnownType(typeof (RouteRequest))]
    public class RequestBase : object, INotifyPropertyChanged
    {
        private Credentials CredentialsField;

        private string CultureField;

        private ExecutionOptions ExecutionOptionsField;

        private UserProfile UserProfileField;

        [DataMember]
        public Credentials Credentials
        {
            get { return CredentialsField; }
            set
            {
                if ((ReferenceEquals(CredentialsField, value) != true))
                {
                    CredentialsField = value;
                    RaisePropertyChanged("Credentials");
                }
            }
        }

        [DataMember]
        public string Culture
        {
            get { return CultureField; }
            set
            {
                if ((ReferenceEquals(CultureField, value) != true))
                {
                    CultureField = value;
                    RaisePropertyChanged("Culture");
                }
            }
        }

        [DataMember]
        public ExecutionOptions ExecutionOptions
        {
            get { return ExecutionOptionsField; }
            set
            {
                if ((ReferenceEquals(ExecutionOptionsField, value) != true))
                {
                    ExecutionOptionsField = value;
                    RaisePropertyChanged("ExecutionOptions");
                }
            }
        }

        [DataMember]
        public UserProfile UserProfile
        {
            get { return UserProfileField; }
            set
            {
                if ((ReferenceEquals(UserProfileField, value) != true))
                {
                    UserProfileField = value;
                    RaisePropertyChanged("UserProfile");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Credentials", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Credentials : object, INotifyPropertyChanged
    {
        private string ApplicationIdField;

        private string TokenField;

        [DataMember]
        public string ApplicationId
        {
            get { return ApplicationIdField; }
            set
            {
                if ((ReferenceEquals(ApplicationIdField, value) != true))
                {
                    ApplicationIdField = value;
                    RaisePropertyChanged("ApplicationId");
                }
            }
        }

        [DataMember]
        public string Token
        {
            get { return TokenField; }
            set
            {
                if ((ReferenceEquals(TokenField, value) != true))
                {
                    TokenField = value;
                    RaisePropertyChanged("Token");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ExecutionOptions", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class ExecutionOptions : object, INotifyPropertyChanged
    {
        private bool SuppressFaultsField;

        [DataMember]
        public bool SuppressFaults
        {
            get { return SuppressFaultsField; }
            set
            {
                if ((SuppressFaultsField.Equals(value) != true))
                {
                    SuppressFaultsField = value;
                    RaisePropertyChanged("SuppressFaults");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "UserProfile", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class UserProfile : object, INotifyPropertyChanged
    {
        private Heading CurrentHeadingField;

        private UserLocation CurrentLocationField;

        private DeviceType DeviceTypeField;

        private DistanceUnit DistanceUnitField;

        private string IPAddressField;

        private ShapeBase MapViewField;

        private SizeOfint ScreenSizeField;

        [DataMember]
        public Heading CurrentHeading
        {
            get { return CurrentHeadingField; }
            set
            {
                if ((ReferenceEquals(CurrentHeadingField, value) != true))
                {
                    CurrentHeadingField = value;
                    RaisePropertyChanged("CurrentHeading");
                }
            }
        }

        [DataMember]
        public UserLocation CurrentLocation
        {
            get { return CurrentLocationField; }
            set
            {
                if ((ReferenceEquals(CurrentLocationField, value) != true))
                {
                    CurrentLocationField = value;
                    RaisePropertyChanged("CurrentLocation");
                }
            }
        }

        [DataMember]
        public DeviceType DeviceType
        {
            get { return DeviceTypeField; }
            set
            {
                if ((DeviceTypeField.Equals(value) != true))
                {
                    DeviceTypeField = value;
                    RaisePropertyChanged("DeviceType");
                }
            }
        }

        [DataMember]
        public DistanceUnit DistanceUnit
        {
            get { return DistanceUnitField; }
            set
            {
                if ((DistanceUnitField.Equals(value) != true))
                {
                    DistanceUnitField = value;
                    RaisePropertyChanged("DistanceUnit");
                }
            }
        }

        [DataMember]
        public string IPAddress
        {
            get { return IPAddressField; }
            set
            {
                if ((ReferenceEquals(IPAddressField, value) != true))
                {
                    IPAddressField = value;
                    RaisePropertyChanged("IPAddress");
                }
            }
        }

        [DataMember]
        public ShapeBase MapView
        {
            get { return MapViewField; }
            set
            {
                if ((ReferenceEquals(MapViewField, value) != true))
                {
                    MapViewField = value;
                    RaisePropertyChanged("MapView");
                }
            }
        }

        [DataMember]
        public SizeOfint ScreenSize
        {
            get { return ScreenSizeField; }
            set
            {
                if ((ReferenceEquals(ScreenSizeField, value) != true))
                {
                    ScreenSizeField = value;
                    RaisePropertyChanged("ScreenSize");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "MajorRoutesRequest", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class MajorRoutesRequest : RequestBase
    {
        private Waypoint DestinationField;

        private MajorRoutesOptions OptionsField;

        [DataMember]
        public Waypoint Destination
        {
            get { return DestinationField; }
            set
            {
                if ((ReferenceEquals(DestinationField, value) != true))
                {
                    DestinationField = value;
                    RaisePropertyChanged("Destination");
                }
            }
        }

        [DataMember]
        public MajorRoutesOptions Options
        {
            get { return OptionsField; }
            set
            {
                if ((ReferenceEquals(OptionsField, value) != true))
                {
                    OptionsField = value;
                    RaisePropertyChanged("Options");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RouteRequest", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class RouteRequest : RequestBase
    {
        private RouteOptions OptionsField;

        private List<Waypoint> WaypointsField;

        [DataMember]
        public RouteOptions Options
        {
            get { return OptionsField; }
            set
            {
                if ((ReferenceEquals(OptionsField, value) != true))
                {
                    OptionsField = value;
                    RaisePropertyChanged("Options");
                }
            }
        }

        [DataMember]
        public List<Waypoint> Waypoints
        {
            get { return WaypointsField; }
            set
            {
                if ((ReferenceEquals(WaypointsField, value) != true))
                {
                    WaypointsField = value;
                    RaisePropertyChanged("Waypoints");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RouteOptions", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    [KnownType(typeof (MajorRoutesOptions))]
    public class RouteOptions : object, INotifyPropertyChanged
    {
        private TravelMode ModeField;

        private RouteOptimization OptimizationField;

        private RoutePathType RoutePathTypeField;

        private TrafficUsage TrafficUsageField;

        [DataMember]
        public TravelMode Mode
        {
            get { return ModeField; }
            set
            {
                if ((ModeField.Equals(value) != true))
                {
                    ModeField = value;
                    RaisePropertyChanged("Mode");
                }
            }
        }

        [DataMember]
        public RouteOptimization Optimization
        {
            get { return OptimizationField; }
            set
            {
                if ((OptimizationField.Equals(value) != true))
                {
                    OptimizationField = value;
                    RaisePropertyChanged("Optimization");
                }
            }
        }

        [DataMember]
        public RoutePathType RoutePathType
        {
            get { return RoutePathTypeField; }
            set
            {
                if ((RoutePathTypeField.Equals(value) != true))
                {
                    RoutePathTypeField = value;
                    RaisePropertyChanged("RoutePathType");
                }
            }
        }

        [DataMember]
        public TrafficUsage TrafficUsage
        {
            get { return TrafficUsageField; }
            set
            {
                if ((TrafficUsageField.Equals(value) != true))
                {
                    TrafficUsageField = value;
                    RaisePropertyChanged("TrafficUsage");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Waypoint", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class Waypoint : object, INotifyPropertyChanged
    {
        private string DescriptionField;

        private Location LocationField;

        [DataMember]
        public string Description
        {
            get { return DescriptionField; }
            set
            {
                if ((ReferenceEquals(DescriptionField, value) != true))
                {
                    DescriptionField = value;
                    RaisePropertyChanged("Description");
                }
            }
        }

        [DataMember]
        public Location Location
        {
            get { return LocationField; }
            set
            {
                if ((ReferenceEquals(LocationField, value) != true))
                {
                    LocationField = value;
                    RaisePropertyChanged("Location");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Heading", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Heading : object, INotifyPropertyChanged
    {
        private double OrientationField;

        [DataMember]
        public double Orientation
        {
            get { return OrientationField; }
            set
            {
                if ((OrientationField.Equals(value) != true))
                {
                    OrientationField = value;
                    RaisePropertyChanged("Orientation");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "UserLocation", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class UserLocation : Location
    {
        private Confidence ConfidenceField;

        [DataMember]
        public Confidence Confidence
        {
            get { return ConfidenceField; }
            set
            {
                if ((ConfidenceField.Equals(value) != true))
                {
                    ConfidenceField = value;
                    RaisePropertyChanged("Confidence");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ShapeBase", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (Rectangle))]
    [KnownType(typeof (Circle))]
    [KnownType(typeof (Polygon))]
    public class ShapeBase : object, INotifyPropertyChanged
    {
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "SizeOfint", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class SizeOfint : object, INotifyPropertyChanged
    {
        private int HeightField;

        private int WidthField;

        [DataMember]
        public int Height
        {
            get { return HeightField; }
            set
            {
                if ((HeightField.Equals(value) != true))
                {
                    HeightField = value;
                    RaisePropertyChanged("Height");
                }
            }
        }

        [DataMember]
        public int Width
        {
            get { return WidthField; }
            set
            {
                if ((WidthField.Equals(value) != true))
                {
                    WidthField = value;
                    RaisePropertyChanged("Width");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "DeviceType", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum DeviceType
    {
        [EnumMember] Desktop = 0,

        [EnumMember] Mobile = 1,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "DistanceUnit", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum DistanceUnit
    {
        [EnumMember] Kilometer = 0,

        [EnumMember] Mile = 1,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Location", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (GeocodeLocation))]
    [KnownType(typeof (UserLocation))]
    public class Location : object, INotifyPropertyChanged
    {
        private double AltitudeField;

        private double LatitudeField;

        private double LongitudeField;

        [DataMember]
        public double Altitude
        {
            get { return AltitudeField; }
            set
            {
                if ((AltitudeField.Equals(value) != true))
                {
                    AltitudeField = value;
                    RaisePropertyChanged("Altitude");
                }
            }
        }

        [DataMember]
        public double Latitude
        {
            get { return LatitudeField; }
            set
            {
                if ((LatitudeField.Equals(value) != true))
                {
                    LatitudeField = value;
                    RaisePropertyChanged("Latitude");
                }
            }
        }

        [DataMember]
        public double Longitude
        {
            get { return LongitudeField; }
            set
            {
                if ((LongitudeField.Equals(value) != true))
                {
                    LongitudeField = value;
                    RaisePropertyChanged("Longitude");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "GeocodeLocation", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class GeocodeLocation : Location
    {
        private string CalculationMethodField;

        [DataMember]
        public string CalculationMethod
        {
            get { return CalculationMethodField; }
            set
            {
                if ((ReferenceEquals(CalculationMethodField, value) != true))
                {
                    CalculationMethodField = value;
                    RaisePropertyChanged("CalculationMethod");
                }
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Confidence", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum Confidence
    {
        [EnumMember] High = 0,

        [EnumMember] Medium = 1,

        [EnumMember] Low = 2,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Rectangle", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Rectangle : ShapeBase
    {
        private Location NortheastField;

        private Location SouthwestField;

        [DataMember]
        public Location Northeast
        {
            get { return NortheastField; }
            set
            {
                if ((ReferenceEquals(NortheastField, value) != true))
                {
                    NortheastField = value;
                    RaisePropertyChanged("Northeast");
                }
            }
        }

        [DataMember]
        public Location Southwest
        {
            get { return SouthwestField; }
            set
            {
                if ((ReferenceEquals(SouthwestField, value) != true))
                {
                    SouthwestField = value;
                    RaisePropertyChanged("Southwest");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Circle", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Circle : ShapeBase
    {
        private Location CenterField;

        private DistanceUnit DistanceUnitField;

        private double RadiusField;

        [DataMember]
        public Location Center
        {
            get { return CenterField; }
            set
            {
                if ((ReferenceEquals(CenterField, value) != true))
                {
                    CenterField = value;
                    RaisePropertyChanged("Center");
                }
            }
        }

        [DataMember]
        public DistanceUnit DistanceUnit
        {
            get { return DistanceUnitField; }
            set
            {
                if ((DistanceUnitField.Equals(value) != true))
                {
                    DistanceUnitField = value;
                    RaisePropertyChanged("DistanceUnit");
                }
            }
        }

        [DataMember]
        public double Radius
        {
            get { return RadiusField; }
            set
            {
                if ((RadiusField.Equals(value) != true))
                {
                    RadiusField = value;
                    RaisePropertyChanged("Radius");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Polygon", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Polygon : ShapeBase
    {
        private List<Location> VerticesField;

        [DataMember]
        public List<Location> Vertices
        {
            get { return VerticesField; }
            set
            {
                if ((ReferenceEquals(VerticesField, value) != true))
                {
                    VerticesField = value;
                    RaisePropertyChanged("Vertices");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "MajorRoutesOptions", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class MajorRoutesOptions : RouteOptions
    {
        private bool ReturnRoutesField;

        [DataMember]
        public bool ReturnRoutes
        {
            get { return ReturnRoutesField; }
            set
            {
                if ((ReturnRoutesField.Equals(value) != true))
                {
                    ReturnRoutesField = value;
                    RaisePropertyChanged("ReturnRoutes");
                }
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "TravelMode", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public enum TravelMode
    {
        [EnumMember] Driving = 0,

        [EnumMember] Walking = 1,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RouteOptimization", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public enum RouteOptimization
    {
        [EnumMember] MinimizeTime = 0,

        [EnumMember] MinimizeDistance = 1,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RoutePathType", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public enum RoutePathType
    {
        [EnumMember] None = 0,

        [EnumMember] Points = 1,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "TrafficUsage", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public enum TrafficUsage
    {
        [EnumMember] None = 0,

        [EnumMember] TrafficBasedTime = 1,

        [EnumMember] TrafficBasedRouteAndTime = 2,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ResponseBase", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (MajorRoutesResponse))]
    [KnownType(typeof (RouteResponse))]
    public class ResponseBase : object, INotifyPropertyChanged
    {
        private ResponseSummary ResponseSummaryField;

        [DataMember]
        public ResponseSummary ResponseSummary
        {
            get { return ResponseSummaryField; }
            set
            {
                if ((ReferenceEquals(ResponseSummaryField, value) != true))
                {
                    ResponseSummaryField = value;
                    RaisePropertyChanged("ResponseSummary");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ResponseSummary", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class ResponseSummary : object, INotifyPropertyChanged
    {
        private AuthenticationResultCode AuthenticationResultCodeField;

        private string CopyrightField;

        private string FaultReasonField;

        private ResponseStatusCode StatusCodeField;

        private string TraceIdField;

        [DataMember]
        public AuthenticationResultCode AuthenticationResultCode
        {
            get { return AuthenticationResultCodeField; }
            set
            {
                if ((AuthenticationResultCodeField.Equals(value) != true))
                {
                    AuthenticationResultCodeField = value;
                    RaisePropertyChanged("AuthenticationResultCode");
                }
            }
        }

        [DataMember]
        public string Copyright
        {
            get { return CopyrightField; }
            set
            {
                if ((ReferenceEquals(CopyrightField, value) != true))
                {
                    CopyrightField = value;
                    RaisePropertyChanged("Copyright");
                }
            }
        }

        [DataMember]
        public string FaultReason
        {
            get { return FaultReasonField; }
            set
            {
                if ((ReferenceEquals(FaultReasonField, value) != true))
                {
                    FaultReasonField = value;
                    RaisePropertyChanged("FaultReason");
                }
            }
        }

        [DataMember]
        public ResponseStatusCode StatusCode
        {
            get { return StatusCodeField; }
            set
            {
                if ((StatusCodeField.Equals(value) != true))
                {
                    StatusCodeField = value;
                    RaisePropertyChanged("StatusCode");
                }
            }
        }

        [DataMember]
        public string TraceId
        {
            get { return TraceIdField; }
            set
            {
                if ((ReferenceEquals(TraceIdField, value) != true))
                {
                    TraceIdField = value;
                    RaisePropertyChanged("TraceId");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "MajorRoutesResponse", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class MajorRoutesResponse : ResponseBase
    {
        private List<RouteResult> RoutesField;

        private List<Waypoint> StartingPointsField;

        [DataMember]
        public List<RouteResult> Routes
        {
            get { return RoutesField; }
            set
            {
                if ((ReferenceEquals(RoutesField, value) != true))
                {
                    RoutesField = value;
                    RaisePropertyChanged("Routes");
                }
            }
        }

        [DataMember]
        public List<Waypoint> StartingPoints
        {
            get { return StartingPointsField; }
            set
            {
                if ((ReferenceEquals(StartingPointsField, value) != true))
                {
                    StartingPointsField = value;
                    RaisePropertyChanged("StartingPoints");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RouteResponse", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class RouteResponse : ResponseBase
    {
        private RouteResult ResultField;

        [DataMember]
        public RouteResult Result
        {
            get { return ResultField; }
            set
            {
                if ((ReferenceEquals(ResultField, value) != true))
                {
                    ResultField = value;
                    RaisePropertyChanged("Result");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RouteResult", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class RouteResult : object, INotifyPropertyChanged
    {
        private List<RouteLeg> LegsField;

        private RoutePath RoutePathField;

        private RouteSummary SummaryField;

        [DataMember]
        public List<RouteLeg> Legs
        {
            get { return LegsField; }
            set
            {
                if ((ReferenceEquals(LegsField, value) != true))
                {
                    LegsField = value;
                    RaisePropertyChanged("Legs");
                }
            }
        }

        [DataMember]
        public RoutePath RoutePath
        {
            get { return RoutePathField; }
            set
            {
                if ((ReferenceEquals(RoutePathField, value) != true))
                {
                    RoutePathField = value;
                    RaisePropertyChanged("RoutePath");
                }
            }
        }

        [DataMember]
        public RouteSummary Summary
        {
            get { return SummaryField; }
            set
            {
                if ((ReferenceEquals(SummaryField, value) != true))
                {
                    SummaryField = value;
                    RaisePropertyChanged("Summary");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "AuthenticationResultCode", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum AuthenticationResultCode
    {
        [EnumMember] None = 0,

        [EnumMember] NoCredentials = 1,

        [EnumMember] ValidCredentials = 2,

        [EnumMember] InvalidCredentials = 3,

        [EnumMember] CredentialsExpired = 4,

        [EnumMember] NotAuthorized = 7,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ResponseStatusCode", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum ResponseStatusCode
    {
        [EnumMember] Success = 0,

        [EnumMember] BadRequest = 1,

        [EnumMember] ServerError = 2,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RoutePath", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class RoutePath : object, INotifyPropertyChanged
    {
        private List<Location> PointsField;

        [DataMember]
        public List<Location> Points
        {
            get { return PointsField; }
            set
            {
                if ((ReferenceEquals(PointsField, value) != true))
                {
                    PointsField = value;
                    RaisePropertyChanged("Points");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RouteSummary", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class RouteSummary : object, INotifyPropertyChanged
    {
        private Rectangle BoundingRectangleField;

        private double DistanceField;

        private long TimeInSecondsField;

        [DataMember]
        public Rectangle BoundingRectangle
        {
            get { return BoundingRectangleField; }
            set
            {
                if ((ReferenceEquals(BoundingRectangleField, value) != true))
                {
                    BoundingRectangleField = value;
                    RaisePropertyChanged("BoundingRectangle");
                }
            }
        }

        [DataMember]
        public double Distance
        {
            get { return DistanceField; }
            set
            {
                if ((DistanceField.Equals(value) != true))
                {
                    DistanceField = value;
                    RaisePropertyChanged("Distance");
                }
            }
        }

        [DataMember]
        public long TimeInSeconds
        {
            get { return TimeInSecondsField; }
            set
            {
                if ((TimeInSecondsField.Equals(value) != true))
                {
                    TimeInSecondsField = value;
                    RaisePropertyChanged("TimeInSeconds");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RouteLeg", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class RouteLeg : object, INotifyPropertyChanged
    {
        private Location ActualEndField;

        private Location ActualStartField;

        private List<ItineraryItem> ItineraryField;

        private RouteSummary SummaryField;

        [DataMember]
        public Location ActualEnd
        {
            get { return ActualEndField; }
            set
            {
                if ((ReferenceEquals(ActualEndField, value) != true))
                {
                    ActualEndField = value;
                    RaisePropertyChanged("ActualEnd");
                }
            }
        }

        [DataMember]
        public Location ActualStart
        {
            get { return ActualStartField; }
            set
            {
                if ((ReferenceEquals(ActualStartField, value) != true))
                {
                    ActualStartField = value;
                    RaisePropertyChanged("ActualStart");
                }
            }
        }

        [DataMember]
        public List<ItineraryItem> Itinerary
        {
            get { return ItineraryField; }
            set
            {
                if ((ReferenceEquals(ItineraryField, value) != true))
                {
                    ItineraryField = value;
                    RaisePropertyChanged("Itinerary");
                }
            }
        }

        [DataMember]
        public RouteSummary Summary
        {
            get { return SummaryField; }
            set
            {
                if ((ReferenceEquals(SummaryField, value) != true))
                {
                    SummaryField = value;
                    RaisePropertyChanged("Summary");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ItineraryItem", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class ItineraryItem : object, INotifyPropertyChanged
    {
        private string CompassDirectionField;

        private List<ItineraryItemHint> HintsField;

        private Location LocationField;

        private ManeuverType ManeuverTypeField;

        private RouteSummary SummaryField;

        private string TextField;

        private List<ItineraryItemWarning> WarningsField;

        [DataMember]
        public string CompassDirection
        {
            get { return CompassDirectionField; }
            set
            {
                if ((ReferenceEquals(CompassDirectionField, value) != true))
                {
                    CompassDirectionField = value;
                    RaisePropertyChanged("CompassDirection");
                }
            }
        }

        [DataMember]
        public List<ItineraryItemHint> Hints
        {
            get { return HintsField; }
            set
            {
                if ((ReferenceEquals(HintsField, value) != true))
                {
                    HintsField = value;
                    RaisePropertyChanged("Hints");
                }
            }
        }

        [DataMember]
        public Location Location
        {
            get { return LocationField; }
            set
            {
                if ((ReferenceEquals(LocationField, value) != true))
                {
                    LocationField = value;
                    RaisePropertyChanged("Location");
                }
            }
        }

        [DataMember]
        public ManeuverType ManeuverType
        {
            get { return ManeuverTypeField; }
            set
            {
                if ((ManeuverTypeField.Equals(value) != true))
                {
                    ManeuverTypeField = value;
                    RaisePropertyChanged("ManeuverType");
                }
            }
        }

        [DataMember]
        public RouteSummary Summary
        {
            get { return SummaryField; }
            set
            {
                if ((ReferenceEquals(SummaryField, value) != true))
                {
                    SummaryField = value;
                    RaisePropertyChanged("Summary");
                }
            }
        }

        [DataMember]
        public string Text
        {
            get { return TextField; }
            set
            {
                if ((ReferenceEquals(TextField, value) != true))
                {
                    TextField = value;
                    RaisePropertyChanged("Text");
                }
            }
        }

        [DataMember]
        public List<ItineraryItemWarning> Warnings
        {
            get { return WarningsField; }
            set
            {
                if ((ReferenceEquals(WarningsField, value) != true))
                {
                    WarningsField = value;
                    RaisePropertyChanged("Warnings");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ItineraryItemHint", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class ItineraryItemHint : object, INotifyPropertyChanged
    {
        private ItineraryItemHintType HintTypeField;

        private string TextField;

        [DataMember]
        public ItineraryItemHintType HintType
        {
            get { return HintTypeField; }
            set
            {
                if ((HintTypeField.Equals(value) != true))
                {
                    HintTypeField = value;
                    RaisePropertyChanged("HintType");
                }
            }
        }

        [DataMember]
        public string Text
        {
            get { return TextField; }
            set
            {
                if ((ReferenceEquals(TextField, value) != true))
                {
                    TextField = value;
                    RaisePropertyChanged("Text");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ManeuverType", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public enum ManeuverType
    {
        [EnumMember] None = 0,

        [EnumMember] Unknown = 1,

        [EnumMember] DepartStart = 2,

        [EnumMember] DepartIntermediateStop = 3,

        [EnumMember] DepartIntermediateStopReturning = 4,

        [EnumMember] ArriveFinish = 5,

        [EnumMember] ArriveIntermediateStop = 6,

        [EnumMember] TurnLeft = 7,

        [EnumMember] TurnRight = 8,

        [EnumMember] TurnBack = 9,

        [EnumMember] UTurn = 10,

        [EnumMember] TurnToStayLeft = 11,

        [EnumMember] TurnToStayRight = 12,

        [EnumMember] BearLeft = 13,

        [EnumMember] BearRight = 14,

        [EnumMember] KeepToStayLeft = 15,

        [EnumMember] KeepToStayRight = 16,

        [EnumMember] KeepToStayStraight = 17,

        [EnumMember] KeepLeft = 18,

        [EnumMember] KeepRight = 19,

        [EnumMember] KeepStraight = 20,

        [EnumMember] Take = 21,

        [EnumMember] TakeRampLeft = 22,

        [EnumMember] TakeRampRight = 23,

        [EnumMember] TakeRampStraight = 24,

        [EnumMember] KeepOnrampLeft = 25,

        [EnumMember] KeepOnrampRight = 26,

        [EnumMember] KeepOnrampStraight = 27,

        [EnumMember] Merge = 28,

        [EnumMember] Continue = 29,

        [EnumMember] RoadNameChange = 30,

        [EnumMember] EnterRoundabout = 31,

        [EnumMember] ExitRoundabout = 32,

        [EnumMember] TurnRightThenTurnRight = 33,

        [EnumMember] TurnRightThenTurnLeft = 34,

        [EnumMember] TurnRightThenBearRight = 35,

        [EnumMember] TurnRightThenBearLeft = 36,

        [EnumMember] TurnLeftThenTurnLeft = 37,

        [EnumMember] TurnLeftThenTurnRight = 38,

        [EnumMember] TurnLeftThenBearLeft = 39,

        [EnumMember] TurnLeftThenBearRight = 40,

        [EnumMember] BearRightThenTurnRight = 41,

        [EnumMember] BearRightThenTurnLeft = 42,

        [EnumMember] BearRightThenBearRight = 43,

        [EnumMember] BearRightThenBearLeft = 44,

        [EnumMember] BearLeftThenTurnLeft = 45,

        [EnumMember] BearLeftThenTurnRight = 46,

        [EnumMember] BearLeftThenBearRight = 47,

        [EnumMember] BearLeftThenBearLeft = 48,

        [EnumMember] RampThenHighwayRight = 49,

        [EnumMember] RampThenHighwayLeft = 50,

        [EnumMember] RampToHighwayStraight = 51,

        [EnumMember] EnterThenExitRoundabout = 52,

        [EnumMember] BearThenMerge = 53,

        [EnumMember] TurnThenMerge = 54,

        [EnumMember] BearThenKeep = 55,

        [EnumMember] Transfer = 56,

        [EnumMember] Wait = 57,

        [EnumMember] TakeTransit = 58,

        [EnumMember] Walk = 59,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ItineraryItemWarning", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public class ItineraryItemWarning : object, INotifyPropertyChanged
    {
        private ItineraryWarningSeverity SeverityField;

        private string TextField;

        private ItineraryWarningType WarningTypeField;

        [DataMember]
        public ItineraryWarningSeverity Severity
        {
            get { return SeverityField; }
            set
            {
                if ((SeverityField.Equals(value) != true))
                {
                    SeverityField = value;
                    RaisePropertyChanged("Severity");
                }
            }
        }

        [DataMember]
        public string Text
        {
            get { return TextField; }
            set
            {
                if ((ReferenceEquals(TextField, value) != true))
                {
                    TextField = value;
                    RaisePropertyChanged("Text");
                }
            }
        }

        [DataMember]
        public ItineraryWarningType WarningType
        {
            get { return WarningTypeField; }
            set
            {
                if ((WarningTypeField.Equals(value) != true))
                {
                    WarningTypeField = value;
                    RaisePropertyChanged("WarningType");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ItineraryItemHintType", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public enum ItineraryItemHintType
    {
        [EnumMember] PreviousIntersection = 0,

        [EnumMember] NextIntersection = 1,

        [EnumMember] Landmark = 2,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ItineraryWarningSeverity", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public enum ItineraryWarningSeverity
    {
        [EnumMember] None = 0,

        [EnumMember] LowImpact = 1,

        [EnumMember] Minor = 2,

        [EnumMember] Moderate = 3,

        [EnumMember] Serious = 4,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ItineraryWarningType", Namespace = "http://dev.virtualearth.net/webservices/v1/route")]
    public enum ItineraryWarningType
    {
        [EnumMember] Accident = 0,

        [EnumMember] AdminDivisionChange = 1,

        [EnumMember] BlockedRoad = 2,

        [EnumMember] CheckTimetable = 3,

        [EnumMember] Congestion = 4,

        [EnumMember] CountryChange = 5,

        [EnumMember] DisabledVehicle = 6,

        [EnumMember] GateAccess = 7,

        [EnumMember] GetOffTransit = 8,

        [EnumMember] GetOnTransit = 9,

        [EnumMember] IllegalUTurn = 10,

        [EnumMember] MassTransit = 11,

        [EnumMember] Miscellaneous = 12,

        [EnumMember] NoIncident = 13,

        [EnumMember] None = 14,

        [EnumMember] Other = 15,

        [EnumMember] OtherNews = 16,

        [EnumMember] OtherTrafficIncidents = 17,

        [EnumMember] PlannedEvent = 18,

        [EnumMember] PrivateRoad = 19,

        [EnumMember] RestrictedTurn = 20,

        [EnumMember] RoadClosures = 21,

        [EnumMember] RoadHazard = 22,

        [EnumMember] ScheduledConstruction = 23,

        [EnumMember] SeasonalClosures = 24,

        [EnumMember] Tollbooth = 25,

        [EnumMember] TollRoad = 26,

        [EnumMember] TrafficFlow = 27,

        [EnumMember] UnpavedRoad = 28,

        [EnumMember] UnscheduledConstruction = 29,

        [EnumMember] Weather = 30,
    }

    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    [ServiceContract(Namespace = "http://dev.virtualearth.net/webservices/v1/route/contracts",
        ConfigurationName = "VERouteService.IRouteService")]
    public interface IRouteService
    {
        [OperationContract(AsyncPattern = true,
            Action = "http://dev.virtualearth.net/webservices/v1/route/contracts/IRouteService/Calculat" +
                     "eRoute",
            ReplyAction = "http://dev.virtualearth.net/webservices/v1/route/contracts/IRouteService/Calculat" +
                          "eRouteResponse")]
        IAsyncResult BeginCalculateRoute(RouteRequest request, AsyncCallback callback, object asyncState);

        RouteResponse EndCalculateRoute(IAsyncResult result);

        [OperationContract(AsyncPattern = true,
            Action = "http://dev.virtualearth.net/webservices/v1/route/contracts/IRouteService/Calculat" +
                     "eRoutesFromMajorRoads",
            ReplyAction = "http://dev.virtualearth.net/webservices/v1/route/contracts/IRouteService/Calculat" +
                          "eRoutesFromMajorRoadsResponse")]
        IAsyncResult BeginCalculateRoutesFromMajorRoads(MajorRoutesRequest request, AsyncCallback callback,
                                                        object asyncState);

        MajorRoutesResponse EndCalculateRoutesFromMajorRoads(IAsyncResult result);
    }

    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public interface IRouteServiceChannel : IRouteService, IClientChannel
    {
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class CalculateRouteCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public CalculateRouteCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState)
            :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public RouteResponse Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((RouteResponse) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class CalculateRoutesFromMajorRoadsCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public CalculateRoutesFromMajorRoadsCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                               object userState) :
                                                                   base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public MajorRoutesResponse Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((MajorRoutesResponse) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class RouteServiceClient : ClientBase<IRouteService>, IRouteService
    {
        private BeginOperationDelegate onBeginCalculateRouteDelegate;

        private BeginOperationDelegate onBeginCalculateRoutesFromMajorRoadsDelegate;
        private BeginOperationDelegate onBeginCloseDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;
        private SendOrPostCallback onCalculateRouteCompletedDelegate;
        private SendOrPostCallback onCalculateRoutesFromMajorRoadsCompletedDelegate;
        private SendOrPostCallback onCloseCompletedDelegate;
        private EndOperationDelegate onEndCalculateRouteDelegate;
        private EndOperationDelegate onEndCalculateRoutesFromMajorRoadsDelegate;
        private EndOperationDelegate onEndCloseDelegate;

        private EndOperationDelegate onEndOpenDelegate;

        private SendOrPostCallback onOpenCompletedDelegate;

        public RouteServiceClient()
        {
        }

        public RouteServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public RouteServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public RouteServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public RouteServiceClient(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        #region IRouteService Members

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult IRouteService.BeginCalculateRoute(RouteRequest request, AsyncCallback callback, object asyncState)
        {
            return Channel.BeginCalculateRoute(request, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        RouteResponse IRouteService.EndCalculateRoute(IAsyncResult result)
        {
            return Channel.EndCalculateRoute(result);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult IRouteService.BeginCalculateRoutesFromMajorRoads(MajorRoutesRequest request, AsyncCallback callback,
                                                                      object asyncState)
        {
            return Channel.BeginCalculateRoutesFromMajorRoads(request, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        MajorRoutesResponse IRouteService.EndCalculateRoutesFromMajorRoads(IAsyncResult result)
        {
            return Channel.EndCalculateRoutesFromMajorRoads(result);
        }

        #endregion

        public event EventHandler<CalculateRouteCompletedEventArgs> CalculateRouteCompleted;

        public event EventHandler<CalculateRoutesFromMajorRoadsCompletedEventArgs>
            CalculateRoutesFromMajorRoadsCompleted;

        public event EventHandler<AsyncCompletedEventArgs> OpenCompleted;

        public event EventHandler<AsyncCompletedEventArgs> CloseCompleted;

        private IAsyncResult OnBeginCalculateRoute(object[] inValues, AsyncCallback callback, object asyncState)
        {
            var request = ((RouteRequest) (inValues[0]));
            return ((IRouteService) (this)).BeginCalculateRoute(request, callback, asyncState);
        }

        private object[] OnEndCalculateRoute(IAsyncResult result)
        {
            RouteResponse retVal = ((IRouteService) (this)).EndCalculateRoute(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnCalculateRouteCompleted(object state)
        {
            if ((CalculateRouteCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                CalculateRouteCompleted(this,
                                        new CalculateRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled,
                                                                             e.UserState));
            }
        }

        public void CalculateRouteAsync(RouteRequest request)
        {
            CalculateRouteAsync(request, null);
        }

        public void CalculateRouteAsync(RouteRequest request, object userState)
        {
            if ((onBeginCalculateRouteDelegate == null))
            {
                onBeginCalculateRouteDelegate = OnBeginCalculateRoute;
            }
            if ((onEndCalculateRouteDelegate == null))
            {
                onEndCalculateRouteDelegate = OnEndCalculateRoute;
            }
            if ((onCalculateRouteCompletedDelegate == null))
            {
                onCalculateRouteCompletedDelegate = OnCalculateRouteCompleted;
            }
            InvokeAsync(onBeginCalculateRouteDelegate, new object[]
                                                                {
                                                                    request
                                                                }, onEndCalculateRouteDelegate,
                             onCalculateRouteCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginCalculateRoutesFromMajorRoads(object[] inValues, AsyncCallback callback,
                                                                  object asyncState)
        {
            var request = ((MajorRoutesRequest) (inValues[0]));
            return ((IRouteService) (this)).BeginCalculateRoutesFromMajorRoads(request, callback, asyncState);
        }

        private object[] OnEndCalculateRoutesFromMajorRoads(IAsyncResult result)
        {
            MajorRoutesResponse retVal = ((IRouteService) (this)).EndCalculateRoutesFromMajorRoads(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnCalculateRoutesFromMajorRoadsCompleted(object state)
        {
            if ((CalculateRoutesFromMajorRoadsCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                CalculateRoutesFromMajorRoadsCompleted(this,
                                                       new CalculateRoutesFromMajorRoadsCompletedEventArgs(e.Results,
                                                                                                           e.Error,
                                                                                                           e.Cancelled,
                                                                                                           e.UserState));
            }
        }

        public void CalculateRoutesFromMajorRoadsAsync(MajorRoutesRequest request)
        {
            CalculateRoutesFromMajorRoadsAsync(request, null);
        }

        public void CalculateRoutesFromMajorRoadsAsync(MajorRoutesRequest request, object userState)
        {
            if ((onBeginCalculateRoutesFromMajorRoadsDelegate == null))
            {
                onBeginCalculateRoutesFromMajorRoadsDelegate = OnBeginCalculateRoutesFromMajorRoads;
            }
            if ((onEndCalculateRoutesFromMajorRoadsDelegate == null))
            {
                onEndCalculateRoutesFromMajorRoadsDelegate = OnEndCalculateRoutesFromMajorRoads;
            }
            if ((onCalculateRoutesFromMajorRoadsCompletedDelegate == null))
            {
                onCalculateRoutesFromMajorRoadsCompletedDelegate = OnCalculateRoutesFromMajorRoadsCompleted;
            }
            InvokeAsync(onBeginCalculateRoutesFromMajorRoadsDelegate, new object[]
                                                                               {
                                                                                   request
                                                                               },
                             onEndCalculateRoutesFromMajorRoadsDelegate,
                             onCalculateRoutesFromMajorRoadsCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginOpen(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((OpenCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                OpenCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((onBeginOpenDelegate == null))
            {
                onBeginOpenDelegate = OnBeginOpen;
            }
            if ((onEndOpenDelegate == null))
            {
                onEndOpenDelegate = OnEndOpen;
            }
            if ((onOpenCompletedDelegate == null))
            {
                onOpenCompletedDelegate = OnOpenCompleted;
            }
            InvokeAsync(onBeginOpenDelegate, null, onEndOpenDelegate, onOpenCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginClose(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((CloseCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                CloseCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((onBeginCloseDelegate == null))
            {
                onBeginCloseDelegate = OnBeginClose;
            }
            if ((onEndCloseDelegate == null))
            {
                onEndCloseDelegate = OnEndClose;
            }
            if ((onCloseCompletedDelegate == null))
            {
                onCloseCompletedDelegate = OnCloseCompleted;
            }
            InvokeAsync(onBeginCloseDelegate, null, onEndCloseDelegate, onCloseCompletedDelegate, userState);
        }

        protected override IRouteService CreateChannel()
        {
            return new RouteServiceClientChannel(this);
        }

        #region Nested type: RouteServiceClientChannel

        private class RouteServiceClientChannel : ChannelBase<IRouteService>, IRouteService
        {
            public RouteServiceClientChannel(ClientBase<IRouteService> client) :
                base(client)
            {
            }

            #region IRouteService Members

            public IAsyncResult BeginCalculateRoute(RouteRequest request, AsyncCallback callback, object asyncState)
            {
                var _args = new object[1];
                _args[0] = request;
                IAsyncResult _result = BeginInvoke("CalculateRoute", _args, callback, asyncState);
                return _result;
            }

            public RouteResponse EndCalculateRoute(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((RouteResponse) (EndInvoke("CalculateRoute", _args, result)));
                return _result;
            }

            public IAsyncResult BeginCalculateRoutesFromMajorRoads(MajorRoutesRequest request, AsyncCallback callback,
                                                                   object asyncState)
            {
                var _args = new object[1];
                _args[0] = request;
                IAsyncResult _result = BeginInvoke("CalculateRoutesFromMajorRoads", _args, callback, asyncState);
                return _result;
            }

            public MajorRoutesResponse EndCalculateRoutesFromMajorRoads(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((MajorRoutesResponse) (EndInvoke("CalculateRoutesFromMajorRoads", _args, result)));
                return _result;
            }

            #endregion
        }

        #endregion
    }
}