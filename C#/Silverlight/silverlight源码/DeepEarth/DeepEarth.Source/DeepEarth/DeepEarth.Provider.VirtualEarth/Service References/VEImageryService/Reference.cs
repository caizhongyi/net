//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading;

namespace DeepEarth.Provider.VirtualEarth.VEImageryService
{
    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RequestBase", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (MapUriRequest))]
    [KnownType(typeof (ImageryMetadataRequest))]
    public class RequestBase : object, INotifyPropertyChanged
    {
        private Credentials CredentialsField;

        private string CultureField;

        private ExecutionOptions ExecutionOptionsField;

        private UserProfile UserProfileField;

        [DataMember]
        public Credentials Credentials
        {
            get { return CredentialsField; }
            set
            {
                if ((ReferenceEquals(CredentialsField, value) != true))
                {
                    CredentialsField = value;
                    RaisePropertyChanged("Credentials");
                }
            }
        }

        [DataMember]
        public string Culture
        {
            get { return CultureField; }
            set
            {
                if ((ReferenceEquals(CultureField, value) != true))
                {
                    CultureField = value;
                    RaisePropertyChanged("Culture");
                }
            }
        }

        [DataMember]
        public ExecutionOptions ExecutionOptions
        {
            get { return ExecutionOptionsField; }
            set
            {
                if ((ReferenceEquals(ExecutionOptionsField, value) != true))
                {
                    ExecutionOptionsField = value;
                    RaisePropertyChanged("ExecutionOptions");
                }
            }
        }

        [DataMember]
        public UserProfile UserProfile
        {
            get { return UserProfileField; }
            set
            {
                if ((ReferenceEquals(UserProfileField, value) != true))
                {
                    UserProfileField = value;
                    RaisePropertyChanged("UserProfile");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Credentials", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Credentials : object, INotifyPropertyChanged
    {
        private string ApplicationIdField;

        private string TokenField;

        [DataMember]
        public string ApplicationId
        {
            get { return ApplicationIdField; }
            set
            {
                if ((ReferenceEquals(ApplicationIdField, value) != true))
                {
                    ApplicationIdField = value;
                    RaisePropertyChanged("ApplicationId");
                }
            }
        }

        [DataMember]
        public string Token
        {
            get { return TokenField; }
            set
            {
                if ((ReferenceEquals(TokenField, value) != true))
                {
                    TokenField = value;
                    RaisePropertyChanged("Token");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ExecutionOptions", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class ExecutionOptions : object, INotifyPropertyChanged
    {
        private bool SuppressFaultsField;

        [DataMember]
        public bool SuppressFaults
        {
            get { return SuppressFaultsField; }
            set
            {
                if ((SuppressFaultsField.Equals(value) != true))
                {
                    SuppressFaultsField = value;
                    RaisePropertyChanged("SuppressFaults");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "UserProfile", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class UserProfile : object, INotifyPropertyChanged
    {
        private Heading CurrentHeadingField;

        private UserLocation CurrentLocationField;

        private DeviceType DeviceTypeField;

        private DistanceUnit DistanceUnitField;

        private string IPAddressField;

        private ShapeBase MapViewField;

        private SizeOfint ScreenSizeField;

        [DataMember]
        public Heading CurrentHeading
        {
            get { return CurrentHeadingField; }
            set
            {
                if ((ReferenceEquals(CurrentHeadingField, value) != true))
                {
                    CurrentHeadingField = value;
                    RaisePropertyChanged("CurrentHeading");
                }
            }
        }

        [DataMember]
        public UserLocation CurrentLocation
        {
            get { return CurrentLocationField; }
            set
            {
                if ((ReferenceEquals(CurrentLocationField, value) != true))
                {
                    CurrentLocationField = value;
                    RaisePropertyChanged("CurrentLocation");
                }
            }
        }

        [DataMember]
        public DeviceType DeviceType
        {
            get { return DeviceTypeField; }
            set
            {
                if ((DeviceTypeField.Equals(value) != true))
                {
                    DeviceTypeField = value;
                    RaisePropertyChanged("DeviceType");
                }
            }
        }

        [DataMember]
        public DistanceUnit DistanceUnit
        {
            get { return DistanceUnitField; }
            set
            {
                if ((DistanceUnitField.Equals(value) != true))
                {
                    DistanceUnitField = value;
                    RaisePropertyChanged("DistanceUnit");
                }
            }
        }

        [DataMember]
        public string IPAddress
        {
            get { return IPAddressField; }
            set
            {
                if ((ReferenceEquals(IPAddressField, value) != true))
                {
                    IPAddressField = value;
                    RaisePropertyChanged("IPAddress");
                }
            }
        }

        [DataMember]
        public ShapeBase MapView
        {
            get { return MapViewField; }
            set
            {
                if ((ReferenceEquals(MapViewField, value) != true))
                {
                    MapViewField = value;
                    RaisePropertyChanged("MapView");
                }
            }
        }

        [DataMember]
        public SizeOfint ScreenSize
        {
            get { return ScreenSizeField; }
            set
            {
                if ((ReferenceEquals(ScreenSizeField, value) != true))
                {
                    ScreenSizeField = value;
                    RaisePropertyChanged("ScreenSize");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "MapUriRequest", Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    public class MapUriRequest : RequestBase
    {
        private Location CenterField;

        private Location MajorRoutesDestinationField;

        private MapUriOptions OptionsField;

        private List<Pushpin> PushpinsField;

        [DataMember]
        public Location Center
        {
            get { return CenterField; }
            set
            {
                if ((ReferenceEquals(CenterField, value) != true))
                {
                    CenterField = value;
                    RaisePropertyChanged("Center");
                }
            }
        }

        [DataMember]
        public Location MajorRoutesDestination
        {
            get { return MajorRoutesDestinationField; }
            set
            {
                if ((ReferenceEquals(MajorRoutesDestinationField, value) != true))
                {
                    MajorRoutesDestinationField = value;
                    RaisePropertyChanged("MajorRoutesDestination");
                }
            }
        }

        [DataMember]
        public MapUriOptions Options
        {
            get { return OptionsField; }
            set
            {
                if ((ReferenceEquals(OptionsField, value) != true))
                {
                    OptionsField = value;
                    RaisePropertyChanged("Options");
                }
            }
        }

        [DataMember]
        public List<Pushpin> Pushpins
        {
            get { return PushpinsField; }
            set
            {
                if ((ReferenceEquals(PushpinsField, value) != true))
                {
                    PushpinsField = value;
                    RaisePropertyChanged("Pushpins");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ImageryMetadataRequest", Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    public class ImageryMetadataRequest : RequestBase
    {
        private ImageryMetadataOptions OptionsField;

        private MapStyle StyleField;

        [DataMember]
        public ImageryMetadataOptions Options
        {
            get { return OptionsField; }
            set
            {
                if ((ReferenceEquals(OptionsField, value) != true))
                {
                    OptionsField = value;
                    RaisePropertyChanged("Options");
                }
            }
        }

        [DataMember]
        public MapStyle Style
        {
            get { return StyleField; }
            set
            {
                if ((StyleField.Equals(value) != true))
                {
                    StyleField = value;
                    RaisePropertyChanged("Style");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ImageryMetadataOptions", Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    public class ImageryMetadataOptions : object, INotifyPropertyChanged
    {
        private Heading HeadingField;

        private Location LocationField;

        private bool ReturnImageryProvidersField;

        private UriScheme UriSchemeField;

        private int? ZoomLevelField;

        [DataMember]
        public Heading Heading
        {
            get { return HeadingField; }
            set
            {
                if ((ReferenceEquals(HeadingField, value) != true))
                {
                    HeadingField = value;
                    RaisePropertyChanged("Heading");
                }
            }
        }

        [DataMember]
        public Location Location
        {
            get { return LocationField; }
            set
            {
                if ((ReferenceEquals(LocationField, value) != true))
                {
                    LocationField = value;
                    RaisePropertyChanged("Location");
                }
            }
        }

        [DataMember]
        public bool ReturnImageryProviders
        {
            get { return ReturnImageryProvidersField; }
            set
            {
                if ((ReturnImageryProvidersField.Equals(value) != true))
                {
                    ReturnImageryProvidersField = value;
                    RaisePropertyChanged("ReturnImageryProviders");
                }
            }
        }

        [DataMember]
        public UriScheme UriScheme
        {
            get { return UriSchemeField; }
            set
            {
                if ((UriSchemeField.Equals(value) != true))
                {
                    UriSchemeField = value;
                    RaisePropertyChanged("UriScheme");
                }
            }
        }

        [DataMember]
        public int? ZoomLevel
        {
            get { return ZoomLevelField; }
            set
            {
                if ((ZoomLevelField.Equals(value) != true))
                {
                    ZoomLevelField = value;
                    RaisePropertyChanged("ZoomLevel");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "MapStyle", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum MapStyle
    {
        [EnumMember] Road = 0,

        [EnumMember] Aerial = 1,

        [EnumMember] AerialWithLabels = 2,

        [EnumMember] Birdseye = 3,

        [EnumMember] BirdseyeWithLabels = 4,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Heading", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Heading : object, INotifyPropertyChanged
    {
        private double OrientationField;

        [DataMember]
        public double Orientation
        {
            get { return OrientationField; }
            set
            {
                if ((OrientationField.Equals(value) != true))
                {
                    OrientationField = value;
                    RaisePropertyChanged("Orientation");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "UserLocation", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class UserLocation : Location
    {
        private Confidence ConfidenceField;

        [DataMember]
        public Confidence Confidence
        {
            get { return ConfidenceField; }
            set
            {
                if ((ConfidenceField.Equals(value) != true))
                {
                    ConfidenceField = value;
                    RaisePropertyChanged("Confidence");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ShapeBase", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (Rectangle))]
    [KnownType(typeof (Circle))]
    [KnownType(typeof (Polygon))]
    public class ShapeBase : object, INotifyPropertyChanged
    {
        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "SizeOfint", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class SizeOfint : object, INotifyPropertyChanged
    {
        private int HeightField;

        private int WidthField;

        [DataMember]
        public int Height
        {
            get { return HeightField; }
            set
            {
                if ((HeightField.Equals(value) != true))
                {
                    HeightField = value;
                    RaisePropertyChanged("Height");
                }
            }
        }

        [DataMember]
        public int Width
        {
            get { return WidthField; }
            set
            {
                if ((WidthField.Equals(value) != true))
                {
                    WidthField = value;
                    RaisePropertyChanged("Width");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "DeviceType", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum DeviceType
    {
        [EnumMember] Desktop = 0,

        [EnumMember] Mobile = 1,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "DistanceUnit", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum DistanceUnit
    {
        [EnumMember] Kilometer = 0,

        [EnumMember] Mile = 1,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Location", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (GeocodeLocation))]
    [KnownType(typeof (UserLocation))]
    public class Location : object, INotifyPropertyChanged
    {
        private double AltitudeField;

        private double LatitudeField;

        private double LongitudeField;

        [DataMember]
        public double Altitude
        {
            get { return AltitudeField; }
            set
            {
                if ((AltitudeField.Equals(value) != true))
                {
                    AltitudeField = value;
                    RaisePropertyChanged("Altitude");
                }
            }
        }

        [DataMember]
        public double Latitude
        {
            get { return LatitudeField; }
            set
            {
                if ((LatitudeField.Equals(value) != true))
                {
                    LatitudeField = value;
                    RaisePropertyChanged("Latitude");
                }
            }
        }

        [DataMember]
        public double Longitude
        {
            get { return LongitudeField; }
            set
            {
                if ((LongitudeField.Equals(value) != true))
                {
                    LongitudeField = value;
                    RaisePropertyChanged("Longitude");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "GeocodeLocation", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class GeocodeLocation : Location
    {
        private string CalculationMethodField;

        [DataMember]
        public string CalculationMethod
        {
            get { return CalculationMethodField; }
            set
            {
                if ((ReferenceEquals(CalculationMethodField, value) != true))
                {
                    CalculationMethodField = value;
                    RaisePropertyChanged("CalculationMethod");
                }
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Confidence", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum Confidence
    {
        [EnumMember] High = 0,

        [EnumMember] Medium = 1,

        [EnumMember] Low = 2,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Rectangle", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Rectangle : ShapeBase
    {
        private Location NortheastField;

        private Location SouthwestField;

        [DataMember]
        public Location Northeast
        {
            get { return NortheastField; }
            set
            {
                if ((ReferenceEquals(NortheastField, value) != true))
                {
                    NortheastField = value;
                    RaisePropertyChanged("Northeast");
                }
            }
        }

        [DataMember]
        public Location Southwest
        {
            get { return SouthwestField; }
            set
            {
                if ((ReferenceEquals(SouthwestField, value) != true))
                {
                    SouthwestField = value;
                    RaisePropertyChanged("Southwest");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Circle", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Circle : ShapeBase
    {
        private Location CenterField;

        private DistanceUnit DistanceUnitField;

        private double RadiusField;

        [DataMember]
        public Location Center
        {
            get { return CenterField; }
            set
            {
                if ((ReferenceEquals(CenterField, value) != true))
                {
                    CenterField = value;
                    RaisePropertyChanged("Center");
                }
            }
        }

        [DataMember]
        public DistanceUnit DistanceUnit
        {
            get { return DistanceUnitField; }
            set
            {
                if ((DistanceUnitField.Equals(value) != true))
                {
                    DistanceUnitField = value;
                    RaisePropertyChanged("DistanceUnit");
                }
            }
        }

        [DataMember]
        public double Radius
        {
            get { return RadiusField; }
            set
            {
                if ((RadiusField.Equals(value) != true))
                {
                    RadiusField = value;
                    RaisePropertyChanged("Radius");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Polygon", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Polygon : ShapeBase
    {
        private List<Location> VerticesField;

        [DataMember]
        public List<Location> Vertices
        {
            get { return VerticesField; }
            set
            {
                if ((ReferenceEquals(VerticesField, value) != true))
                {
                    VerticesField = value;
                    RaisePropertyChanged("Vertices");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "MapUriOptions", Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    public class MapUriOptions : object, INotifyPropertyChanged
    {
        private List<string> DisplayLayersField;

        private SizeOfint ImageSizeField;

        private ImageType ImageTypeField;

        private bool PreventIconCollisionField;

        private MapStyle StyleField;

        private UriScheme UriSchemeField;

        private int? ZoomLevelField;

        [DataMember]
        public List<string> DisplayLayers
        {
            get { return DisplayLayersField; }
            set
            {
                if ((ReferenceEquals(DisplayLayersField, value) != true))
                {
                    DisplayLayersField = value;
                    RaisePropertyChanged("DisplayLayers");
                }
            }
        }

        [DataMember]
        public SizeOfint ImageSize
        {
            get { return ImageSizeField; }
            set
            {
                if ((ReferenceEquals(ImageSizeField, value) != true))
                {
                    ImageSizeField = value;
                    RaisePropertyChanged("ImageSize");
                }
            }
        }

        [DataMember]
        public ImageType ImageType
        {
            get { return ImageTypeField; }
            set
            {
                if ((ImageTypeField.Equals(value) != true))
                {
                    ImageTypeField = value;
                    RaisePropertyChanged("ImageType");
                }
            }
        }

        [DataMember]
        public bool PreventIconCollision
        {
            get { return PreventIconCollisionField; }
            set
            {
                if ((PreventIconCollisionField.Equals(value) != true))
                {
                    PreventIconCollisionField = value;
                    RaisePropertyChanged("PreventIconCollision");
                }
            }
        }

        [DataMember]
        public MapStyle Style
        {
            get { return StyleField; }
            set
            {
                if ((StyleField.Equals(value) != true))
                {
                    StyleField = value;
                    RaisePropertyChanged("Style");
                }
            }
        }

        [DataMember]
        public UriScheme UriScheme
        {
            get { return UriSchemeField; }
            set
            {
                if ((UriSchemeField.Equals(value) != true))
                {
                    UriSchemeField = value;
                    RaisePropertyChanged("UriScheme");
                }
            }
        }

        [DataMember]
        public int? ZoomLevel
        {
            get { return ZoomLevelField; }
            set
            {
                if ((ZoomLevelField.Equals(value) != true))
                {
                    ZoomLevelField = value;
                    RaisePropertyChanged("ZoomLevel");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "Pushpin", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class Pushpin : object, INotifyPropertyChanged
    {
        private string IconStyleField;

        private string LabelField;

        private Location LocationField;

        [DataMember]
        public string IconStyle
        {
            get { return IconStyleField; }
            set
            {
                if ((ReferenceEquals(IconStyleField, value) != true))
                {
                    IconStyleField = value;
                    RaisePropertyChanged("IconStyle");
                }
            }
        }

        [DataMember]
        public string Label
        {
            get { return LabelField; }
            set
            {
                if ((ReferenceEquals(LabelField, value) != true))
                {
                    LabelField = value;
                    RaisePropertyChanged("Label");
                }
            }
        }

        [DataMember]
        public Location Location
        {
            get { return LocationField; }
            set
            {
                if ((ReferenceEquals(LocationField, value) != true))
                {
                    LocationField = value;
                    RaisePropertyChanged("Location");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ImageType", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum ImageType
    {
        [EnumMember] Default = 0,

        [EnumMember] Png = 1,

        [EnumMember] Jpeg = 2,

        [EnumMember] Gif = 3,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "UriScheme", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum UriScheme
    {
        [EnumMember] Http = 0,

        [EnumMember] Https = 1,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ResponseBase", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    [KnownType(typeof (MapUriResponse))]
    [KnownType(typeof (ImageryMetadataResponse))]
    public class ResponseBase : object, INotifyPropertyChanged
    {
        private ResponseSummary ResponseSummaryField;

        [DataMember]
        public ResponseSummary ResponseSummary
        {
            get { return ResponseSummaryField; }
            set
            {
                if ((ReferenceEquals(ResponseSummaryField, value) != true))
                {
                    ResponseSummaryField = value;
                    RaisePropertyChanged("ResponseSummary");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ResponseSummary", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class ResponseSummary : object, INotifyPropertyChanged
    {
        private AuthenticationResultCode AuthenticationResultCodeField;

        private string CopyrightField;

        private string FaultReasonField;

        private ResponseStatusCode StatusCodeField;

        private string TraceIdField;

        [DataMember]
        public AuthenticationResultCode AuthenticationResultCode
        {
            get { return AuthenticationResultCodeField; }
            set
            {
                if ((AuthenticationResultCodeField.Equals(value) != true))
                {
                    AuthenticationResultCodeField = value;
                    RaisePropertyChanged("AuthenticationResultCode");
                }
            }
        }

        [DataMember]
        public string Copyright
        {
            get { return CopyrightField; }
            set
            {
                if ((ReferenceEquals(CopyrightField, value) != true))
                {
                    CopyrightField = value;
                    RaisePropertyChanged("Copyright");
                }
            }
        }

        [DataMember]
        public string FaultReason
        {
            get { return FaultReasonField; }
            set
            {
                if ((ReferenceEquals(FaultReasonField, value) != true))
                {
                    FaultReasonField = value;
                    RaisePropertyChanged("FaultReason");
                }
            }
        }

        [DataMember]
        public ResponseStatusCode StatusCode
        {
            get { return StatusCodeField; }
            set
            {
                if ((StatusCodeField.Equals(value) != true))
                {
                    StatusCodeField = value;
                    RaisePropertyChanged("StatusCode");
                }
            }
        }

        [DataMember]
        public string TraceId
        {
            get { return TraceIdField; }
            set
            {
                if ((ReferenceEquals(TraceIdField, value) != true))
                {
                    TraceIdField = value;
                    RaisePropertyChanged("TraceId");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "MapUriResponse", Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    public class MapUriResponse : ResponseBase
    {
        private string UriField;

        [DataMember]
        public string Uri
        {
            get { return UriField; }
            set
            {
                if ((ReferenceEquals(UriField, value) != true))
                {
                    UriField = value;
                    RaisePropertyChanged("Uri");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ImageryMetadataResponse", Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    public class ImageryMetadataResponse : ResponseBase
    {
        private List<ImageryMetadataResult> ResultsField;

        [DataMember]
        public List<ImageryMetadataResult> Results
        {
            get { return ResultsField; }
            set
            {
                if ((ReferenceEquals(ResultsField, value) != true))
                {
                    ResultsField = value;
                    RaisePropertyChanged("Results");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ImageryMetadataResult", Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    [KnownType(typeof (ImageryMetadataBirdseyeResult))]
    public class ImageryMetadataResult : object, INotifyPropertyChanged
    {
        private List<ImageryProvider> ImageryProvidersField;
        private SizeOfint ImageSizeField;

        private string ImageUriField;

        private List<string> ImageUriSubdomainsField;

        private RangeOfdateTime VintageField;

        private RangeOfint ZoomRangeField;

        [DataMember]
        public SizeOfint ImageSize
        {
            get { return ImageSizeField; }
            set
            {
                if ((ReferenceEquals(ImageSizeField, value) != true))
                {
                    ImageSizeField = value;
                    RaisePropertyChanged("ImageSize");
                }
            }
        }

        [DataMember]
        public string ImageUri
        {
            get { return ImageUriField; }
            set
            {
                if ((ReferenceEquals(ImageUriField, value) != true))
                {
                    ImageUriField = value;
                    RaisePropertyChanged("ImageUri");
                }
            }
        }

        [DataMember]
        public List<string> ImageUriSubdomains
        {
            get { return ImageUriSubdomainsField; }
            set
            {
                if ((ReferenceEquals(ImageUriSubdomainsField, value) != true))
                {
                    ImageUriSubdomainsField = value;
                    RaisePropertyChanged("ImageUriSubdomains");
                }
            }
        }

        [DataMember]
        public List<ImageryProvider> ImageryProviders
        {
            get { return ImageryProvidersField; }
            set
            {
                if ((ReferenceEquals(ImageryProvidersField, value) != true))
                {
                    ImageryProvidersField = value;
                    RaisePropertyChanged("ImageryProviders");
                }
            }
        }

        [DataMember]
        public RangeOfdateTime Vintage
        {
            get { return VintageField; }
            set
            {
                if ((ReferenceEquals(VintageField, value) != true))
                {
                    VintageField = value;
                    RaisePropertyChanged("Vintage");
                }
            }
        }

        [DataMember]
        public RangeOfint ZoomRange
        {
            get { return ZoomRangeField; }
            set
            {
                if ((ReferenceEquals(ZoomRangeField, value) != true))
                {
                    ZoomRangeField = value;
                    RaisePropertyChanged("ZoomRange");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "AuthenticationResultCode", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum AuthenticationResultCode
    {
        [EnumMember] None = 0,

        [EnumMember] NoCredentials = 1,

        [EnumMember] ValidCredentials = 2,

        [EnumMember] InvalidCredentials = 3,

        [EnumMember] CredentialsExpired = 4,

        [EnumMember] NotAuthorized = 7,
    }

    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ResponseStatusCode", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public enum ResponseStatusCode
    {
        [EnumMember] Success = 0,

        [EnumMember] BadRequest = 1,

        [EnumMember] ServerError = 2,
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RangeOfdateTime", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class RangeOfdateTime : object, INotifyPropertyChanged
    {
        private DateTime FromField;

        private DateTime ToField;

        [DataMember]
        public DateTime From
        {
            get { return FromField; }
            set
            {
                if ((FromField.Equals(value) != true))
                {
                    FromField = value;
                    RaisePropertyChanged("From");
                }
            }
        }

        [DataMember]
        public DateTime To
        {
            get { return ToField; }
            set
            {
                if ((ToField.Equals(value) != true))
                {
                    ToField = value;
                    RaisePropertyChanged("To");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "RangeOfint", Namespace = "http://dev.virtualearth.net/webservices/v1/common")]
    public class RangeOfint : object, INotifyPropertyChanged
    {
        private int FromField;

        private int ToField;

        [DataMember]
        public int From
        {
            get { return FromField; }
            set
            {
                if ((FromField.Equals(value) != true))
                {
                    FromField = value;
                    RaisePropertyChanged("From");
                }
            }
        }

        [DataMember]
        public int To
        {
            get { return ToField; }
            set
            {
                if ((ToField.Equals(value) != true))
                {
                    ToField = value;
                    RaisePropertyChanged("To");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ImageryMetadataBirdseyeResult",
        Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    public class ImageryMetadataBirdseyeResult : ImageryMetadataResult
    {
        private Heading HeadingField;

        private int TilesXField;

        private int TilesYField;

        [DataMember]
        public Heading Heading
        {
            get { return HeadingField; }
            set
            {
                if ((ReferenceEquals(HeadingField, value) != true))
                {
                    HeadingField = value;
                    RaisePropertyChanged("Heading");
                }
            }
        }

        [DataMember]
        public int TilesX
        {
            get { return TilesXField; }
            set
            {
                if ((TilesXField.Equals(value) != true))
                {
                    TilesXField = value;
                    RaisePropertyChanged("TilesX");
                }
            }
        }

        [DataMember]
        public int TilesY
        {
            get { return TilesYField; }
            set
            {
                if ((TilesYField.Equals(value) != true))
                {
                    TilesYField = value;
                    RaisePropertyChanged("TilesY");
                }
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "ImageryProvider", Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    public class ImageryProvider : object, INotifyPropertyChanged
    {
        private string AttributionField;

        private List<CoverageArea> CoverageAreasField;

        [DataMember]
        public string Attribution
        {
            get { return AttributionField; }
            set
            {
                if ((ReferenceEquals(AttributionField, value) != true))
                {
                    AttributionField = value;
                    RaisePropertyChanged("Attribution");
                }
            }
        }

        [DataMember]
        public List<CoverageArea> CoverageAreas
        {
            get { return CoverageAreasField; }
            set
            {
                if ((ReferenceEquals(CoverageAreasField, value) != true))
                {
                    CoverageAreasField = value;
                    RaisePropertyChanged("CoverageAreas");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.Runtime.Serialization", "3.0.0.0")]
    [DataContract(Name = "CoverageArea", Namespace = "http://dev.virtualearth.net/webservices/v1/imagery")]
    public class CoverageArea : object, INotifyPropertyChanged
    {
        private Rectangle BoundingRectangleField;

        private RangeOfint ZoomRangeField;

        [DataMember]
        public Rectangle BoundingRectangle
        {
            get { return BoundingRectangleField; }
            set
            {
                if ((ReferenceEquals(BoundingRectangleField, value) != true))
                {
                    BoundingRectangleField = value;
                    RaisePropertyChanged("BoundingRectangle");
                }
            }
        }

        [DataMember]
        public RangeOfint ZoomRange
        {
            get { return ZoomRangeField; }
            set
            {
                if ((ReferenceEquals(ZoomRangeField, value) != true))
                {
                    ZoomRangeField = value;
                    RaisePropertyChanged("ZoomRange");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        protected void RaisePropertyChanged(string propertyName)
        {
            PropertyChangedEventHandler propertyChanged = PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    [ServiceContract(Namespace = "http://dev.virtualearth.net/webservices/v1/imagery/contracts",
        ConfigurationName = "VEImageryService.IImageryService")]
    public interface IImageryService
    {
        [OperationContract(AsyncPattern = true,
            Action = "http://dev.virtualearth.net/webservices/v1/imagery/contracts/IImageryService/GetI" +
                     "mageryMetadata",
            ReplyAction = "http://dev.virtualearth.net/webservices/v1/imagery/contracts/IImageryService/GetI" +
                          "mageryMetadataResponse")]
        IAsyncResult BeginGetImageryMetadata(ImageryMetadataRequest request, AsyncCallback callback, object asyncState);

        ImageryMetadataResponse EndGetImageryMetadata(IAsyncResult result);

        [OperationContract(AsyncPattern = true,
            Action = "http://dev.virtualearth.net/webservices/v1/imagery/contracts/IImageryService/GetM" +
                     "apUri",
            ReplyAction = "http://dev.virtualearth.net/webservices/v1/imagery/contracts/IImageryService/GetM" +
                          "apUriResponse")]
        IAsyncResult BeginGetMapUri(MapUriRequest request, AsyncCallback callback, object asyncState);

        MapUriResponse EndGetMapUri(IAsyncResult result);
    }

    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public interface IImageryServiceChannel : IImageryService, IClientChannel
    {
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class GetImageryMetadataCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public GetImageryMetadataCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                    object userState) :
                                                        base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public ImageryMetadataResponse Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((ImageryMetadataResponse) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class GetMapUriCompletedEventArgs : AsyncCompletedEventArgs
    {
        private readonly object[] results;

        public GetMapUriCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public MapUriResponse Result
        {
            get
            {
                RaiseExceptionIfNecessary();
                return ((MapUriResponse) (results[0]));
            }
        }
    }

    [DebuggerStepThrough]
    [GeneratedCode("System.ServiceModel", "3.0.0.0")]
    public class ImageryServiceClient : ClientBase<IImageryService>, IImageryService
    {
        private BeginOperationDelegate onBeginCloseDelegate;
        private BeginOperationDelegate onBeginGetImageryMetadataDelegate;

        private BeginOperationDelegate onBeginGetMapUriDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;
        private SendOrPostCallback onCloseCompletedDelegate;
        private EndOperationDelegate onEndCloseDelegate;
        private EndOperationDelegate onEndGetImageryMetadataDelegate;
        private EndOperationDelegate onEndGetMapUriDelegate;

        private EndOperationDelegate onEndOpenDelegate;
        private SendOrPostCallback onGetImageryMetadataCompletedDelegate;
        private SendOrPostCallback onGetMapUriCompletedDelegate;

        private SendOrPostCallback onOpenCompletedDelegate;

        public ImageryServiceClient()
        {
        }

        public ImageryServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public ImageryServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public ImageryServiceClient(string endpointConfigurationName, EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public ImageryServiceClient(Binding binding, EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        #region IImageryService Members

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult IImageryService.BeginGetImageryMetadata(ImageryMetadataRequest request, AsyncCallback callback,
                                                             object asyncState)
        {
            return Channel.BeginGetImageryMetadata(request, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        ImageryMetadataResponse IImageryService.EndGetImageryMetadata(IAsyncResult result)
        {
            return Channel.EndGetImageryMetadata(result);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        IAsyncResult IImageryService.BeginGetMapUri(MapUriRequest request, AsyncCallback callback, object asyncState)
        {
            return Channel.BeginGetMapUri(request, callback, asyncState);
        }

        [EditorBrowsable(EditorBrowsableState.Advanced)]
        MapUriResponse IImageryService.EndGetMapUri(IAsyncResult result)
        {
            return Channel.EndGetMapUri(result);
        }

        #endregion

        public event EventHandler<GetImageryMetadataCompletedEventArgs> GetImageryMetadataCompleted;

        public event EventHandler<GetMapUriCompletedEventArgs> GetMapUriCompleted;

        public event EventHandler<AsyncCompletedEventArgs> OpenCompleted;

        public event EventHandler<AsyncCompletedEventArgs> CloseCompleted;

        private IAsyncResult OnBeginGetImageryMetadata(object[] inValues, AsyncCallback callback, object asyncState)
        {
            var request = ((ImageryMetadataRequest) (inValues[0]));
            return ((IImageryService) (this)).BeginGetImageryMetadata(request, callback, asyncState);
        }

        private object[] OnEndGetImageryMetadata(IAsyncResult result)
        {
            ImageryMetadataResponse retVal = ((IImageryService) (this)).EndGetImageryMetadata(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnGetImageryMetadataCompleted(object state)
        {
            if ((GetImageryMetadataCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                GetImageryMetadataCompleted(this,
                                            new GetImageryMetadataCompletedEventArgs(e.Results, e.Error, e.Cancelled,
                                                                                     e.UserState));
            }
        }

        public void GetImageryMetadataAsync(ImageryMetadataRequest request)
        {
            GetImageryMetadataAsync(request, null);
        }

        public void GetImageryMetadataAsync(ImageryMetadataRequest request, object userState)
        {
            if ((onBeginGetImageryMetadataDelegate == null))
            {
                onBeginGetImageryMetadataDelegate = OnBeginGetImageryMetadata;
            }
            if ((onEndGetImageryMetadataDelegate == null))
            {
                onEndGetImageryMetadataDelegate = OnEndGetImageryMetadata;
            }
            if ((onGetImageryMetadataCompletedDelegate == null))
            {
                onGetImageryMetadataCompletedDelegate = OnGetImageryMetadataCompleted;
            }
            InvokeAsync(onBeginGetImageryMetadataDelegate, new object[]
                                                                    {
                                                                        request
                                                                    }, onEndGetImageryMetadataDelegate,
                             onGetImageryMetadataCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginGetMapUri(object[] inValues, AsyncCallback callback, object asyncState)
        {
            var request = ((MapUriRequest) (inValues[0]));
            return ((IImageryService) (this)).BeginGetMapUri(request, callback, asyncState);
        }

        private object[] OnEndGetMapUri(IAsyncResult result)
        {
            MapUriResponse retVal = ((IImageryService) (this)).EndGetMapUri(result);
            return new object[]
                       {
                           retVal
                       };
        }

        private void OnGetMapUriCompleted(object state)
        {
            if ((GetMapUriCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                GetMapUriCompleted(this, new GetMapUriCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void GetMapUriAsync(MapUriRequest request)
        {
            GetMapUriAsync(request, null);
        }

        public void GetMapUriAsync(MapUriRequest request, object userState)
        {
            if ((onBeginGetMapUriDelegate == null))
            {
                onBeginGetMapUriDelegate = OnBeginGetMapUri;
            }
            if ((onEndGetMapUriDelegate == null))
            {
                onEndGetMapUriDelegate = OnEndGetMapUri;
            }
            if ((onGetMapUriCompletedDelegate == null))
            {
                onGetMapUriCompletedDelegate = OnGetMapUriCompleted;
            }
            InvokeAsync(onBeginGetMapUriDelegate, new object[]
                                                           {
                                                               request
                                                           }, onEndGetMapUriDelegate, onGetMapUriCompletedDelegate,
                             userState);
        }

        private IAsyncResult OnBeginOpen(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((OpenCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                OpenCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((onBeginOpenDelegate == null))
            {
                onBeginOpenDelegate = OnBeginOpen;
            }
            if ((onEndOpenDelegate == null))
            {
                onEndOpenDelegate = OnEndOpen;
            }
            if ((onOpenCompletedDelegate == null))
            {
                onOpenCompletedDelegate = OnOpenCompleted;
            }
            InvokeAsync(onBeginOpenDelegate, null, onEndOpenDelegate, onOpenCompletedDelegate, userState);
        }

        private IAsyncResult OnBeginClose(object[] inValues, AsyncCallback callback, object asyncState)
        {
            return ((ICommunicationObject) (this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(IAsyncResult result)
        {
            ((ICommunicationObject) (this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((CloseCompleted != null))
            {
                var e = ((InvokeAsyncCompletedEventArgs) (state));
                CloseCompleted(this, new AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((onBeginCloseDelegate == null))
            {
                onBeginCloseDelegate = OnBeginClose;
            }
            if ((onEndCloseDelegate == null))
            {
                onEndCloseDelegate = OnEndClose;
            }
            if ((onCloseCompletedDelegate == null))
            {
                onCloseCompletedDelegate = OnCloseCompleted;
            }
            InvokeAsync(onBeginCloseDelegate, null, onEndCloseDelegate, onCloseCompletedDelegate, userState);
        }

        protected override IImageryService CreateChannel()
        {
            return new ImageryServiceClientChannel(this);
        }

        #region Nested type: ImageryServiceClientChannel

        private class ImageryServiceClientChannel : ChannelBase<IImageryService>, IImageryService
        {
            public ImageryServiceClientChannel(ClientBase<IImageryService> client) :
                base(client)
            {
            }

            #region IImageryService Members

            public IAsyncResult BeginGetImageryMetadata(ImageryMetadataRequest request, AsyncCallback callback,
                                                        object asyncState)
            {
                var _args = new object[1];
                _args[0] = request;
                IAsyncResult _result = BeginInvoke("GetImageryMetadata", _args, callback, asyncState);
                return _result;
            }

            public ImageryMetadataResponse EndGetImageryMetadata(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((ImageryMetadataResponse) (EndInvoke("GetImageryMetadata", _args, result)));
                return _result;
            }

            public IAsyncResult BeginGetMapUri(MapUriRequest request, AsyncCallback callback, object asyncState)
            {
                var _args = new object[1];
                _args[0] = request;
                IAsyncResult _result = BeginInvoke("GetMapUri", _args, callback, asyncState);
                return _result;
            }

            public MapUriResponse EndGetMapUri(IAsyncResult result)
            {
                var _args = new object[0];
                var _result = ((MapUriResponse) (EndInvoke("GetMapUri", _args, result)));
                return _result;
            }

            #endregion
        }

        #endregion
    }
}