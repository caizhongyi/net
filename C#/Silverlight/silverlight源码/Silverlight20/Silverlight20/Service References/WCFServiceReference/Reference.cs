//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace Silverlight20.WCFServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://webabcd.cnblogs.com/")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private System.DateTime DayOfBirthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public System.DateTime DayOfBirth {
            get {
                return this.DayOfBirthField;
            }
            set {
                if ((this.DayOfBirthField.Equals(value) != true)) {
                    this.DayOfBirthField = value;
                    this.RaisePropertyChanged("DayOfBirth");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFServiceReference.WCFService")]
    public interface WCFService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/WCFService/GetUser", ReplyAction="http://tempuri.org/WCFService/GetUserResponse")]
        System.IAsyncResult BeginGetUser(string name, System.AsyncCallback callback, object asyncState);
        
        Silverlight20.WCFServiceReference.User EndGetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/WCFService/GetUserByCryptography", ReplyAction="http://tempuri.org/WCFService/GetUserByCryptographyResponse")]
        System.IAsyncResult BeginGetUserByCryptography(string name, System.AsyncCallback callback, object asyncState);
        
        Silverlight20.WCFServiceReference.User EndGetUserByCryptography(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface WCFServiceChannel : Silverlight20.WCFServiceReference.WCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Silverlight20.WCFServiceReference.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Silverlight20.WCFServiceReference.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserByCryptographyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserByCryptographyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Silverlight20.WCFServiceReference.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Silverlight20.WCFServiceReference.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class WCFServiceClient : System.ServiceModel.ClientBase<Silverlight20.WCFServiceReference.WCFService>, Silverlight20.WCFServiceReference.WCFService {
        
        private BeginOperationDelegate onBeginGetUserDelegate;
        
        private EndOperationDelegate onEndGetUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserByCryptographyDelegate;
        
        private EndOperationDelegate onEndGetUserByCryptographyDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserByCryptographyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WCFServiceClient() {
        }
        
        public WCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetUserCompletedEventArgs> GetUserCompleted;
        
        public event System.EventHandler<GetUserByCryptographyCompletedEventArgs> GetUserByCryptographyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight20.WCFServiceReference.WCFService.BeginGetUser(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUser(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Silverlight20.WCFServiceReference.User Silverlight20.WCFServiceReference.WCFService.EndGetUser(System.IAsyncResult result) {
            return base.Channel.EndGetUser(result);
        }
        
        private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return ((Silverlight20.WCFServiceReference.WCFService)(this)).BeginGetUser(name, callback, asyncState);
        }
        
        private object[] OnEndGetUser(System.IAsyncResult result) {
            Silverlight20.WCFServiceReference.User retVal = ((Silverlight20.WCFServiceReference.WCFService)(this)).EndGetUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserCompleted(object state) {
            if ((this.GetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAsync(string name) {
            this.GetUserAsync(name, null);
        }
        
        public void GetUserAsync(string name, object userState) {
            if ((this.onBeginGetUserDelegate == null)) {
                this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
            }
            if ((this.onEndGetUserDelegate == null)) {
                this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
            }
            if ((this.onGetUserCompletedDelegate == null)) {
                this.onGetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {
                        name}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight20.WCFServiceReference.WCFService.BeginGetUserByCryptography(string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserByCryptography(name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Silverlight20.WCFServiceReference.User Silverlight20.WCFServiceReference.WCFService.EndGetUserByCryptography(System.IAsyncResult result) {
            return base.Channel.EndGetUserByCryptography(result);
        }
        
        private System.IAsyncResult OnBeginGetUserByCryptography(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            return ((Silverlight20.WCFServiceReference.WCFService)(this)).BeginGetUserByCryptography(name, callback, asyncState);
        }
        
        private object[] OnEndGetUserByCryptography(System.IAsyncResult result) {
            Silverlight20.WCFServiceReference.User retVal = ((Silverlight20.WCFServiceReference.WCFService)(this)).EndGetUserByCryptography(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserByCryptographyCompleted(object state) {
            if ((this.GetUserByCryptographyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserByCryptographyCompleted(this, new GetUserByCryptographyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserByCryptographyAsync(string name) {
            this.GetUserByCryptographyAsync(name, null);
        }
        
        public void GetUserByCryptographyAsync(string name, object userState) {
            if ((this.onBeginGetUserByCryptographyDelegate == null)) {
                this.onBeginGetUserByCryptographyDelegate = new BeginOperationDelegate(this.OnBeginGetUserByCryptography);
            }
            if ((this.onEndGetUserByCryptographyDelegate == null)) {
                this.onEndGetUserByCryptographyDelegate = new EndOperationDelegate(this.OnEndGetUserByCryptography);
            }
            if ((this.onGetUserByCryptographyCompletedDelegate == null)) {
                this.onGetUserByCryptographyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserByCryptographyCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserByCryptographyDelegate, new object[] {
                        name}, this.onEndGetUserByCryptographyDelegate, this.onGetUserByCryptographyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Silverlight20.WCFServiceReference.WCFService CreateChannel() {
            return new WCFServiceClientChannel(this);
        }
        
        private class WCFServiceClientChannel : ChannelBase<Silverlight20.WCFServiceReference.WCFService>, Silverlight20.WCFServiceReference.WCFService {
            
            public WCFServiceClientChannel(System.ServiceModel.ClientBase<Silverlight20.WCFServiceReference.WCFService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetUser(string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = name;
                System.IAsyncResult _result = base.BeginInvoke("GetUser", _args, callback, asyncState);
                return _result;
            }
            
            public Silverlight20.WCFServiceReference.User EndGetUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                Silverlight20.WCFServiceReference.User _result = ((Silverlight20.WCFServiceReference.User)(base.EndInvoke("GetUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserByCryptography(string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = name;
                System.IAsyncResult _result = base.BeginInvoke("GetUserByCryptography", _args, callback, asyncState);
                return _result;
            }
            
            public Silverlight20.WCFServiceReference.User EndGetUserByCryptography(System.IAsyncResult result) {
                object[] _args = new object[0];
                Silverlight20.WCFServiceReference.User _result = ((Silverlight20.WCFServiceReference.User)(base.EndInvoke("GetUserByCryptography", _args, result)));
                return _result;
            }
        }
    }
}
