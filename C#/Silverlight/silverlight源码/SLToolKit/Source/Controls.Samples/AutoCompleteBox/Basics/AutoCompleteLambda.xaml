<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->

<UserControl x:Class="Microsoft.Windows.Controls.Samples.AutoCompleteLambda"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:basics="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls"
    xmlns:input="clr-namespace:Microsoft.Windows.Controls;assembly=Microsoft.Windows.Controls.Input"
    xmlns:controls="clr-namespace:Microsoft.Windows.Controls;assembly=Microsoft.Windows.Controls">
    <StackPanel>
        <StackPanel.Resources>

            <!-- DataTemplate for airports -->
            <DataTemplate x:Key="AirportDataTemplate">
                <Grid Width="370">
                    <Grid.Background>
                        <SolidColorBrush Color="#aa000000" />
                    </Grid.Background>
                    <TextBlock Foreground="#22ffffff" Margin="4+0,2+0" FontSize="34" Text="{Binding CodeFaa}" />
                    <StackPanel HorizontalAlignment="Right" Margin="0+8,0+0">
                        <TextBlock HorizontalAlignment="Right" Foreground="White" 
                               Text="{Binding LimitedName}" Padding="2" />
                        <TextBlock HorizontalAlignment="Right" Foreground="White" 
                               FontSize="14" Text="{Binding City}" Padding="2" />
                        <TextBlock HorizontalAlignment="Right" Foreground="White" 
                               FontSize="14" Text="{Binding State}" Padding="2" />
                    </StackPanel>
                </Grid>
            </DataTemplate>
        </StackPanel.Resources>

        <!-- Custom lambda and template -->
        <ContentControl Content="ItemFilter with a lambda &amp; a custom DataTemplate" Style="{StaticResource Header}" />
        
        <StackPanel>
            <TextBlock Style="{StaticResource Information}">
                Search for and select your airports. Once you have made your 
                selections, click to search for tickets using Live Farecast.
            </TextBlock>
            
            <Grid Margin="0+0,16+16">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="180" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                
                <TextBlock Padding="5">Departure:</TextBlock>
                
                <StackPanel Grid.Column="1">
                    <controls:AutoCompleteBox 
                        x:Name="DepartureAirport" 
                        MinimumPrefixLength="1" 
                        SearchMode="Custom" 
                        Width="400" 
                        IsTextCompletionEnabled="False"
                        HorizontalAlignment="Left" 
                        ItemTemplate="{StaticResource AirportDataTemplate}" 
                        />
                    <basics:DatePicker 
                        x:Name="DepartureDate" 
                        HorizontalAlignment="Left"
                        Width="125" />
                </StackPanel>
            </Grid>

            <Grid Margin="0+0,16+16">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="180" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <TextBlock Padding="5">Arrival:</TextBlock>

                <StackPanel Grid.Column="1">
                    <controls:AutoCompleteBox 
                        x:Name="ArrivalAirport" 
                        MinimumPrefixLength="1" 
                        SearchMode="Custom" 
                        IsTextCompletionEnabled="False"
                        Width="400" 
                        HorizontalAlignment="Left" 
                        ItemTemplate="{StaticResource AirportDataTemplate}" 
                        />
                    <basics:DatePicker 
                        x:Name="ArrivalDate" 
                        HorizontalAlignment="Left"
                        Width="125" />
                </StackPanel>
            </Grid>

            <Grid Margin="0+0,16+16">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="180" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <TextBlock Padding="5">Passengers:</TextBlock>

                <input:NumericUpDown 
                    Minimum="1"
                    Maximum="10"
                    x:Name="Passengers"
                    HorizontalAlignment="Left"
                    Grid.Column="1" />
            </Grid>

            <Grid Margin="0+0,16+16">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="180" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <TextBlock Padding="5">Book flight:</TextBlock>

                <Button x:Name="BookFlight" 
                        IsEnabled="False"
                        Grid.Column="1"
                        Padding="6"
                        HorizontalContentAlignment="Left"
                        HorizontalAlignment="Left"
                        Content="Search Live Farecast..."
                        />
            </Grid>

            <ContentControl Content="Customizing the filter algorithm" Style="{StaticResource Header}" />
            <TextBlock Style="{StaticResource Information}">
            The above sample uses a custom ItemFilter lambda to match several 
            airport properties against the search string, allowing a user to type an 
            airport code, city name, or airport name into the field.

            <LineBreak /><LineBreak />

            Each filter method takes two parameters: the search string (the 
            value of the text box), a second item parameter, and then returns 
            either true or false. A true return value means that the item 
            should appear in the list of suggestions offered by the 
            AutoCompleteBox control.

            <LineBreak /><LineBreak />

            As a developer, you can take the search string and tokenize it, 
            parse it for an expression or words, or find a new creative way 
            of searching through your data and surfacing it through the control.
            </TextBlock>


        </StackPanel>

        <src:SourceViewer xmlns:src="clr-namespace:Microsoft.Windows.Controls.Samples;assembly=Microsoft.Windows.Controls.Samples.Common" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <src:SourceFile Path="AutoCompleteLambda.xaml">
    <src:SourceFile.Source>
      <sys:String>&lt;!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
--&gt;

&lt;UserControl x:Class="Microsoft.Windows.Controls.Samples.AutoCompleteLambda"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:basics="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls"
    xmlns:input="clr-namespace:Microsoft.Windows.Controls;assembly=Microsoft.Windows.Controls.Input"
    xmlns:controls="clr-namespace:Microsoft.Windows.Controls;assembly=Microsoft.Windows.Controls"&gt;
    &lt;StackPanel&gt;
        &lt;StackPanel.Resources&gt;

            &lt;!-- DataTemplate for airports --&gt;
            &lt;DataTemplate x:Key="AirportDataTemplate"&gt;
                &lt;Grid Width="370"&gt;
                    &lt;Grid.Background&gt;
                        &lt;SolidColorBrush Color="#aa000000" /&gt;
                    &lt;/Grid.Background&gt;
                    &lt;TextBlock Foreground="#22ffffff" Margin="4+0,2+0" FontSize="34" Text="{Binding CodeFaa}" /&gt;
                    &lt;StackPanel HorizontalAlignment="Right" Margin="0+8,0+0"&gt;
                        &lt;TextBlock HorizontalAlignment="Right" Foreground="White" 
                               Text="{Binding LimitedName}" Padding="2" /&gt;
                        &lt;TextBlock HorizontalAlignment="Right" Foreground="White" 
                               FontSize="14" Text="{Binding City}" Padding="2" /&gt;
                        &lt;TextBlock HorizontalAlignment="Right" Foreground="White" 
                               FontSize="14" Text="{Binding State}" Padding="2" /&gt;
                    &lt;/StackPanel&gt;
                &lt;/Grid&gt;
            &lt;/DataTemplate&gt;
        &lt;/StackPanel.Resources&gt;

        &lt;!-- Custom lambda and template --&gt;
        &lt;ContentControl Content="ItemFilter with a lambda &amp;amp; a custom DataTemplate" Style="{StaticResource Header}" /&gt;
        
        &lt;StackPanel&gt;
            &lt;TextBlock Style="{StaticResource Information}"&gt;
                Search for and select your airports. Once you have made your 
                selections, click to search for tickets using Live Farecast.
            &lt;/TextBlock&gt;
            
            &lt;Grid Margin="0+0,16+16"&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="180" /&gt;
                    &lt;ColumnDefinition Width="*" /&gt;
                &lt;/Grid.ColumnDefinitions&gt;
                
                &lt;TextBlock Padding="5"&gt;Departure:&lt;/TextBlock&gt;
                
                &lt;StackPanel Grid.Column="1"&gt;
                    &lt;controls:AutoCompleteBox 
                        x:Name="DepartureAirport" 
                        MinimumPrefixLength="1" 
                        SearchMode="Custom" 
                        Width="400" 
                        IsTextCompletionEnabled="False"
                        HorizontalAlignment="Left" 
                        ItemTemplate="{StaticResource AirportDataTemplate}" 
                        /&gt;
                    &lt;basics:DatePicker 
                        x:Name="DepartureDate" 
                        HorizontalAlignment="Left"
                        Width="125" /&gt;
                &lt;/StackPanel&gt;
            &lt;/Grid&gt;

            &lt;Grid Margin="0+0,16+16"&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="180" /&gt;
                    &lt;ColumnDefinition Width="*" /&gt;
                &lt;/Grid.ColumnDefinitions&gt;

                &lt;TextBlock Padding="5"&gt;Arrival:&lt;/TextBlock&gt;

                &lt;StackPanel Grid.Column="1"&gt;
                    &lt;controls:AutoCompleteBox 
                        x:Name="ArrivalAirport" 
                        MinimumPrefixLength="1" 
                        SearchMode="Custom" 
                        IsTextCompletionEnabled="False"
                        Width="400" 
                        HorizontalAlignment="Left" 
                        ItemTemplate="{StaticResource AirportDataTemplate}" 
                        /&gt;
                    &lt;basics:DatePicker 
                        x:Name="ArrivalDate" 
                        HorizontalAlignment="Left"
                        Width="125" /&gt;
                &lt;/StackPanel&gt;
            &lt;/Grid&gt;

            &lt;Grid Margin="0+0,16+16"&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="180" /&gt;
                    &lt;ColumnDefinition Width="*" /&gt;
                &lt;/Grid.ColumnDefinitions&gt;

                &lt;TextBlock Padding="5"&gt;Passengers:&lt;/TextBlock&gt;

                &lt;input:NumericUpDown 
                    Minimum="1"
                    Maximum="10"
                    x:Name="Passengers"
                    HorizontalAlignment="Left"
                    Grid.Column="1" /&gt;
            &lt;/Grid&gt;

            &lt;Grid Margin="0+0,16+16"&gt;
                &lt;Grid.ColumnDefinitions&gt;
                    &lt;ColumnDefinition Width="180" /&gt;
                    &lt;ColumnDefinition Width="*" /&gt;
                &lt;/Grid.ColumnDefinitions&gt;

                &lt;TextBlock Padding="5"&gt;Book flight:&lt;/TextBlock&gt;

                &lt;Button x:Name="BookFlight" 
                        IsEnabled="False"
                        Grid.Column="1"
                        Padding="6"
                        HorizontalContentAlignment="Left"
                        HorizontalAlignment="Left"
                        Content="Search Live Farecast..."
                        /&gt;
            &lt;/Grid&gt;

            &lt;ContentControl Content="Customizing the filter algorithm" Style="{StaticResource Header}" /&gt;
            &lt;TextBlock Style="{StaticResource Information}"&gt;
            The above sample uses a custom ItemFilter lambda to match several 
            airport properties against the search string, allowing a user to type an 
            airport code, city name, or airport name into the field.

            &lt;LineBreak /&gt;&lt;LineBreak /&gt;

            Each filter method takes two parameters: the search string (the 
            value of the text box), a second item parameter, and then returns 
            either true or false. A true return value means that the item 
            should appear in the list of suggestions offered by the 
            AutoCompleteBox control.

            &lt;LineBreak /&gt;&lt;LineBreak /&gt;

            As a developer, you can take the search string and tokenize it, 
            parse it for an expression or words, or find a new creative way 
            of searching through your data and surfacing it through the control.
            &lt;/TextBlock&gt;


        &lt;/StackPanel&gt;

    &lt;/StackPanel&gt;
&lt;/UserControl&gt;
</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="AutoCompleteLambda.xaml.cs">
    <src:SourceFile.Source>
      <sys:String>// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System;
using System.Globalization;
using System.Windows;
using System.Windows.Browser;
using System.Windows.Controls;

namespace Microsoft.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// The AutoCompleteLambda sample page demonstrates using a custom data 
    /// template, binding to elements in a rich CLR type, and using a lambda 
    /// expression to provide custom search filtering capabilities to the 
    /// AutoCompleteBox control.
    /// &lt;/summary&gt;
    [Sample("AutoCompleteBox/Basics/(1)ItemFilter lambda")]
    public partial class AutoCompleteLambda : UserControl
    {
        /// &lt;summary&gt;
        /// Initializes a new instance of the AutoCompleteLambda class.
        /// &lt;/summary&gt;
        public AutoCompleteLambda()
        {
            InitializeComponent();
            Loaded += new RoutedEventHandler(Airports_Loaded);
        }

        /// &lt;summary&gt;
        /// Handle the Loaded event of the page.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;The source object.&lt;/param&gt;
        /// &lt;param name="e"&gt;The event arguments.&lt;/param&gt;
        private void Airports_Loaded(object sender, RoutedEventArgs e)
        {
            // Provide airport data and a custom filter
            ObjectCollection airports = Airport.SampleAirports;
            DepartureAirport.ItemsSource = airports;
            ArrivalAirport.ItemsSource = airports;
            DepartureAirport.ItemFilter = (search, item) =&gt;
            {
                Airport airport = item as Airport;
                if (airport != null)
                {
                    // Interested in: Name, City, FAA code
                    string filter = search.ToUpper(CultureInfo.InvariantCulture);
                    return (airport.CodeFaa.ToUpper(CultureInfo.InvariantCulture).Contains(filter)
                        || airport.City.ToUpper(CultureInfo.InvariantCulture).Contains(filter)
                        || airport.Name.ToUpper(CultureInfo.InvariantCulture).Contains(filter));
                }

                return false;
            };
            ArrivalAirport.ItemFilter = DepartureAirport.ItemFilter;

            // Look for changes
            DepartureAirport.SelectedItemChanged += SelectedItemsChanged;
            ArrivalAirport.SelectedItemChanged += SelectedItemsChanged;
            DepartureDate.SelectedDateChanged += SelectedItemsChanged;
            ArrivalDate.SelectedDateChanged += SelectedItemsChanged;

            // Set the date defaults in code
            DepartureDate.SelectedDate = DateTime.UtcNow + TimeSpan.FromDays(7);
            ArrivalDate.SelectedDate = DateTime.UtcNow + TimeSpan.FromDays(14);

            // Navigate to Farecast
            BookFlight.Click += BookFlight_Click;
        }

        /// &lt;summary&gt;
        /// The button to book the flight has been clicked.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;The source object.&lt;/param&gt;
        /// &lt;param name="e"&gt;The event data.&lt;/param&gt;
        private void BookFlight_Click(object sender, RoutedEventArgs e)
        {
            Airport d = (Airport)DepartureAirport.SelectedItem;
            Airport a = (Airport)ArrivalAirport.SelectedItem;
            DateTime dd = (DateTime)DepartureDate.SelectedDate;
            DateTime ad = (DateTime)ArrivalDate.SelectedDate;
            int p = (int)Passengers.Value;

            Uri farecast = WebServiceHelper.CreateAirfareSearchUri(d, a, dd, ad, p);
            HtmlPage.Window.Navigate(farecast, "_new");
        }

        /// &lt;summary&gt;
        /// Update the form when valid values are present in the controls.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;The source object.&lt;/param&gt;
        /// &lt;param name="e"&gt;The event data.&lt;/param&gt;
        private void SelectedItemsChanged(object sender, SelectionChangedEventArgs e)
        {
            BookFlight.IsEnabled = DepartureAirport.SelectedItem != null
                &amp;&amp; ArrivalAirport.SelectedItem != null
                &amp;&amp; DepartureDate.SelectedDate != null
                &amp;&amp; ArrivalDate.SelectedDate != null
                &amp;&amp; Passengers.Value &gt; 0;
        }
    }
}
</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="../../../Controls.Samples.Common/BusinessObjects/Airport.cs">
    <src:SourceFile.Source>
      <sys:String>// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Windows.Browser;
using Microsoft.Windows.Controls;

[assembly: SuppressMessage("General", "SWC1001:XmlDocumentationCommentShouldBeSpelledCorrectly", MessageId = "Farecast", Justification = "Farecast is a Microsoft web site.")]

namespace Microsoft.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// An Airport class.
    /// &lt;/summary&gt;
    public class Airport
    {
        /// &lt;summary&gt;
        /// Gets or sets the friendly airport name.
        /// &lt;/summary&gt;
        public string Name { get; set; }

        /// &lt;summary&gt;
        /// Gets a sometimes shorter representation of the Name property.
        /// &lt;/summary&gt;
        public string LimitedName
        {
            get
            {
                if (Name == null || Name.Length &lt; 30)
                {
                    return Name;
                }

                return Name.Substring(0, 30) + "...";
            }
        }

        /// &lt;summary&gt;
        /// Gets or sets the airport city or cities name.
        /// &lt;/summary&gt;
        public string City { get; set; }
        
        /// &lt;summary&gt;
        /// Gets or sets the state, region, or territory name.
        /// &lt;/summary&gt;
        public string State { get; set; }
        
        /// &lt;summary&gt;
        /// Gets or sets the Federal Aviation Administration code.
        /// &lt;/summary&gt;
        public string CodeFaa { get; set; }
        
        /// &lt;summary&gt;
        /// Gets or sets the International Air Transport Association code.
        /// &lt;/summary&gt;
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Iata", Justification = "This is a recognized abbreviation for the code.")]
        public string CodeIata { get; set; }
        
        /// &lt;summary&gt;
        /// Gets or sets the four-digit International Civil Aviation 
        /// Organization code.
        /// &lt;/summary&gt;
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "Icao", Justification = "This is a recognized abbreviation for the code.")]
        public string CodeIcao { get; set; }

        /// &lt;summary&gt;
        /// Initializes a new Airport class instance.
        /// &lt;/summary&gt;
        public Airport()
        {
        }

        /// &lt;summary&gt;
        /// Initializes a new Airport class instance. This is a data-entry 
        /// friendly constructor.
        /// &lt;/summary&gt;
        /// &lt;param name="city"&gt;The city or cities name.&lt;/param&gt;
        /// &lt;param name="state"&gt;The state or region.&lt;/param&gt;
        /// &lt;param name="faa"&gt;The Federal Aviation Administration code.&lt;/param&gt;
        /// &lt;param name="iata"&gt;The International Air Transport Association code.&lt;/param&gt;
        /// &lt;param name="icao"&gt;The four-digit International Civil Aviation
        /// Organization code.&lt;/param&gt;
        /// &lt;param name="airport"&gt;The friendly airport name.&lt;/param&gt;
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "icao", Justification = "This is a recognized abbreviation for the code.")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "iata", Justification = "This is a recognized abbreviation for the code.")]
        public Airport(string city, string state, string faa, string iata, string icao, string airport)
        {
            City = city;
            State = state;
            CodeFaa = faa;
            CodeIata = iata;
            CodeIcao = icao;
            Name = airport;
        }

        /// &lt;summary&gt;
        /// The code and name together.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;Returns a string.&lt;/returns&gt;
        public override string ToString()
        {
            return Name;
        }

        /// &lt;summary&gt;
        /// Gets a collection of sample airports.
        /// &lt;/summary&gt;
        public static ObjectCollection SampleAirports
        {
            get
            {
                ObjectCollection airports = new ObjectCollection();
                airports.Add(new Airport("Phoenix", "Arizona", "PHX", "PHX", "KPHX", "Phoenix Sky Harbor International Airport"));
                airports.Add(new Airport("Los Angeles", "California", "LAX", "LAX", "KLAX", "Los Angeles International Airport"));
                airports.Add(new Airport("San Diego", "California", "SAN", "SAN", "KSAN", "San Diego International Airport"));
                airports.Add(new Airport("San Francisco", "California", "SFO", "SFO", "KSFO", "San Francisco International Airport"));
                airports.Add(new Airport("Denver", "Colorado", "DEN", "DEN", "KDEN", "Denver International Airport"));
                airports.Add(new Airport("Fort Lauderdale", "Florida", "FLL", "FLL", "KFLL", "Fort Lauderdale-Hollywood International Airport"));
                airports.Add(new Airport("Miami", "Florida", "MIA", "MIA", "KMIA", "Miami International Airport"));
                airports.Add(new Airport("Orlando", "Florida", "MCO", "MCO", "KMCO", "Orlando International Airport"));
                airports.Add(new Airport("Tampa", "Florida", "TPA", "TPA", "KTPA", "Tampa International Airport"));
                airports.Add(new Airport("Atlanta", "Georgia", "ATL", "ATL", "KATL", "Hartsfield-Jackson Atlanta International Airport"));
                airports.Add(new Airport("Honolulu", "Hawaii", "HNL", "HNL", "PHNL", "Honolulu International Airport / Hickam AFB"));
                airports.Add(new Airport("Boise", "Idaho", "BOI", "BOI", "KBOI", "Boise Air Terminal (Gowen Field)"));
                airports.Add(new Airport("Chicago", "Illinois", "ORD", "ORD", "KORD", "Chicago O'Hare International Airport"));
                airports.Add(new Airport("Chicago", "Illinois", "MDW", "MDW", "KMDW", "Chicago Midway International Airport"));
                airports.Add(new Airport("Indianapolis", "Indiana", "IND", "IND", "KIND", "Indianapolis International Airport"));
                airports.Add(new Airport("Covington", "Kentucky", "CVG", "CVG", "KCVG", "Cincinnati/Northern Kentucky International Airport"));
                airports.Add(new Airport("Louisville", "Kentucky", "SDF", "SDF", "KSDF", "Louisville International Airport (Standiford Field)"));
                airports.Add(new Airport("New Orleans", "Louisiana", "MSY", "MSY", "KMSY", "Louis Armstrong New Orleans International Airport"));
                airports.Add(new Airport("Baltimore / Glen Burnie", "Maryland", "BWI", "BWI", "KBWI", "Baltimore-Washington International Thurgood Marshall Airport"));
                airports.Add(new Airport("Boston", "Massachusetts", "BOS", "BOS", "KBOS", "Gen. Edward Lawrence Logan International Airport"));
                airports.Add(new Airport("Detroit", "Michigan", "DTW", "DTW", "KDTW", "Detroit Metropolitan Wayne County Airport"));
                airports.Add(new Airport("Grand Rapids", "Michigan", "GRR", "GRR", "KGRR", "Gerald R. Ford International Airport"));
                airports.Add(new Airport("Minneapolis", "Minnesota", "MSP", "MSP", "KMSP", "Minneapolis-St. Paul International Airport (Wold-Chamberlain Field)"));
                airports.Add(new Airport("Kansas City", "Missouri", "MCI", "MCI", "KMCI", "Kansas City International Airport"));
                airports.Add(new Airport("St. Louis", "Missouri", "STL", "STL", "KSTL", "Lambert-St. Louis International Airport"));
                airports.Add(new Airport("Omaha", "Nebraska", "OMA", "OMA", "KOMA", "Eppley Airfield"));
                airports.Add(new Airport("Las Vegas", "Nevada", "LAS", "LAS", "KLAS", "McCarran International Airport"));
                airports.Add(new Airport("Reno", "Nevada", "RNO", "RNO", "KRNO", "Reno-Tahoe International Airport"));
                airports.Add(new Airport("Manchester", "New Hampshire", "MHT", "MHT", "KMHT", "Manchester-Boston Regional Airport"));
                airports.Add(new Airport("Newark", "New Jersey", "EWR", "EWR", "KEWR", "Newark Liberty International Airport"));
                airports.Add(new Airport("Albuquerque", "New Mexico", "ABQ", "ABQ", "KABQ", "Albuquerque International Sunport"));
                airports.Add(new Airport("Albany", "New York", "ALB", "ALB", "KALB", "Albany International Airport"));
                airports.Add(new Airport("Buffalo", "New York", "BUF", "BUF", "KBUF", "Buffalo Niagara International Airport"));
                airports.Add(new Airport("Islip", "New York", "ISP", "ISP", "KISP", "Long Island MacArthur Airport"));
                airports.Add(new Airport("New York", "New York", "JFK", "JFK", "KJFK", "John F. Kennedy International Airport"));
                airports.Add(new Airport("New York", "New York", "LGA", "LGA", "KLGA", "LaGuardia Airport"));
                airports.Add(new Airport("Rochester", "New York", "ROC", "ROC", "KROC", "Greater Rochester International Airport"));
                airports.Add(new Airport("Syracuse", "New York", "SYR", "SYR", "KSYR", "Syracuse Hancock International Airport"));
                airports.Add(new Airport("Charlotte", "North Carolina", "CLT", "CLT", "KCLT", "Charlotte/Douglas International Airport"));
                airports.Add(new Airport("Greensboro", "North Carolina", "GSO", "GSO", "KGSO", "Piedmont Triad International Airport"));
                airports.Add(new Airport("Raleigh", "North Carolina", "RDU", "RDU", "KRDU", "Raleigh-Durham International Airport"));
                airports.Add(new Airport("Cleveland", "Ohio", "CLE", "CLE", "KCLE", "Cleveland-Hopkins International Airport"));
                airports.Add(new Airport("Columbus", "Ohio", "CMH", "CMH", "KCMH", "Port Columbus International Airport"));
                airports.Add(new Airport("Dayton", "Ohio", "DAY", "DAY", "KDAY", "James M. Cox Dayton International Airport"));
                airports.Add(new Airport("Oklahoma City", "Oklahoma", "OKC", "OKC", "KOKC", "Will Rogers World Airport"));
                airports.Add(new Airport("Tulsa", "Oklahoma", "TUL", "TUL", "KTUL", "Tulsa International Airport"));
                airports.Add(new Airport("Portland", "Oregon", "PDX", "PDX", "KPDX", "Portland International Airport"));
                airports.Add(new Airport("Philadelphia", "Pennsylvania", "PHL", "PHL", "KPHL", "Philadelphia International Airport"));
                airports.Add(new Airport("Pittsburgh", "Pennsylvania", "PIT", "PIT", "KPIT", "Pittsburgh International Airport"));
                airports.Add(new Airport("Providence", "Rhode Island", "PVD", "PVD", "KPVD", "Theodore Francis Green State Airport"));
                airports.Add(new Airport("Memphis", "Tennessee", "MEM", "MEM", "KMEM", "Memphis International Airport"));
                airports.Add(new Airport("Nashville", "Tennessee", "BNA", "BNA", "KBNA", "Nashville International Airport (Berry Field)"));
                airports.Add(new Airport("Austin", "Texas", "AUS", "AUS", "KAUS", "Austin-Bergstrom International Airport"));
                airports.Add(new Airport("Dallas", "Texas", "DAL", "DAL", "KDAL", "Dallas Love Field"));
                airports.Add(new Airport("Dallas-Fort Worth", "Texas", "DFW", "DFW", "KDFW", "Dallas-Fort Worth International Airport"));
                airports.Add(new Airport("El Paso", "Texas", "ELP", "ELP", "KELP", "El Paso International Airport"));
                airports.Add(new Airport("Houston", "Texas", "IAH", "IAH", "KIAH", "George Bush Intercontinental Airport"));
                airports.Add(new Airport("Houston", "Texas", "HOU", "HOU", "KHOU", "William P. Hobby Airport"));
                airports.Add(new Airport("San Antonio", "Texas", "SAT", "SAT", "KSAT", "San Antonio International Airport"));
                airports.Add(new Airport("Salt Lake City", "Utah", "SLC", "SLC", "KSLC", "Salt Lake City International Airport"));
                airports.Add(new Airport("Norfolk", "Virginia", "ORF", "ORF", "KORF", "Norfolk International Airport"));
                airports.Add(new Airport("Richmond", "Virginia", "RIC", "RIC", "KRIC", "Richmond International Airport"));
                airports.Add(new Airport("Washington, D.C. (Arlington County)", "Virginia", "DCA", "DCA", "KDCA", "Ronald Reagan Washington National Airport"));
                airports.Add(new Airport("Washington, D.C. (Chantilly / Dulles)", "Virginia", "IAD", "IAD", "KIAD", "Washington Dulles International Airport"));
                airports.Add(new Airport("Seattle / Tacoma (SeaTac)", "Washington", "SEA", "SEA", "KSEA", "Seattle-Tacoma International Airport"));
                airports.Add(new Airport("Spokane", "Washington", "GEG", "GEG", "KGEG", "Spokane International Airport (Geiger Field)"));
                airports.Add(new Airport("Milwaukee", "Wisconsin", "MKE", "MKE", "KMKE", "General Mitchell International Airport"));
                airports.Add(new Airport("San Juan", "Puerto Rico", "SJU", "SJU", "TJSJ", "Luis Muñoz Marín International Airport"));
                return airports;
            }
        }
    }
}</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
</src:SourceViewer>

    </StackPanel>
</UserControl>
