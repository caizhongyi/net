<!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
-->

<UserControl
  xmlns="http://schemas.microsoft.com/client/2007"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:controls="clr-namespace:Microsoft.Windows.Controls;assembly=Microsoft.Windows.Controls"
  x:Class="Microsoft.Windows.Controls.Samples.WrapPanelSample">
    <StackPanel>
        <StackPanel.Resources>
            <Style x:Key="DemoLabel" TargetType="controls:Label">
                <Setter Property="Margin" Value="3" />
                <Setter Property="BorderBrush" Value="LightGreen" />
                <Setter Property="BorderThickness" Value="1" />
            </Style>
        </StackPanel.Resources>
              
        <!-- Manual Text Wrapping -->
        <ContentControl Content="Manual Text Wrapping" Style="{StaticResource Header}" />
        <CheckBox x:Name="chkHorizontal" Content="Horizontal" IsChecked="true" />
        <controls:WrapPanel x:Name="ManualTextWrapping" />

        <!-- Color swatch scenario -->
        <ContentControl Content="Select a Color" Style="{StaticResource Header}" />
        <ListBox
          x:Name="Swatch"
          Style="{StaticResource WrapListBox}"
          Margin="20" />
        
        <!-- Thumbnail scenario -->
        <ContentControl Content="Select a Thumbnail" Style="{StaticResource Header}" />
        <ListBox
          x:Name="Thumbnails"
          Style="{StaticResource WrapListBox}"
          ItemTemplate="{StaticResource PhotographTemplate}"
          Margin="20" />
        <src:SourceViewer xmlns:src="clr-namespace:Microsoft.Windows.Controls.Samples;assembly=Microsoft.Windows.Controls.Samples.Common" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <src:SourceFile Path="WrapPanelSample.xaml">
    <src:SourceFile.Source>
      <sys:String>&lt;!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
--&gt;

&lt;UserControl
  xmlns="http://schemas.microsoft.com/client/2007"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:controls="clr-namespace:Microsoft.Windows.Controls;assembly=Microsoft.Windows.Controls"
  x:Class="Microsoft.Windows.Controls.Samples.WrapPanelSample"&gt;
    &lt;StackPanel&gt;
        &lt;StackPanel.Resources&gt;
            &lt;Style x:Key="DemoLabel" TargetType="controls:Label"&gt;
                &lt;Setter Property="Margin" Value="3" /&gt;
                &lt;Setter Property="BorderBrush" Value="LightGreen" /&gt;
                &lt;Setter Property="BorderThickness" Value="1" /&gt;
            &lt;/Style&gt;
        &lt;/StackPanel.Resources&gt;
              
        &lt;!-- Manual Text Wrapping --&gt;
        &lt;ContentControl Content="Manual Text Wrapping" Style="{StaticResource Header}" /&gt;
        &lt;CheckBox x:Name="chkHorizontal" Content="Horizontal" IsChecked="true" /&gt;
        &lt;controls:WrapPanel x:Name="ManualTextWrapping" /&gt;

        &lt;!-- Color swatch scenario --&gt;
        &lt;ContentControl Content="Select a Color" Style="{StaticResource Header}" /&gt;
        &lt;ListBox
          x:Name="Swatch"
          Style="{StaticResource WrapListBox}"
          Margin="20" /&gt;
        
        &lt;!-- Thumbnail scenario --&gt;
        &lt;ContentControl Content="Select a Thumbnail" Style="{StaticResource Header}" /&gt;
        &lt;ListBox
          x:Name="Thumbnails"
          Style="{StaticResource WrapListBox}"
          ItemTemplate="{StaticResource PhotographTemplate}"
          Margin="20" /&gt;
    &lt;/StackPanel&gt;
&lt;/UserControl&gt;</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="WrapPanelSample.xaml.cs">
    <src:SourceFile.Source>
      <sys:String>// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.

using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;

namespace Microsoft.Windows.Controls.Samples
{
    /// &lt;summary&gt;
    /// Sample page demonstrating the WrapPanel.
    /// &lt;/summary&gt;
    [Sample("WrapPanel")]
    public partial class WrapPanelSample : UserControl
    {
        /// &lt;summary&gt;
        /// Gets or sets a value indicating whether the demonstration has
        /// already been loaded.
        /// &lt;/summary&gt;
        private bool IsLoaded { get; set; }

        /// &lt;summary&gt;
        /// Initializes a new instance of the WrapPanelSample class.
        /// &lt;/summary&gt;
        public WrapPanelSample()
        {
            InitializeComponent();

            Loaded += OnLoad;

            chkHorizontal.Checked += OnCheckChanged;
            chkHorizontal.Unchecked += OnCheckChanged;
        }

        /// &lt;summary&gt;
        /// Load the demonstration.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;Sample page.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        private void OnLoad(object sender, RoutedEventArgs e)
        {
            // Don't repopulate if the page has already been loaded.
            if (IsLoaded)
            {
                return;
            }
            IsLoaded = true;

            // Generate the text to wrap
            string lorem = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Suspendisse sed tellus non sapien laoreet accumsan. Phasellus rhoncus imperdiet pede. Morbi semper ipsum at leo. Nullam elit mi, dignissim et, vestibulum ut, laoreet quis, velit. Nulla aliquet risus sed arcu. Nunc vitae tortor in lectus tristique iaculis. Morbi elit. Quisque euismod mollis orci. Nullam cursus interdum eros. Curabitur tristique mi non nulla. Curabitur non nisi. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Nam aliquet, velit eu pretium placerat, massa lorem sollicitudin dolor, non ultricies nisi lorem bibendum enim. Pellentesque mollis egestas ipsum. Donec odio quam, tempus ut, iaculis molestie, viverra vitae, sapien.";
            for (int i = 0; i &lt; 4; i++)
            {
                foreach (string word in lorem.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    ManualTextWrapping.Children.Add(new TextBlock
                    {
                        Text = word,
                        Margin = new Thickness(3)
                    });
                }
            }

            // Generate the color swatch
            int granularity = 50;
            for (int r = 0; r &lt; 255; r += granularity)
            {
                for (int g = 0; g &lt; 255; g += granularity)
                {
                    for (int b = 0; b &lt; 255; b += granularity)
                    {
                        Swatch.Items.Add(new Rectangle
                        {
                            Width = 20,
                            Height = 20,
                            Margin = new Thickness(5),
                            Stroke = new SolidColorBrush(Colors.Black),
                            StrokeThickness = 1,
                            Fill = new SolidColorBrush(Color.FromArgb(255, (byte) r, (byte) g, (byte) b))
                        });
                    }
                }
            }

            // Set the thumbnails
            Thumbnails.ItemsSource = Photograph.GetPhotographs().OrderBy(p =&gt; p.Name);
        }

        /// &lt;summary&gt;
        /// Update the manual text layout sample to match the CheckBox.
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;The CheckBox that was changed.&lt;/param&gt;
        /// &lt;param name="e"&gt;Event arguments.&lt;/param&gt;
        private void OnCheckChanged(object sender, RoutedEventArgs e)
        {
            if (chkHorizontal.IsChecked == true)
            {
                ManualTextWrapping.Height = double.NaN;
                ManualTextWrapping.Orientation = Orientation.Horizontal;
            }
            else
            {
                ManualTextWrapping.Height = 600;
                ManualTextWrapping.Orientation = Orientation.Vertical;
            }
        }
    }
}</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
  <src:SourceFile Path="..\App.xaml">
    <src:SourceFile.Source>
      <sys:String>&lt;!--
// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Public License (Ms-PL).
// Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
// All other rights reserved.
--&gt;

&lt;Application
  xmlns="http://schemas.microsoft.com/client/2007"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
  xmlns:controls="clr-namespace:Microsoft.Windows.Controls;assembly=Microsoft.Windows.Controls"
  xmlns:common="clr-namespace:Microsoft.Windows.Controls.Samples;assembly=Microsoft.Windows.Controls.Samples.Common"
  xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows"
  x:Class="Microsoft.Windows.Controls.Samples.App"&gt;
    &lt;Application.Resources&gt;

        &lt;!-- DataTemplate for Photograph instances --&gt;
        &lt;DataTemplate x:Key="PhotographTemplate"&gt;
            &lt;Grid Margin="6"&gt;
                &lt;Grid.RowDefinitions&gt;
                    &lt;RowDefinition Height="Auto" /&gt;
                    &lt;RowDefinition Height="Auto" /&gt;
                &lt;/Grid.RowDefinitions&gt;
                &lt;controls:Viewbox Height="100" Width="100" VerticalAlignment="Bottom"&gt;
                    &lt;Border BorderBrush="#FF999999" BorderThickness="2" Padding="10"&gt;
                        &lt;ContentControl Content="{Binding Image}" /&gt;
                    &lt;/Border&gt;
                &lt;/controls:Viewbox&gt;
                &lt;ContentControl Grid.Row="1" Content="{Binding Name}" HorizontalAlignment="Center" FontSize="10" /&gt;
            &lt;/Grid&gt;
        &lt;/DataTemplate&gt;
        
        &lt;!-- A smoothed out ListBoxItem style --&gt;
        &lt;Style x:Key="SmoothListBoxItem" TargetType="ListBoxItem"&gt;
            &lt;Setter Property="IsEnabled" Value="true" /&gt;
            &lt;Setter Property="Foreground" Value="#FF000000" /&gt;
            &lt;Setter Property="HorizontalContentAlignment" Value="Left" /&gt;
            &lt;Setter Property="VerticalContentAlignment" Value="Top" /&gt;
            &lt;Setter Property="Cursor" Value="Arrow" /&gt;
            &lt;Setter Property="FontSize" Value="12" /&gt;
            &lt;Setter Property="Background" Value="White" /&gt;
            &lt;Setter Property="Padding" Value="2,0,0,0" /&gt;
            &lt;Setter Property="Template"&gt;
                &lt;Setter.Value&gt;
                    &lt;ControlTemplate TargetType="ListBoxItem"&gt;
                        &lt;Grid Background="{TemplateBinding Background}"&gt;
                            &lt;vsm:VisualStateManager.VisualStateGroups&gt;
                                &lt;vsm:VisualStateGroup x:Name="CommonStates"&gt;
                                    &lt;vsm:VisualState x:Name="Normal" /&gt;
                                    &lt;vsm:VisualState x:Name="MouseOver"&gt;
                                        &lt;Storyboard&gt;
                                            &lt;DoubleAnimation Storyboard.TargetName="HoverOverlay" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" /&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="fillStop0Hover" Storyboard.TargetProperty="Color" To="#FFF9FAFA" Duration="0" /&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="fillStop1Hover" Storyboard.TargetProperty="Color" To="#FFD6DFE7" Duration="0" /&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="fillStop2Hover" Storyboard.TargetProperty="Color" To="#FFD3E4F5" Duration="0" /&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="strokeStop0Hover" Storyboard.TargetProperty="Color" To="#00000000" Duration="0" /&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="strokeStop1Hover" Storyboard.TargetProperty="Color" To="#00000000" Duration="0" /&gt;
                                        &lt;/Storyboard&gt;
                                    &lt;/vsm:VisualState&gt;
                                &lt;/vsm:VisualStateGroup&gt;
                                &lt;vsm:VisualStateGroup x:Name="SelectionStates"&gt;
                                    &lt;vsm:VisualState x:Name="Unselected" /&gt;
                                    &lt;vsm:VisualState x:Name="Selected"&gt;
                                        &lt;Storyboard&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="fillStop0" Storyboard.TargetProperty="Color" To="#FFD9EFFF" Duration="0" /&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="fillStop1" Storyboard.TargetProperty="Color" To="#FFBDD2E6" Duration="0" /&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="fillStop2" Storyboard.TargetProperty="Color" To="#FFA1B6CD" Duration="0" /&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="strokeStop0" Storyboard.TargetProperty="Color" To="#FF77B9EB" Duration="0" /&gt;
                                            &lt;ColorAnimation Storyboard.TargetName="strokeStop1" Storyboard.TargetProperty="Color" To="#FF4887CD" Duration="0" /&gt;
                                        &lt;/Storyboard&gt;
                                    &lt;/vsm:VisualState&gt;
                                &lt;/vsm:VisualStateGroup&gt;
                                &lt;vsm:VisualStateGroup x:Name="FocusStates"&gt;
                                    &lt;vsm:VisualState x:Name="Focused"&gt;
                                        &lt;Storyboard&gt;
                                            &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0"&gt;
                                                &lt;DiscreteObjectKeyFrame KeyTime="0"&gt;
                                                    &lt;DiscreteObjectKeyFrame.Value&gt;
                                                        &lt;Visibility&gt;Visible&lt;/Visibility&gt;
                                                    &lt;/DiscreteObjectKeyFrame.Value&gt;
                                                &lt;/DiscreteObjectKeyFrame&gt;
                                            &lt;/ObjectAnimationUsingKeyFrames&gt;
                                        &lt;/Storyboard&gt;
                                    &lt;/vsm:VisualState&gt;
                                    &lt;vsm:VisualState x:Name="Unfocused"&gt;
                                        &lt;Storyboard&gt;
                                            &lt;ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0"&gt;
                                                &lt;DiscreteObjectKeyFrame KeyTime="0"&gt;
                                                    &lt;DiscreteObjectKeyFrame.Value&gt;
                                                        &lt;Visibility&gt;Collapsed&lt;/Visibility&gt;
                                                    &lt;/DiscreteObjectKeyFrame.Value&gt;
                                                &lt;/DiscreteObjectKeyFrame&gt;
                                            &lt;/ObjectAnimationUsingKeyFrames&gt;
                                        &lt;/Storyboard&gt;
                                    &lt;/vsm:VisualState&gt;
                                &lt;/vsm:VisualStateGroup&gt;
                            &lt;/vsm:VisualStateManager.VisualStateGroups&gt;

                            &lt;Grid.RowDefinitions&gt;
                                &lt;RowDefinition Height="*"/&gt;
                                &lt;RowDefinition Height="Auto"/&gt;
                            &lt;/Grid.RowDefinitions&gt;

                            &lt;Rectangle IsHitTestVisible="False"&gt;
                                &lt;Rectangle.Fill&gt;
                                    &lt;LinearGradientBrush StartPoint="0.316111,0.0165521" EndPoint="0.316111,0.724833"&gt;
                                        &lt;GradientStop x:Name="fillStop0" Color="#00000000" Offset="0"/&gt;
                                        &lt;GradientStop x:Name="fillStop1" Color="#00000000" Offset="0.682203"/&gt;
                                        &lt;GradientStop x:Name="fillStop2" Color="#00000000" Offset="1"/&gt;
                                    &lt;/LinearGradientBrush&gt;
                                &lt;/Rectangle.Fill&gt;
                                &lt;Rectangle.Stroke&gt;
                                    &lt;LinearGradientBrush StartPoint="0.318122,0.0360108" EndPoint="0.318122,0.715784"&gt;
                                        &lt;GradientStop x:Name="strokeStop0" Color="#00000000" Offset="0"/&gt;
                                        &lt;GradientStop x:Name="strokeStop1" Color="#00000000" Offset="1"/&gt;
                                    &lt;/LinearGradientBrush&gt;
                                &lt;/Rectangle.Stroke&gt;
                            &lt;/Rectangle&gt;
                            &lt;Rectangle x:Name="HoverOverlay" IsHitTestVisible="False" Opacity="0"&gt;
                                &lt;Rectangle.Fill&gt;
                                    &lt;LinearGradientBrush StartPoint="0.316111,0.0165521" EndPoint="0.316111,0.724833"&gt;
                                        &lt;GradientStop x:Name="fillStop0Hover" Color="#00000000" Offset="0"/&gt;
                                        &lt;GradientStop x:Name="fillStop1Hover" Color="#00000000" Offset="0.682203"/&gt;
                                        &lt;GradientStop x:Name="fillStop2Hover" Color="#00000000" Offset="1"/&gt;
                                    &lt;/LinearGradientBrush&gt;
                                &lt;/Rectangle.Fill&gt;
                                &lt;Rectangle.Stroke&gt;
                                    &lt;LinearGradientBrush StartPoint="0.318122,0.0360108" EndPoint="0.318122,0.715784"&gt;
                                        &lt;GradientStop x:Name="strokeStop0Hover" Color="#00000000" Offset="0"/&gt;
                                        &lt;GradientStop x:Name="strokeStop1Hover" Color="#00000000" Offset="1"/&gt;
                                    &lt;/LinearGradientBrush&gt;
                                &lt;/Rectangle.Stroke&gt;
                            &lt;/Rectangle&gt;

                            &lt;Border x:Name="FocusVisual" BorderBrush="#FF0B8BAA" BorderThickness="1" CornerRadius="4" Visibility="Collapsed" IsHitTestVisible="False" /&gt;
                            &lt;ContentPresenter
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              HorizontalAlignment="Left" /&gt;
                        &lt;/Grid&gt;
                    &lt;/ControlTemplate&gt;
                &lt;/Setter.Value&gt;
            &lt;/Setter&gt;
        &lt;/Style&gt;

        &lt;!-- ListBox template that uses a WrapPanel --&gt;
        &lt;Style x:Key="WrapListBox" TargetType="ListBox"&gt;
            &lt;Setter Property="ItemContainerStyle" Value="{StaticResource SmoothListBoxItem}" /&gt;
            &lt;Setter Property="ItemsPanel"&gt;
                &lt;Setter.Value&gt;
                    &lt;ItemsPanelTemplate&gt;
                        &lt;controls:WrapPanel Orientation="Horizontal" /&gt;
                    &lt;/ItemsPanelTemplate&gt;
                &lt;/Setter.Value&gt;
            &lt;/Setter&gt;
            &lt;Setter Property="Template"&gt;
                &lt;Setter.Value&gt;
                    &lt;ControlTemplate TargetType="ListBox"&gt;
                        &lt;Grid&gt;
                            &lt;Border BorderBrush="#FF000000" BorderThickness="1" CornerRadius="3"&gt;
                                &lt;Border Background="{TemplateBinding Background}" BorderBrush="#FFFFFFFF" BorderThickness="2" CornerRadius="3"&gt;
                                    &lt;ItemsPresenter /&gt;
                                &lt;/Border&gt;
                            &lt;/Border&gt;
                        &lt;/Grid&gt;
                    &lt;/ControlTemplate&gt;
                &lt;/Setter.Value&gt;
            &lt;/Setter&gt;
        &lt;/Style&gt;
    &lt;/Application.Resources&gt;
&lt;/Application&gt;</sys:String>
    </src:SourceFile.Source>
  </src:SourceFile>
</src:SourceViewer>
    </StackPanel>
</UserControl>