<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluorineFx</name>
    </assembly>
    <members>
        <member name="T:FluorineFx.Util.UriBase">
            <summary>
            Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI.
            protocol://user:password?host:port/path?param1=value&amp;param2=value2&amp;...
            </summary>
        </member>
        <member name="M:FluorineFx.Util.UriBase.#ctor(FluorineFx.Util.UriBase)">
            <summary>
            Initializes a new instance of the UriBase class.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:FluorineFx.Util.UriBase.#ctor">
            <summary>
            Initializes a new instance of the UriBase class.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.UriBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UriBase class.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:FluorineFx.Util.UriBase.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the UriBase class.
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <param name="path"></param>
            <param name="host"></param>
            <param name="protocol"></param>
            <param name="port"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:FluorineFx.Util.UriBase.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the UriBase class.
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <param name="path"></param>
            <param name="host"></param>
            <param name="protocol"></param>
            <param name="port"></param>
        </member>
        <member name="M:FluorineFx.Util.UriBase.Clear">
            <summary>
            Clears the url.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.UriBase.ParseUri(System.String)">
            <summary>
            Parse the uri.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:FluorineFx.Util.UriBase.EqualTo(FluorineFx.Util.UriBase)">
            <summary>
            Returns whether the value of the called object is equal to that of the given object.
            Equality here means if all the fields are the same.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.UriBase.CopyTo(FluorineFx.Util.UriBase)">
            <summary>
            Copy content of this object into the given object.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="P:FluorineFx.Util.UriBase.Path">
            <summary>
            Gets or sets the path specified in the url.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.UriBase.Host">
            <summary>
            Gets or sets the host specified in the url.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.UriBase.Parameters">
            <summary>
            Gets or sets the additional parameters specified in the url.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.UriBase.Password">
            <summary>
            Gets or sets the host password in the url.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.UriBase.Port">
            <summary>
            Gets or sets the port specified in the url.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.UriBase.Protocol">
            <summary>
            Gets or sets the protocol specified in the url.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.UriBase.User">
            <summary>
            Gets or sets user specified in the url.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.UriBase.Uri">
            <summary>
            Gets or sets the url.
            </summary>
        </member>
        <member name="T:FluorineFx.Threading.ThreadPoolEx">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx.DefaultMinWorkerThreads">
            <summary>
            Default minimum number of threads the thread pool contains. (0)
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx.DefaultMaxWorkerThreads">
            <summary>
            Default maximum number of threads the thread pool contains.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx.DefaultIdleTimeout">
            <summary>
            Default idle timeout in milliseconds. (One minute)
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx.DefaultStartSuspended">
            <summary>
            The default is to work on work items as soon as they arrive.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx.DefaultThreadPriority">
            <summary>
            The default thread priority.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx.DefaultPerformanceCounterInstanceName">
            <summary>
            The default is not to use the performance counters.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._threadPoolStartInfo">
            <summary>
            Start information to use. 
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._workItemsQueue">
            <summary>
            Queue of work items.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._workerThreads">
            <summary>
            Hashtable of all the threads in the thread pool.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._inUseWorkerThreads">
            <summary>
            Number of running threads(not idle).
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._isIdleWaitHandle">
            <summary>
            Signaled when the thread pool is idle.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._shuttingDownEvent">
            <summary>
            An event to signal all the threads to quit immediately.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._shutdown">
            <summary>
            A flag to indicate the threads to quit.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._threadCounter">
            <summary>
            Counts the threads created in the pool.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._isDisposed">
            <summary>
            Indicate that the object has been disposed.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._workItemsProcessed">
            <summary>
            Processed work items counter.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._currentWorkItemsCount">
            <summary>
            Total number of work items that are stored in the work items queue 
            plus the work items that the threads in the pool are working on.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._name">
            <summary>
            Contains the name of this instance of ThreadPoolEx.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._threadPool">
            <summary>
            A reference from each thread in the thread pool to its ThreadPoolEx object container.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolEx._currentWorkItem">
            <summary>
            A reference to the current work item a thread from the thread pool is executing.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.#ctor">
            <summary>
            Initializes a new instance of the ThreadPoolEx class.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ThreadPoolEx class.
            </summary>
            <param name="idleTimeout">Idle timeout in milliseconds.</param>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ThreadPoolEx class.
            </summary>
            <param name="idleTimeout">Idle timeout in milliseconds.</param>
            <param name="maxWorkerThreads">Upper limit of threads in the pool.</param>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ThreadPoolEx class.
            </summary>
            <param name="idleTimeout">Idle timeout in milliseconds.</param>
            <param name="maxWorkerThreads">Upper limit of threads in the pool.</param>
            <param name="minWorkerThreads">Lower limit of threads in the pool.</param>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.Finalize">
            <summary>
            Frees the resources of the current ThreadPoolEx object before it is reclaimed by the garbage collector.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.Dispose">
            <summary>
            Releases resources used by the ThreadPoolEx object.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.StartThreads(System.Int32)">
            <summary>
            Starts new threads.
            </summary>
            <param name="threadsCount">The number of threads to start.</param>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.Dequeue">
            <summary>
            Waits on the queue for a work item, shutdown, or timeout.
            </summary>
            <returns>
            Returns the WaitingCallback or null in case of timeout or shutdown.
            </returns>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.Enqueue(FluorineFx.Threading.WorkItem)">
            <summary>
            Adds a new work item to the queue.
            </summary>
            <param name="workItem">The work item to queue.</param>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.Enqueue(FluorineFx.Threading.WorkItem,System.Boolean)">
            <summary>
            Adds a new work item to the queue.
            </summary>
            <param name="workItem">The work item to queue.</param>
            <param name="incrementWorkItems"></param>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.ProcessQueuedItems">
            <summary>
            A worker thread method that processes work items from the work items queue.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.Shutdown">
            <summary>
            Forces the ThreadPool to shutdown.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.Shutdown(System.Boolean,System.TimeSpan)">
            <summary>
            Forces the ThreadPool to shutdown.
            </summary>
            <param name="forceAbort"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.Shutdown(System.Boolean,System.Int32)">
            <summary>
            Empty the queue of work items and abort the threads in the pool.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolEx.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queues a user work item to the thread pool.
            </summary>
            <param name="callback">A WaitCallback representing the delegate to invoke when the thread in the thread pool picks up the work item.</param>
            <param name="state">The object that is passed to the delegate when serviced from the thread pool.</param>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Threading.ThreadPoolEx.Name">
            <summary>
            Gets or sets the name of the ThreadPool instance
            </summary>
        </member>
        <member name="P:FluorineFx.Threading.ThreadPoolEx.InUseThreads">
            <summary>
            Get the number of running (not idle) threads in the thread pool.
            </summary>
        </member>
        <member name="P:FluorineFx.Threading.ThreadPoolEx.AvailableThreads">
            <summary>
            Gets the number of available threads in the pool.
            </summary>
        </member>
        <member name="P:FluorineFx.Threading.ThreadPoolEx.WaitingCallbacks">
            <summary>
            Get the number of work items in the queue.
            </summary>
        </member>
        <member name="P:FluorineFx.Threading.ThreadPoolEx.Global">
            <summary>
            Gets the global ThreadPoolEx instance.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Services.RemotingService">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Services.ServiceBase">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Services.IService">
            <summary>
            The MessageBroker has endpoints on one end and services on the other.
            The Service interface defines the contract between the MessageBroker 
            and all Service implementations.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.GetMessageBroker">
            <summary>
            Retrieves the MessageBroker managing this service.
            This MessageBroker is used to push a message to one or more endpoints managed by the broker. 
            </summary>
            <returns>The MessageBroker managing this service.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.GetDestination(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Retrieves the destination in this service for which the given message is intended.
            </summary>
            <param name="message"></param>
            <returns>The requested Destination.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.ServiceMessage(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Handles a message routed to the service by the MessageBroker.
            </summary>
            <param name="message">The message sent by the MessageBroker.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.IsSupportedMessage(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Determines whether this Service is capable of handling a given Message instance.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.IsSupportedMessageType(System.String)">
            <summary>
            Determines whether this Service is capable of handling messages of a given type.
            </summary>
            <param name="messageClassName"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.Start">
            <summary>
            Performs any startup actions necessary after the service has been added to the broker.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.Stop">
            <summary>
            Performs any actions necessary before removing the service from the broker.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.GetDestination(System.String)">
            <summary>
            Retrieves the destination in this service for with the given destination identity.
            </summary>
            <param name="id">Destination identity.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.CheckSecurity(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Performs programmatic, custom authentication.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.CheckSecurity(FluorineFx.Messaging.Destination)">
            <summary>
            Performs programmatic, custom authentication.
            </summary>
            <param name="destination"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.DoAuthorization(System.String[])">
            <summary>
            Performs programmatic authorization.
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.IService.GetDestinations">
            <summary>
            Retrieves the list of destinations in this service.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Services.IService.id">
            <summary>
            Gets the service identity.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Services.ServiceBase._messageBroker">
            <summary>
            Reference to the MessageBroker.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Services.ServiceBase._serviceSettings">
            <summary>
            Service settings.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Services.ServiceBase._destinations">
            <summary>
            Destinations in this service.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Services.ServiceBase._defaultDestination">
            <summary>
            Reference to the default Destination is available.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.NewDestination(FluorineFx.Messaging.Config.DestinationSettings)">
            <summary>
            Creates a new Destination.
            </summary>
            <param name="destinationSettings">Destination settings.</param>
            <returns>The new Destination instance.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.GetMessageBroker">
            <summary>
            Retrievs the MessageBroker managing this service.
            This MessageBroker is used to push a message to one or more endpoints managed by the broker. 
            </summary>
            <returns>The MessageBroker managing this service.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.GetDestination(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Retrieves the destination in this service for which the given message is intended.
            </summary>
            <param name="message">The message that should be handled by the destination.</param>
            <returns>The destination if it is found; otherwise, null.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.GetDestinations">
            <summary>
            Returns all destinations in this service.
            </summary>
            <returns>The collection of destinations.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.GetDestinationWithSource(System.String)">
            <summary>
            Returns the destination for the specified source.
            </summary>
            <param name="source">The destination's source property.</param>
            <returns>The destination if it is found; otherwise, null.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.GetDestination(System.String)">
            <summary>
            Returns the destination with the specified Id.
            </summary>
            <param name="id">The destination's identity.</param>
            <returns>The destination if it is found; otherwise, null.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.ServiceMessage(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Handles a message routed to the service by the MessageBroker.
            </summary>
            <param name="message">The message that should be handled by the service.</param>
            <returns>The result of the message processing.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.IsSupportedMessage(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Returns whether this Service is capable of handling the given Message instance.
            </summary>
            <param name="message">The message that should be handled by the service.</param>
            <returns>true if the Service is capable of handling the message; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.IsSupportedMessageType(System.String)">
            <summary>
            Returns whether this Service is capable of handling messages of a given type.
            </summary>
            <param name="messageClassName">The message type.</param>
            <returns>true if the Service is capable of handling messages of a given type; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.Start">
            <summary>
            Performs any startup actions necessary after the service has been added to the broker.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.Stop">
            <summary>
            Performs any actions necessary before removing the service from the broker.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.CreateDestination(FluorineFx.Messaging.Config.DestinationSettings)">
            <summary>
            Creates a destination with the specified settings.
            </summary>
            <param name="destinationSettings">Destination settings.</param>
            <returns>The created destination instance.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.CheckSecurity(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Checks security before handling the given Message instance.
            </summary>
            <param name="message">The message that should be handled by the service.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.CheckSecurity(FluorineFx.Messaging.Destination)">
            <summary>
            Checks security for the given destination instance.
            </summary>
            <param name="destination">The destination that should process messages.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceBase.DoAuthorization(System.String[])">
            <summary>
            Performs authorization for the current user.
            </summary>
            <param name="roles">List of roles.</param>
            <returns>true if the current user is authorized, otherwise, false.</returns>
            <remarks>
            If Thread.CurrentPrincipal is not set this method will throw an UnauthorizedAccessException.
            If the MessageBroker of this Destination does not have a valid Login Command this method will throw an UnauthorizedAccessException.
            </remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Services.ServiceBase.ServiceSettings">
            <summary>
            Gets service settings.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Services.ServiceBase.id">
            <summary>
            Gets the service identity.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Services.ServiceBase.DefaultDestination">
            <summary>
            Gets the default destination if available.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Adapter.ApplicationAdapter">
            <summary>
            <para>
            ApplicationAdapter class serves as a base class for your applications.
            It provides methods to work with SharedObjects and streams, as well as
            connections and scheduling services.
            </para>
            <para>
            ApplicationAdapter is an application level IScope. To handle streaming
            processes in your application you should implement 
            IStreamAwareScopeHandler interface and implement handling methods.
            </para>
            <para>
            Application adapter provides you with useful event handlers that can be used to intercept streams,
            authorize users, etc. Also, all methods added in subclasses can be called from client side with NetConnection.call
            method.
            </para>
            If you want to build a server-side framework this is a place to start and wrap it around ApplicationAdapter subclass.
            </summary>
            <example>
            <para>Calling a method added to an ApplicationAdapter subclass</para>
            <code lang="Actionscript">
            var nc:NetConnection = new NetConnection();
            nc.connect(...);
            nc.call("serverHelloMsg", resultObject, "my message");
            </code>
            <code lang="CS">
            public class HelloWorldApplication : ApplicationAdapter
            {
                public string serverHelloMsg(string helloStr)
                {
                    return "Hello, " + helloStr + "!";
                }
            }
            </code>
            </example>
        </member>
        <member name="T:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter">
            <summary>
            StatefulScopeWrappingAdapter class wraps stateful IScope functionality. That
            is, it has attributes that you can work with, subscopes, associated resources
            and connections.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Adapter.AbstractScopeAdapter">
            <summary>
            Base scope handler implementation.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IScopeHandler">
            <summary>
            The scope handler controls actions performed against a scope object, and also is notified of all events.
            
            Gives fine grained control over what actions can be performed with the can*
            methods. Allows for detailed reporting on what is happening within the scope
            with the on* methods. This is the core interface users implement to create
            applications.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Event.IEventHandler">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Event.IEventHandler.HandleEvent(FluorineFx.Messaging.Api.Event.IEvent)">
            <summary>
            Handle an event.
            </summary>
            <param name="evt">Event to handle.</param>
            <returns>true if event was handled, false if it should bubble.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeHandler.Start(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called when a scope is created for the first time.
            </summary>
            <param name="scope">The new scope object.</param>
            <returns><code>true</code> to allow, <code>false</code> to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeHandler.Stop(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called just before a scope is disposed.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeHandler.Connect(FluorineFx.Messaging.Api.IConnection,FluorineFx.Messaging.Api.IScope,System.Object[])">
            <summary>
            Called just before every connection to a scope. You can pass additional
            parameters from client using <code>NetConnection.connect</code> method (see
            below).
            </summary>
            <param name="connection">Connection object.</param>
            <param name="scope"></param>
            <param name="parameters">List of params passed from client via <code>NetConnection.connect</code> method. All parameters but the first one passed to <code>NetConnection.connect</code> method are available as parameters array.</param>
            <returns><code>true</code> to allow, <code>false</code> to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeHandler.Disconnect(FluorineFx.Messaging.Api.IConnection,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called just after the a connection is disconnected.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="scope">Scope object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeHandler.AddChildScope(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Called just before a child scope is added.
            </summary>
            <param name="scope">Scope that will be added.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeHandler.RemoveChildScope(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Called just after a child scope has been removed.
            </summary>
            <param name="scope">Scope that has been removed.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeHandler.Join(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called just before a client enters the scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="scope"></param>
            <returns><code>true</code> to allow, <code>false</code> to deny connection.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeHandler.Leave(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called just after the client leaves the scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="scope">Scope object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeHandler.ServiceCall(FluorineFx.Messaging.Api.IConnection,FluorineFx.Messaging.Api.Service.IServiceCall)">
            <summary>
            Called when a service is called.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="call">Call object.</param>
            <returns><code>true</code> to allow, <code>false</code> to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.#ctor">
            <summary>
            Initializes a new instance of the AbstractScopeAdapter class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.Start(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called when a scope is created for the first time.
            </summary>
            <param name="scope">The new scope object.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.Stop(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called just before a scope is disposed.
            </summary>
            <param name="scope"> Scope that is disposed.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.Connect(FluorineFx.Messaging.Api.IConnection,FluorineFx.Messaging.Api.IScope,System.Object[])">
            <summary>
            Called just before every connection to a scope. You can pass additional params from client using NetConnection.connect method.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="scope">Scope object.</param>
            <param name="parameters">List of params passed from client via NetConnection.connect method. All parameters but the first one passed to NetConnection.connect method are available as parameters array.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.Disconnect(FluorineFx.Messaging.Api.IConnection,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called just after the a connection is disconnected.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="scope">Scope object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.Join(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called just before a client enters the scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="scope">Scope that is joined by client.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.Leave(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called just after the client leaves the scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="scope">Scope object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.ServiceCall(FluorineFx.Messaging.Api.IConnection,FluorineFx.Messaging.Api.Service.IServiceCall)">
            <summary>
            Called when a service is called.
            </summary>
            <param name="connection">The connection object.</param>
            <param name="call">The call object.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.AddChildScope(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Called just before a child scope is added.
            </summary>
            <param name="scope">Scope that will be added.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.RemoveChildScope(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Called just after a child scope has been removed.
            </summary>
            <param name="scope">Scope that has been removed.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.HandleEvent(FluorineFx.Messaging.Api.Event.IEvent)">
            <summary>
            Handle an event.
            </summary>
            <param name="evt">Event to handle.</param>
            <returns>true if event was handled, false if it should bubble.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.CanStart">
            <summary>
            Sets whether the scope is ready to be activated.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.CanCallService">
            <summary>
            Sets whether remote service calls are allowed for the scope.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.CanConnect">
            <summary>
            Sets whether connections to scope are allowed.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.AbstractScopeAdapter.CanJoin">
            <summary>
             Sets whether scope may be joined by users.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IScopeAware">
            <summary>
            Marker interface for all objects that are aware of the scope they are located in.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeAware.SetScope(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Sets the scope the object is located in.
            </summary>
            <param name="scope">Scope for this object.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IAttributeStore">
            <summary>
            Base interface for all API objects with attributes.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.GetAttributeNames">
            <summary>
            Returns the attribute names.
            </summary>
            <returns>Collection of attribute names.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.SetAttribute(System.String,System.Object)">
            <summary>
            Sets an attribute on this object.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns>true if the attribute value changed otherwise false</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.SetAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets multiple attributes on this object.
            </summary>
            <param name="values">Dictionary of attributes.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.SetAttributes(FluorineFx.Messaging.Api.IAttributeStore)">
            <summary>
            Sets multiple attributes on this object.
            </summary>
            <param name="values">Attribute store.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.GetAttribute(System.String)">
            <summary>
            Returns the value for a given attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.GetAttribute(System.String,System.Object)">
            <summary>
            Returns the value for a given attribute and sets it if it doesn't exist.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">Attribute's default value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.HasAttribute(System.String)">
            <summary>
            Checks whetner the object has an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>true if a child scope exists, otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>true if the attribute was found and removed otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.RemoveAttributes">
            <summary>
            Removes all attributes.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IAttributeStore.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the collection of attribute values to a one-dimensional array, starting at the specified index in the array.
            </summary>
            <param name="array">The Array that receives the values.</param>
            <param name="index">The zero-based index in array from which copying starts.</param>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IAttributeStore.IsEmpty">
            <summary>
            Gets whether the attribute store is empty;
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IAttributeStore.Item(System.String)">
            <summary>
            Gets or sets a value by name.
            </summary>
            <param name="name">The key name of the value.</param>
            <returns>The value with the specified name.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IAttributeStore.AttributesCount">
            <summary>
            Gets the number of attributes in the collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.#ctor">
            <summary>
            Initializes a new instance of the StatefulScopeWrappingAdapter class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.SetScope(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Set the scope the object is located in. 
            </summary>
            <param name="scope">Scope for this object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.GetAttributeNames">
            <summary>
            Returns the attribute names.
            </summary>
            <returns>Collection of attribute names.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.SetAttribute(System.String,System.Object)">
            <summary>
            Sets an attribute on this object.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns>true if the attribute value changed otherwise false</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.SetAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets multiple attributes on this object.
            </summary>
            <param name="values">Dictionary of attributes.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.SetAttributes(FluorineFx.Messaging.Api.IAttributeStore)">
            <summary>
            Sets multiple attributes on this object.
            </summary>
            <param name="values">Attribute store.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.GetAttribute(System.String)">
            <summary>
            Returns the value for a given attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.GetAttribute(System.String,System.Object)">
            <summary>
            Returns the value for a given attribute and sets it if it doesn't exist.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">Attribute's default value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.HasAttribute(System.String)">
            <summary>
            Checks whetner the object has an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>true if a child scope exists, otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>true if the attribute was found and removed otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.RemoveAttributes">
            <summary>
            Removes all attributes.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the collection of attribute values to a one-dimensional array, starting at the specified index in the array.
            </summary>
            <param name="array">The Array that receives the values.</param>
            <param name="index">The zero-based index in array from which copying starts.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.CreateChildScope(System.String)">
            <summary>
            Creates child scope.
            </summary>
            <param name="name">Child scope name.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.GetChildScope(System.String)">
            <summary>
            Returns child scope.
            </summary>
            <param name="name">Child scope name.</param>
            <returns>Child scope with given name.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.GetChildScopeNames">
            <summary>
            Returns collection of child scope names.
            </summary>
            <returns>Collection of child scope names</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.GetClients">
            <summary>
            Returns collection of clients.
            </summary>
            <returns>Collection of clients.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.GetConnections">
            <summary>
            Returns collection of connections.
            </summary>
            <returns>Collection of connections.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.GetContext">
            <summary>
            Returns the wrapped scope's context.
            </summary>
            <returns>The current context.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.HasChildScope(System.String)">
            <summary>
            Checks whether the wrapped scope has a child scope with given name.
            </summary>
            <param name="name">Child scope name.</param>
            <returns><code>true</code> if a child scope exists, otherwise <code>false</code></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.LookupConnections(FluorineFx.Messaging.Api.IClient)">
            <summary>
            Returns collection of connections for the specified client.
            </summary>
            <param name="client">The client object.</param>
            <returns>Collection of connections.</returns>	
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.Scope">
            <summary>
            Gets the wrapped scope.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.IsEmpty">
            <summary>
            Gets whether the attribute store is empty;
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.Item(System.String)">
            <summary>
            Gets or sets a value by name.
            </summary>
            <param name="name">The key name of the value.</param>
            <returns>The value with the specified name.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.AttributesCount">
            <summary>
            Gets the number of attributes in the collection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.Depth">
            <summary>
            Get the scopes depth, how far down the scope tree is it. The lowest depth
            is 0x00, the depth of Global scope. Application scope depth is 0x01. Room
            depth is 0x02, 0x03 and so forth.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.Name">
            <summary>
            Gets the name of the wrapped scope.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.Parent">
            <summary>
            Get this wrapped scope's parent.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.Path">
            <summary>
            Gets the wrapped scope's full absolute path.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Adapter.StatefulScopeWrappingAdapter.HasParent">
            <summary>
            Checks whether the wrapped scope has a parent.
            You can think of scopes as of tree items
            where scope may have a parent and children (child).
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.SO.ISharedObjectService">
            <summary>
            Service that manages shared objects.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IScopeService">
            <summary>
            Base marker interface for all scope services. Used by the ScopeUtils to lookup services defined. 
            A scope service usually can perform various tasks on a scope like managing shared objects, streams, etc.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IService">
            <summary>
            Base interface for all services.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IService.Start(FluorineFx.Configuration.ConfigurationSection)">
            <summary>
            Start service.
            </summary>
            <param name="configuration">Application configuration.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IService.Shutdown">
            <summary>
            Shutdown service.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectService.GetSharedObjectNames(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Returns a collection of available SharedObject names.
            </summary>
            <param name="scope">Scope that SharedObjects belong to.</param>
            <returns>Collection of available SharedObject names.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectService.CreateSharedObject(FluorineFx.Messaging.Api.IScope,System.String,System.Boolean)">
            <summary>
            Creates a new shared object for given scope. Server-side shared objects
            (also known as Remote SO) are special kind of objects synchronized between clients.
            
            To get an instance of RSO at client-side, use <code>SharedObject.getRemote()</code>.
            
            SharedObjects can be persistent and transient. Persistent RSO are stateful, i.e. store their data between sessions.
            If you need to store some data on server while clients go back and forth use persistent SO, otherwise perfer usage of transient for
            extra performance.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <param name="persistent">Whether SharedObject instance should be persistent or not.</param>
            <returns>true if SO was created, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectService.GetSharedObject(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Returns shared object from given scope by name.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <returns>Shared object instance with the specifed name.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectService.GetSharedObject(FluorineFx.Messaging.Api.IScope,System.String,System.Boolean)">
            <summary>
            Returns shared object from given scope by name.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <param name="persistent">Whether SharedObject instance should be persistent or not.</param>
            <returns>Shared object instance with the specifed name.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectService.HasSharedObject(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Checks whether there is a SharedObject with given scope and name.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <returns>true if SharedObject exists, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectService.ClearSharedObjects(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Deletes persistent shared objects specified by name and clears all
            properties from active shared objects (persistent and nonpersistent). The
            name parameter specifies the name of a shared object, which can include a
            slash (/) as a delimiter between directories in the path. The last
            element in the path can contain wildcard patterns (for example, a
            question mark [?] and an asterisk [*]) or a shared object name. The
            ClearSharedObjects() method traverses the shared object hierarchy along
            the specified path and clears all the shared objects. Specifying a slash
            (/) clears all the shared objects associated with an application
            instance.
            
            The following values are possible for the soPath parameter: <br />
            clears all local and persistent shared objects associated with the instance. <br />
            /foo/bar clears the shared object /foo/bar; if bar is a directory name, no shared objects are deleted. <br />
            /foo/bar/* clears all shared objects stored under the instance directory
            /foo/bar. The bar directory is also deleted if no persistent shared objects are in use within this namespace. <br />
            /foo/bar/XX?? clears all shared objects that begin with XX, followed by any two characters. 
            If a directory name matches this specification, all the shared objects within this directory are cleared.
            
            If you call the ClearSharedObjects() method and the specified path
            matches a shared object that is currently active, all its properties are
            deleted, and a "clear" event is sent to all subscribers of the shared
            object. If it is a persistent shared object, the persistent store is also cleared.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.SO.ISharedObjectSecurityService">
            <summary>
            Service that supports protecting access to shared objects.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectSecurityService.RegisterSharedObjectSecurity(FluorineFx.Messaging.Api.SO.ISharedObjectSecurity)">
            <summary>
            Adds handler that protects shared objects.
            </summary>
            <param name="handler">The ISharedObjectSecurity handler.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectSecurityService.UnregisterSharedObjectSecurity(FluorineFx.Messaging.Api.SO.ISharedObjectSecurity)">
            <summary>
            Removes handler that protects shared objects.
            </summary>
            <param name="handler">The ISharedObjectSecurity handler.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectSecurityService.GetSharedObjectSecurity">
            <summary>
            Gets the collection of security handlers that protect shared objects.
            </summary>
            <returns>Enumerator of ISharedObjectSecurity handlers.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamSecurityService">
            <summary>
            Service that supports protected access to streams.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamSecurityService.RegisterStreamPublishSecurity(FluorineFx.Messaging.Api.Stream.IStreamPublishSecurity)">
            <summary>
            Add handler that protects stream publishing.
            </summary>
            <param name="handler">Handler to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamSecurityService.UnregisterStreamPublishSecurity(FluorineFx.Messaging.Api.Stream.IStreamPublishSecurity)">
            <summary>
            Remove handler that protects stream publishing.
            </summary>
            <param name="handler">Handler to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamSecurityService.GetStreamPublishSecurity">
            <summary>
            Returns handlers that protect stream publishing.
            </summary>
            <returns>Enumerator of handlers.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamSecurityService.RegisterStreamPlaybackSecurity(FluorineFx.Messaging.Api.Stream.IStreamPlaybackSecurity)">
            <summary>
            Add handler that protects stream playback.
            </summary>
            <param name="handler">Handler to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamSecurityService.UnregisterStreamPlaybackSecurity(FluorineFx.Messaging.Api.Stream.IStreamPlaybackSecurity)">
            <summary>
            Remove handler that protects stream playback.
            </summary>
            <param name="handler">Handler to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamSecurityService.GetStreamPlaybackSecurity">
            <summary>
            Returns handlers that protect stream plaback.
            </summary>
            <returns>Enumerator of handlers.</returns>
        </member>
        <member name="F:FluorineFx.Messaging.Adapter.ApplicationAdapter._listeners">
            <summary>
            List of IApplication listeners.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Adapter.ApplicationAdapter._sharedObjectSecurityHandlers">
            <summary>
            List of handlers that protect shared objects.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Adapter.ApplicationAdapter._publishSecurityHandlers">
            <summary>
            List of handlers that protect stream publishing.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Adapter.ApplicationAdapter._playbackSecurityHandlers">
            <summary>
            List of handlers that protect stream playback.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.#ctor">
            <summary>
            Initializes a new instance of the ApplicationAdapter class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.Start(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Starts scope. Scope can be both application or room level.
            </summary>
            <param name="scope">Scope object.</param>
            <returns>true if scope can be started, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.Stop(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Stops scope handling (that is, stops application if given scope is app
            level scope and stops room handling if given scope has lower scope level).
            </summary>
            <param name="scope">Scope to stop.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.Join(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Adds client to scope. Scope can be both application or room. Can be
            applied to both application scope and scopes of lower level.
            </summary>
            <param name="client">Client object.</param>
            <param name="scope">Scope object.</param>
            <returns>true to allow, false to deny join.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.Leave(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Disconnects client from scope. Can be applied to both application scope
            and scopes of lower level.
            </summary>
            <param name="client">Client object.</param>
            <param name="scope">Scope object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.AddListener(FluorineFx.Messaging.Adapter.IApplication)">
            <summary>
            Register listener that will get notified about application events. Please
            note that return values (e.g. from IApplication.AppStart(IScope))
            will be ignored for listeners.
            </summary>
            <param name="listener">Application listener.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RemoveListener(FluorineFx.Messaging.Adapter.IApplication)">
            <summary>
            Unregister handler that will not get notified about application events
            any longer.
            </summary>
            <param name="listener">Application listener.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RejectClient">
            <summary>
            Rejects the currently connecting client without a special error message.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RejectClient(System.Object)">
            <summary>
            Rejects the currently connecting client with the specified reason.
            </summary>
            <param name="reason">Reason object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.Connect(FluorineFx.Messaging.Api.IConnection,FluorineFx.Messaging.Api.IScope,System.Object[])">
            <summary>
            Returns connection result for given scope and parameters. 
            Whether the scope is room or application level scope, this method distinguishes it and acts accordingly.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="scope">Scope object.</param>
            <param name="parameters">List of params passed to connection handler.</param>
            <returns>true if connect is successful, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.Disconnect(FluorineFx.Messaging.Api.IConnection,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Returns disconnection result for given scope and parameters. 
            Whether the scope is room or application level scope, this method distinguishes it and acts accordingly.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="scope">true if disconnect is successful, false otherwise.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.AppConnect(FluorineFx.Messaging.Api.IConnection,System.Object[])">
            <summary>
            Handler method. Called every time new client connects (that is, new IConnection object is created after call from a SWF movie) to the application.
            
            You override this method to pass additional data from client to server application using <code>NetConnection.connect</code> method.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="parameters">List of parameters after connection URL passed to <code>NetConnection.connect</code> method.</param>
            <returns>true if connect is successful, false otherwise.</returns>
            <example>
            <p><strong>Client-side:</strong><br />
            <code>NetConnection.connect("rtmp://localhost/app", "silver");</code></p>
            
            <p><strong>Server-side:</strong><br />
            <code>if (parameters.Length > 0) Trace.WriteLine("Theme selected: " + parameters[0]);</code></p>
            </example>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.AppDisconnect(FluorineFx.Messaging.Api.IConnection)">
            <summary>
            Handler method. Called every time client disconnects from the application.
            </summary>
            <param name="connection">Disconnected connection object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RoomConnect(FluorineFx.Messaging.Api.IConnection,System.Object[])">
            <summary>
            Handler method. Called every time new client connects (that is, new IConnection object is created after call from a SWF movie) to the application.
            
            You override this method to pass additional data from client to server application using <c>NetConnection.connect</c> method.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="parameters">List of paramaters passed to room scope.</param>
            <returns>true if connect is successful, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RoomDisconnect(FluorineFx.Messaging.Api.IConnection)">
            <summary>
            Handler method. Called every time client disconnects from the application.
            </summary>
            <param name="connection">Disconnected connection object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.AppStart(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Handler method. Called when an application scope is started.
            </summary>
            <param name="application">Application scope.</param>
            <returns>true if started successful, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RoomStart(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Handler method. Called when a room scope is started.
            </summary>
            <param name="room">Room scope.</param>
            <returns>true if started successful, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.AppStop(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Handler method. Called when an application scope is stopped.
            </summary>
            <param name="application">Application scope.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RoomStop(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Handler method. Called when a room scope is stopped.
            </summary>
            <param name="room">Room scope.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.AppJoin(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Handler method. Called every time client joins application scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="application">Application scope.</param>
            <returns>true if join is successful, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.AppLeave(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Handler method. Called every time client leaves application scope.
            </summary>
            <param name="client">Client object that left.</param>
            <param name="application">Application scope.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RoomJoin(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Handler method. Called every time client joins room scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="room">Room scope.</param>
            <returns>true if join is successful, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RoomLeave(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Handler method. Called every time client leaves room scope.
            </summary>
            <param name="client">Client object that left.</param>
            <param name="room">Room scope.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.GetSharedObjectNames(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Returns a collection of available SharedObject names.
            </summary>
            <param name="scope">Scope that SharedObjects belong to.</param>
            <returns>Collection of available SharedObject names.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.CreateSharedObject(FluorineFx.Messaging.Api.IScope,System.String,System.Boolean)">
            <summary>
            Creates a new shared object for given scope. Server-side shared objects
            (also known as Remote SO) are special kind of objects synchronized between clients.
            <para>
            To get an instance of RSO at client-side, use <c>SharedObject.getRemote()</c>.
            </para>
            SharedObjects can be persistent and transient. Persistent RSO are stateful, i.e. store their data between sessions.
            If you need to store some data on server while clients go back and forth use persistent SO, otherwise perfer usage of transient for
            extra performance.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <param name="persistent">Whether SharedObject instance should be persistent or not.</param>
            <returns>true if SO was created, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.GetSharedObject(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Returns shared object from given scope by name.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <returns>Shared object instance with the specifed name.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.GetSharedObject(FluorineFx.Messaging.Api.IScope,System.String,System.Boolean)">
            <summary>
            Returns shared object from given scope by name.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <param name="persistent">Whether SharedObject instance should be persistent or not.</param>
            <returns>Shared object instance with the specifed name.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.HasSharedObject(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Checks whether there is a SharedObject with given scope and name.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <returns>true if SharedObject exists, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.ClearSharedObjects(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            <para>
            Deletes persistent shared objects specified by name and clears all
            properties from active shared objects (persistent and nonpersistent). The
            name parameter specifies the name of a shared object, which can include a
            slash (/) as a delimiter between directories in the path. The last
            element in the path can contain wildcard patterns (for example, a
            question mark [?] and an asterisk [*]) or a shared object name. The
            ClearSharedObjects() method traverses the shared object hierarchy along
            the specified path and clears all the shared objects. Specifying a slash
            (/) clears all the shared objects associated with an application
            instance.
            </para>
            The following values are possible for the soPath parameter:
            <list type="table">
            <listheader>
            <term>soPath parameter</term>
            <description>action</description>
            </listheader>
            <item><term></term>
            <description>clears all local and persistent shared objects associated with the instance</description></item>
            <item><term>/foo/bar</term>
            <description>clears the shared object /foo/bar; if bar is a directory name, no shared objects are deleted</description></item>
            <item><term>/foo/bar/*</term>
            <description>clears all shared objects stored under the instance directory</description></item>
            <item><term>/foo/bar.</term>
            <description>the bar directory is also deleted if no persistent shared objects are in use within this namespace</description></item>
            <item><term>/foo/bar/XX??</term>
            <description>clears all shared objects that begin with XX, followed by any two characters</description></item>
            </list>
            If a directory name matches this specification, all the shared objects within this directory are cleared.
            
            If you call the ClearSharedObjects() method and the specified path
            matches a shared object that is currently active, all its properties are
            deleted, and a "clear" event is sent to all subscribers of the shared
            object. If it is a persistent shared object, the persistent store is also cleared.
            </summary>
            <param name="scope">Scope that shared object belongs to.</param>
            <param name="name">Name of SharedObject.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.Start(FluorineFx.Configuration.ConfigurationSection)">
            <summary>
            Start service. 
            </summary>
            <param name="configuration">Application configuration.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.Shutdown">
            <summary>
            Shutdown service.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RegisterSharedObjectSecurity(FluorineFx.Messaging.Api.SO.ISharedObjectSecurity)">
            <summary>
            Adds handler that protects shared objects.
            </summary>
            <param name="handler">The ISharedObjectSecurity handler.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.UnregisterSharedObjectSecurity(FluorineFx.Messaging.Api.SO.ISharedObjectSecurity)">
            <summary>
            Removes handler that protects shared objects.
            </summary>
            <param name="handler">The ISharedObjectSecurity handler.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.GetSharedObjectSecurity">
            <summary>
            Gets the collection of security handlers that protect shared objects.
            </summary>
            <returns>Enumerator of ISharedObjectSecurity handlers.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RegisterStreamPublishSecurity(FluorineFx.Messaging.Api.Stream.IStreamPublishSecurity)">
            <summary>
            Add handler that protects stream publishing.
            </summary>
            <param name="handler">Handler to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.UnregisterStreamPublishSecurity(FluorineFx.Messaging.Api.Stream.IStreamPublishSecurity)">
            <summary>
            Remove handler that protects stream publishing.
            </summary>
            <param name="handler">Handler to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.GetStreamPublishSecurity">
            <summary>
            Returns handlers that protect stream publishing.
            </summary>
            <returns>Enumerator of handlers.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.RegisterStreamPlaybackSecurity(FluorineFx.Messaging.Api.Stream.IStreamPlaybackSecurity)">
            <summary>
            Add handler that protects stream playback.
            </summary>
            <param name="handler">Handler to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.UnregisterStreamPlaybackSecurity(FluorineFx.Messaging.Api.Stream.IStreamPlaybackSecurity)">
            <summary>
            Remove handler that protects stream playback.
            </summary>
            <param name="handler">Handler to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.GetStreamPlaybackSecurity">
            <summary>
            Returns handlers that protect stream plaback.
            </summary>
            <returns>Enumerator of handlers.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.GetBroadcastStreamNames(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Returns list of stream names broadcasted in scope. Broadcast stream name is somewhat different
            from server stream name. Server stream name is just an ID assigned to every created stream. Broadcast stream name
            is the name that is being used to subscribe to the stream at client side, that is, in <c>NetStream.play</c> call.
            </summary>
            <param name="scope">Scope to retrieve broadcasted stream names.</param>
            <returns>List of broadcasted stream names.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.InvokeClients(System.String,System.Object[],FluorineFx.Messaging.Api.Service.IPendingServiceCallback)">
            <summary>
            Invoke client with parameters and callback.
            </summary>
            <param name="method">Method name.</param>
            <param name="arguments">Invocation parameters passed to the method.</param>
            <param name="callback">Callback used to handle return values.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.InvokeClients(System.String,System.Object[],FluorineFx.Messaging.Api.Service.IPendingServiceCallback,System.Boolean)">
            <summary>
            Invoke client with parameters and callback.
            </summary>
            <param name="method">Method name.</param>
            <param name="arguments">Invocation parameters passed to the method.</param>
            <param name="callback">Callback used to handle return values.</param>
            <param name="ignoreSelf">Current client shoud be ignored.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.InvokeClients(System.String,System.Object[],FluorineFx.Messaging.Api.Service.IPendingServiceCallback,System.Boolean,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Invoke client with parameters and callback.
            </summary>
            <param name="method">Method name.</param>
            <param name="arguments">Invocation parameters passed to the method.</param>
            <param name="callback">Callback used to handle return values.</param>
            <param name="ignoreSelf">Current client shoud be ignored.</param>
            <param name="targetScope">Invoke clients subscribed to the specified Scope.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.CalculateClientBw">
            <summary>
            Start a bandwidth check.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.ApplicationAdapter.CalculateClientBw(FluorineFx.Messaging.Api.IConnection)">
            <summary>
            Start a bandwidth check.
            </summary>
            <param name="client">Connection object.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpHandler">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.BaseRtmpHandler">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.IRtmpHandler">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.IRtmpHandler.ConnectionOpened(FluorineFx.Messaging.Rtmp.RtmpConnection)">
            <summary>
            Connection open event.
            </summary>
            <param name="connection">Connection object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.IRtmpHandler.MessageReceived(FluorineFx.Messaging.Rtmp.RtmpConnection,System.Object)">
            <summary>
            Message recieved.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="message">Message object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.IRtmpHandler.MessageSent(FluorineFx.Messaging.Rtmp.RtmpConnection,System.Object)">
            <summary>
            Message sent.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="message">Message object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.IRtmpHandler.ConnectionClosed(FluorineFx.Messaging.Rtmp.RtmpConnection)">
            <summary>
            Connection closed.
            </summary>
            <param name="connection">Connection object.</param>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_CONNECT">
            <summary>
            Connection Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_DISCONNECT">
            <summary>
            Disconnect Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_CREATE_STREAM">
            <summary>
            CreateStream Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_DELETE_STREAM">
            <summary>
            DeleteStream Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_CLOSE_STREAM">
            <summary>
            CloseStream Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_RELEASE_STREAM">
            <summary>
            ReleaseStream Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_PUBLISH">
            <summary>
            Publish Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_PAUSE">
            <summary>
            Pause Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_SEEK">
            <summary>
            Seek Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_PLAY">
            <summary>
            Play Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_STOP">
            <summary>
            Stop Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_RECEIVE_VIDEO">
            <summary>
            ReceiveVideo Action constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ACTION_RECEIVE_AUDIO">
            <summary>
            ReceiveAudio Action constant.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.#ctor">
            <summary>
            Initializes a new instance of the BaseRtmpHandler class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ConnectionOpened(FluorineFx.Messaging.Rtmp.RtmpConnection)">
            <summary>
            Connection open event.
            </summary>
            <param name="connection">Connection object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.MessageReceived(FluorineFx.Messaging.Rtmp.RtmpConnection,System.Object)">
            <summary>
            Message recieved.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="obj">Message object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.MessageSent(FluorineFx.Messaging.Rtmp.RtmpConnection,System.Object)">
            <summary>
            Message sent.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="message">Message object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.ConnectionClosed(FluorineFx.Messaging.Rtmp.RtmpConnection)">
            <summary>
            Connection closed.
            </summary>
            <param name="connection">Connection object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.OnStreamBytesRead(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.Event.BytesRead)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
            <param name="channel"></param>
            <param name="source"></param>
            <param name="streamBytesRead"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.OnChunkSize(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.Event.ChunkSize)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
            <param name="channel"></param>
            <param name="source"></param>
            <param name="chunkSize"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.OnPing(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.Event.Ping)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
            <param name="channel"></param>
            <param name="source"></param>
            <param name="ping"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.OnInvoke(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.Event.Notify)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
            <param name="channel"></param>
            <param name="header"></param>
            <param name="invoke"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.OnSharedObject(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.SO.SharedObjectMessage)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
            <param name="channel"></param>
            <param name="header"></param>
            <param name="message"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.OnFlexInvoke(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.Event.FlexInvoke)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
            <param name="channel"></param>
            <param name="header"></param>
            <param name="invoke"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.OnServerBW(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.Event.ServerBW)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
            <param name="channel"></param>
            <param name="source"></param>
            <param name="serverBW"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.OnClientBW(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.Event.ClientBW)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
            <param name="channel"></param>
            <param name="source"></param>
            <param name="clientBW"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.BaseRtmpHandler.HandlePendingCallResult(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Rtmp.Event.Notify)">
            <summary>
            Handler for pending call result. Dispatches results to all pending call handlers.
            </summary>
            <param name="connection">Connection.</param>
            <param name="invoke">Pending call result event context.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpHandler.InvokeCall(FluorineFx.Messaging.Rtmp.RtmpConnection,FluorineFx.Messaging.Api.Service.IServiceCall,System.Object)">
            <summary>
            Remoting call invocation handler.
            </summary>
            <param name="connection">RTMP connection.</param>
            <param name="serviceCall">Service call.</param>
            <param name="service">Server-side service object.</param>
            <returns><code>true</code> if the call was performed, otherwise <code>false</code>.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.FrameType">
            <summary>
            Videoframe type.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.VideoData">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.BaseEvent">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.IRtmpEvent">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Event.IEvent">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Event.IEvent.EventType">
            <summary>
            Gets event type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Event.IEvent.Object">
            <summary>
            Gets event context object.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Event.IEvent.HasSource">
            <summary>
            Gets whether event has source (event listeners).
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Event.IEvent.Source">
            <summary>
            Gets event listener.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.IRtmpEvent.DataType">
            <summary>
            Gets the data type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.IRtmpEvent.Header">
            <summary>
            Gets or sets the RTMP packet header.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.IRtmpEvent.Timestamp">
            <summary>
            Gets or sets the event timestamp.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Event.BaseEvent._header">
            <summary>
            Event RTMP packet header.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Event.BaseEvent._object">
            <summary>
            Event target object.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Event.BaseEvent._timestamp">
            <summary>
            Event timestamp.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Event.BaseEvent._dataType">
            <summary>
            Event data type.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Event.BaseEvent._eventType">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Event.BaseEvent._source">
            <summary>
            Event listener.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.BaseEvent.EventType">
            <summary>
            Gets or sets event type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.BaseEvent.Header">
            <summary>
            Gets or sets the RTMP packet header.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.BaseEvent.Object">
            <summary>
            Gets event context object.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.BaseEvent.Timestamp">
            <summary>
            Gets or sets the event timestamp.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.BaseEvent.DataType">
            <summary>
            Gets or sets the data type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.BaseEvent.Source">
            <summary>
            Gets or sets the event listener.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.BaseEvent.HasSource">
            <summary>
            Gets whether event has source (event listeners).
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.IStreamData">
            <summary>
            Stream data packet.
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Event.VideoData._data">
            <summary>
            Video data.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Event.VideoData._frameType">
            <summary>
            Frame type, unknown by default.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.ServerBW">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Event.ServerBW.ToString">
            <summary>
            Returns a string that represents the current ServerBW object.
            </summary>
            <returns>A string that represents the current ServerBW object.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.ServerBW.Bandwidth">
            <summary>
            Gets or sets the bandwidth value.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.AbstractFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.IFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.IFilter.Invoke(FluorineFx.Messaging.Endpoints.AMFContext)">
            <summary>
            Invokes the filter.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:FluorineFx.Messaging.Endpoints.Filter.IFilter.Next">
            <summary>
            Gets or sets the next filter.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.AbstractFilter.#ctor">
            <summary>
            Initializes a new instance of the AbstractFilter class.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.FactorySettings">
            <summary>
            Contains the properties for configuring Flex factories.
            This is the <b>factories</b> element in the services-config.xml file.
            Flex factories are global, a single FlexFactory instance is created for each Flex-enabled web application.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.FactorySettings.Id">
            <summary>
            Gets or sets the identity of the factory.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.FactorySettings.ClassId">
            <summary>
            Gets the IFlexFactory type.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.FactorySettingsCollection">
            <summary>
            Strongly typed FactorySettings collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.FactorySettingsCollection.#ctor">
            <summary>
            Initializes a new instance of the FactorySettingsCollection class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.FactorySettingsCollection.Add(FluorineFx.Messaging.Config.FactorySettings)">
            <summary>
            Adds a FactorySettings to the collection.
            </summary>
            <param name="value">The FactorySettings to add to the collection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.FactorySettingsCollection.IndexOf(FluorineFx.Messaging.Config.FactorySettings)">
            <summary>
            Determines the index of a specific item in the collection. 
            </summary>
            <param name="value">The FactorySettings to locate in the collection.</param>
            <returns>The index of value if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.FactorySettingsCollection.Insert(System.Int32,FluorineFx.Messaging.Config.FactorySettings)">
            <summary>
            Inserts a FactorySettings item to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The FactorySettings to insert into the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.FactorySettingsCollection.Remove(FluorineFx.Messaging.Config.FactorySettings)">
            <summary>
            Removes the first occurrence of a specific FactorySettings from the collection.
            </summary>
            <param name="value">The FactorySettings to remove from the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.FactorySettingsCollection.Contains(FluorineFx.Messaging.Config.FactorySettings)">
            <summary>
            Determines whether the collection contains a specific FactorySettings value.
            </summary>
            <param name="value">The FactorySettings to locate in the collection.</param>
            <returns>true if the FactorySettings is found in the collection; otherwise, false.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.FactorySettingsCollection.Item(System.Int32)">
            <summary>
            Gets or sets the FactorySettings element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Config.DestinationSettings">
            <summary>
            Contains the properties for configuring service adapters.
            This is the <b>destination</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Config.DestinationSettings.FluorineDestination">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Config.DestinationSettings.FluorineServiceBrowserDestination">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Config.DestinationSettings.FluorineManagementDestination">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Config.DestinationSettings.FluorineCodeGeneratorDestination">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Config.DestinationSettings.FluorineSqlServiceDestination">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.DestinationSettings.GetRoles">
            <summary>
            Returns the specified roles for a secure destination.
            </summary>
            <returns>List of role names.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.PropertiesNode">
            <summary>
            Gets the properties XmlNode object. Custom adapters can use this object to query additional settings.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.Id">
            <summary>
            Gets the identity of the destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.ServiceSettings">
            <summary>
            Gets the service settings of the destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.Adapter">
            <summary>
            Gets the referenced adapter settings of the destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.Properties">
            <summary>
            Gets destination properties.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.SecuritySettings">
            <summary>
            Gets security settings of the destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.NetworkSettings">
            <summary>
            Gets network settings of the destination. 
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.MsmqSettings">
            <summary>
            Gets MSMQ settings of the destination if applicable.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.MetadataSettings">
            <summary>
            Gets metadat settings of the destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.ServerSettings">
            <summary>
            Gets server settings of the destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettings.Channels">
            <summary>
            Gets channel definitions of the destination.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.DestinationSettingsCollection">
            <summary>
            Strongly typed DestinationSettings collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.DestinationSettingsCollection.#ctor">
            <summary>
            Initializes a new instance of the DestinationSettingsCollection class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.DestinationSettingsCollection.Add(FluorineFx.Messaging.Config.DestinationSettings)">
            <summary>
            Adds a DestinationSettings to the collection.
            </summary>
            <param name="value">The DestinationSettings to add to the collection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.DestinationSettingsCollection.IndexOf(FluorineFx.Messaging.Config.DestinationSettings)">
            <summary>
            Determines the index of a specific item in the collection. 
            </summary>
            <param name="value">The DestinationSettings to locate in the collection.</param>
            <returns>The index of value if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.DestinationSettingsCollection.Insert(System.Int32,FluorineFx.Messaging.Config.DestinationSettings)">
            <summary>
            Inserts a DestinationSettings item to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The DestinationSettings to insert into the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.DestinationSettingsCollection.Remove(FluorineFx.Messaging.Config.DestinationSettings)">
            <summary>
            Removes the first occurrence of a specific DestinationSettings from the collection.
            </summary>
            <param name="value">The DestinationSettings to remove from the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.DestinationSettingsCollection.Contains(FluorineFx.Messaging.Config.DestinationSettings)">
            <summary>
            Determines whether the collection contains a specific DestinationSettings value.
            </summary>
            <param name="value">The DestinationSettings to locate in the collection.</param>
            <returns>true if the DestinationSettings is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.DestinationSettingsCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains a destination with a specific identity.
            </summary>
            <param name="key">The destination identity.</param>
            <returns>true if the DestinationSettings is found in the collection; otherwise, false.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettingsCollection.Item(System.Int32)">
            <summary>
            Gets or sets the DestinationSettings element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>        
        </member>
        <member name="P:FluorineFx.Messaging.Config.DestinationSettingsCollection.Item(System.String)">
            <summary>
            Gets or sets the DestinationSettings element with the specified key.
            </summary>
            <param name="key">The id of the DestinationSettings element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Service.IPendingServiceCall">
            <summary>
            IPendingServiceCall is a service call with a list of callbacks.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Service.IServiceCall">
            <summary>
            Container for a Service Call.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Service.IServiceCall.IsSuccess">
            <summary>
            Gets a value indicating if the call was successful or not.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Service.IServiceCall.ServiceMethodName">
            <summary>
            Gets service method name.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Service.IServiceCall.ServiceName">
            <summary>
            Gets service name.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Service.IServiceCall.Arguments">
            <summary>
            Gets array of service method arguments.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Service.IServiceCall.Status">
            <summary>
            Gets or sets service call status.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Service.IServiceCall.Exception">
            <summary>
            Get or sets service call exception.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.IPendingServiceCall.RegisterCallback(FluorineFx.Messaging.Api.Service.IPendingServiceCallback)">
            <summary>
            Registers callback object that implements IPendingServiceCallback interface.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.IPendingServiceCall.UnregisterCallback(FluorineFx.Messaging.Api.Service.IPendingServiceCallback)">
            <summary>
            Unregisters callback object that implements IPendingServiceCallback interface.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.IPendingServiceCall.GetCallbacks">
            <summary>
            Returns list of callback objects that implements IPendingServiceCallback.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Service.IPendingServiceCall.Result">
            <summary>
            Gets or sets the service call result.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IConnection">
            <summary>
            The connection object. Each connection has an associated client and scope. 
            Connections may be persistent, polling, or transient.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.ICoreObject">
            <summary>
            Base interface containing common methods and attributs for all core objects.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Event.IEventDispatcher">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Event.IEventDispatcher.DispatchEvent(FluorineFx.Messaging.Api.Event.IEvent)">
            <summary>
            Dispatches an event.
            </summary>
            <param name="evt">Event to dispatch.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Event.IEventListener">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Event.IEventListener.NotifyEvent(FluorineFx.Messaging.Api.Event.IEvent)">
            <summary>
            Event notification. 
            </summary>
            <param name="evt">The event object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IConnection.Initialize(FluorineFx.Messaging.Api.IClient)">
            <summary>
            Initialize the connection.
            </summary>
            <param name="client">Client object associated with connection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IConnection.Connect(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Try to connect to the scope.
            </summary>
            <param name="scope">Scope object.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IConnection.Connect(FluorineFx.Messaging.Api.IScope,System.Object[])">
            <summary>
            Try to connect to the scope with a list of connection parameters.
            </summary>
            <param name="scope">Scope object.</param>
            <param name="args">Connections parameters.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IConnection.Timeout">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IConnection.Close">
            <summary>
            Close the connection. This will disconnect the client from the associated scope.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IConnection.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IConnection.Ping">
            <summary>
            Start measuring the roundtrip time for a packet on the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.IsConnected">
            <summary>
            Gets whether the client is connected to the scope.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.Parameters">
            <summary>
            Returns the parameters of the "connect" call.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.Client">
            <summary>
            Gets the client object associated with this connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.Scope">
            <summary>
            Get the scope this client is connected to.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.BasicScopes">
            <summary>
            Gets the basic scopes this connection has subscribed.  This list will
            contain the shared objects and broadcast streams the connection connected to.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.ConnectionId">
            <summary>
            Gets the connection id.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.SessionId">
            <summary>
            Gets the session id.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.ObjectEncoding">
            <summary>
            Gets the object encoding (AMF version) for this connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.ReadBytes">
            <summary>
            Gets the total number of bytes read from the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.WrittenBytes">
            <summary>
            Gets the total number of bytes written to the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.ReadMessages">
            <summary>
            Gets the total number of messages read from the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.WrittenMessages">
            <summary>
            Gets the total number of messages written to the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.DroppedMessages">
            <summary>
            Gets the total number of messages that have been dropped.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.PendingMessages">
            <summary>
            Gets the total number of messages that are pending to be sent to the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.ClientBytesRead">
            <summary>
            Gets the number of written bytes the client reports to have received.
            This is the last value of the BytesRead message received from a client.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.LastPingTime">
            <summary>
            Gets roundtrip time of last ping command.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.ClientLeaseTime">
            <summary>
            This property supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.IsFlexClient">
            <summary>
            This property supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.RemoteEndPoint">
            <summary>
            Gets the network endpoint.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnection.Path">
            <summary>
            Gets the path for this connection. This is not updated if you switch scope.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IClient">
            <summary>
            The client object represents a single client. One client may have multiple connections to different scopes on the same host.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.Disconnect">
            <summary>
            Closes all the connections.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.Timeout">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.GetPendingMessages(System.Int32)">
            <summary>
            Gets pending messages.
            </summary>
            <param name="waitIntervalMillis"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.RegisterMessageClient(FluorineFx.Messaging.Api.IMessageClient)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="messageClient"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.UnregisterMessageClient(FluorineFx.Messaging.Api.IMessageClient)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="messageClient"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.AddSessionDestroyedListener(FluorineFx.Context.ISessionListener)">
            <summary>
            Adds a session destroy listener that will be notified when the session is destroyed.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.RemoveSessionDestroyedListener(FluorineFx.Context.ISessionListener)">
            <summary>
            Removes a session destroy listener.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.Renew">
            <summary>
            Renews a lease.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.Renew(System.Int32)">
            <summary>
            Renews a lease.
            </summary>
            <param name="clientLeaseTime">The amount of time in minutes before client times out.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.Register(FluorineFx.Messaging.Api.IConnection)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClient.Unregister(FluorineFx.Messaging.Api.IConnection)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IClient.Id">
            <summary>
            Gets the client identity.
            </summary>
            <remarks>
            This will be generated by the server if not passed upon connection from client-side Flex/Flash app.
            </remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IClient.Scopes">
            <summary>
            Get a set of scopes the client is connected to.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IClient.Connections">
            <summary>
            Get a set of connections of a given scope.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IClient.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IClient.ClientLeaseTime">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3DBNullWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.IAMFWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.Writers.IAMFWriter.WriteData(FluorineFx.IO.AMFWriter,System.Object)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="writer"></param>
            <param name="data"></param>
        </member>
        <member name="P:FluorineFx.IO.Writers.IAMFWriter.IsPrimitive">
            <summary>
            Gets a value indicating whether the AMFWriter Type is one of the primitive types.
            </summary>
            <remarks>The primitive types are those serialized as String, Number, Boolean, Date (CacheResult is treated also as a primitive type)</remarks>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3StringReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.IAMFReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.Readers.IAMFReader.ReadData(FluorineFx.IO.AMFReader)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Data.MessageBatch">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.DataSyncException">
            <summary>
            A DataSyncException describes a data conflict that arises as a result of a client attempt to commit a "sync" DataService operation. It is propagated to the client, and handled as the trigger for a conflict event.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.MessageException">
            <summary>
            The MessageException class is used to report exceptions within the messaging system.
            </summary>
        </member>
        <member name="T:FluorineFx.Exceptions.FluorineException">
            <summary>
            The exception that is the base class for Fluorine exceptions.
            </summary>
        </member>
        <member name="M:FluorineFx.Exceptions.FluorineException.#ctor">
            <summary>
            Initializes a new instance of the FluorineException class.
            </summary>
        </member>
        <member name="M:FluorineFx.Exceptions.FluorineException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FluorineException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>			
        </member>
        <member name="M:FluorineFx.Exceptions.FluorineException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FluorineException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>	
            <remarks>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.</remarks>			
        </member>
        <member name="M:FluorineFx.Exceptions.FluorineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the FluorineException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageException.#ctor">
            <summary>
            Initializes a new instance of the MessageException class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageException.#ctor(FluorineFx.ASObject)">
            <summary>
            Initializes a new instance of the MessageException class.
            </summary>
            <param name="extendedData">Additional information.</param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the MessageException class.
            </summary>
            <param name="inner">Reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MessageException class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>			
        </member>
        <member name="M:FluorineFx.Messaging.MessageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the FluorineException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>	
            <remarks>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.</remarks>			
        </member>
        <member name="M:FluorineFx.Messaging.MessageException.#ctor(System.Exception,FluorineFx.ASObject)">
            <summary>
            Initializes a new instance of the MessageException class.
            </summary>
            <param name="inner">Reference to the inner exception that is the cause of this exception.</param>
            <param name="extendedData">Additional information.</param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageException.#ctor(FluorineFx.ASObject,System.String)">
            <summary>
            Initializes a new instance of the MessageException class with a specified error message.
            </summary>
            <param name="extendedData">Additional information.</param>
            <param name="message">The error message that explains the reason for the exception.</param>			
        </member>
        <member name="M:FluorineFx.Messaging.MessageException.#ctor(FluorineFx.ASObject,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MessageException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="extendedData">Additional information.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">Reference to the inner exception that is the cause of this exception.</param>
            <remarks>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.</remarks>			
        </member>
        <member name="P:FluorineFx.Messaging.MessageException.FaultCode">
            <summary>
            Gets or sets the fault code for the error.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageException.RootCause">
            <summary>
            Root cause for the error.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageException.ExtendedData">
            <summary>
            Return additional information to the client as part of a message exception.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.DataSyncException.#ctor(System.Object,System.Collections.IList)">
            <summary>
            Initializes a new instance of the DataSyncException class.
            </summary>
            <param name="serverVersion">Version of the Object known to be in safe, correct state.</param>
            <param name="propertyNames">List of properties that are in conflict.</param>
        </member>
        <member name="P:FluorineFx.Data.DataSyncException.ServerObject">
            <summary>
            Gets the version of the Object known to be in safe, correct state.
            </summary>
        </member>
        <member name="P:FluorineFx.Data.DataSyncException.PropertyNames">
            <summary>
            Gets list of properties that are in conflict.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Messaging.IFilter">
            <summary>
            Filter marker interface groups consumer and provider interfaces
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IConsumer">
            <summary>
            Signature for the message consumer.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IMessageComponent">
            <summary>
            Message component handles out-of-band control messages.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageComponent.OnOOBControlMessage(FluorineFx.Messaging.Api.Messaging.IMessageComponent,FluorineFx.Messaging.Api.Messaging.IPipe,FluorineFx.Messaging.Api.Messaging.OOBControlMessage)">
            <summary>
            Handles out-of-band control message.
            </summary>
            <param name="source">Message component source.</param>
            <param name="pipe">Connection pipe.</param>
            <param name="oobCtrlMsg">Out-of-band control message</param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IProvider">
            <summary>
            Signature for message provider.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IPlaylist">
            <summary>
            Playlist.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylist.AddItem(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">Playlist item.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylist.AddItem(FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
            <summary>
            Adds an item to specific index.
            </summary>
            <param name="item">Playlist item.</param>
            <param name="index">Index in list.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylist.RemoveItem(System.Int32)">
            <summary>
            Removes an item from list.
            </summary>
            <param name="index">Index in list.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylist.RemoveAllItems">
            <summary>
            Remove all items.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylist.GetItem(System.Int32)">
            <summary>
            Returns the item at the specified index.
            </summary>
            <param name="index">Item index.</param>
            <returns>Item at the specified index in list.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylist.PreviousItem">
            <summary>
            Go for the previous played item.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylist.NextItem">
            <summary>
            Go for next item decided by controller logic.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylist.SetItem(System.Int32)">
            <summary>
            Set the current item for playing.
            </summary>
            <param name="index">Position in list</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylist.SetPlaylistController(FluorineFx.Messaging.Api.Stream.IPlaylistController)">
            <summary>
            Sets list controller.
            </summary>
            <param name="controller">Playlist controller.</param>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlaylist.Count">
            <summary>
            Gets the number of items in list.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlaylist.CurrentItemIndex">
            <summary>
            Gets the currently playing item index.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlaylist.CurrentItem">
            <summary>
            Gets the currently playing item.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlaylist.HasMoreItems">
            <summary>
            Gets whether the playlist has more items after the currently playing one.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlaylist.IsRandom">
            <summary>
            Gets or sets whether items are randomly played.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlaylist.IsRewind">
            <summary>
            Gets or sets whether rewind the list.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlaylist.IsRepeat">
            <summary>
            Gets or sets whether repeat playing an item.
            </summary>
        </member>
        <member name="T:FluorineFx.Scheduling.ISchedulingService">
            <summary>
            Service that supports periodic execution of jobs, adding, removing and getting their name as list.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.ISchedulingService.AddScheduledJob(System.Int32,FluorineFx.Scheduling.IScheduledJob)">
            <summary>
            Schedule a job for periodic execution.
            </summary>
            <param name="interval">Time in milliseconds between two notifications of the job.</param>
            <param name="job">The job to trigger periodically.</param>
            <returns>The name of the scheduled job.</returns>
        </member>
        <member name="M:FluorineFx.Scheduling.ISchedulingService.AddScheduledJob(System.Int32,System.Int32,FluorineFx.Scheduling.IScheduledJob)">
            <summary>
            Schedule a job for periodic execution.
            </summary>
            <param name="interval">Time in milliseconds between two notifications of the job.</param>
            <param name="repeatCount">Repeat counter.</param>
            <param name="job">The job to trigger periodically.</param>
            <returns>The name of the scheduled job.</returns>
        </member>
        <member name="M:FluorineFx.Scheduling.ISchedulingService.AddScheduledOnceJob(System.Int64,FluorineFx.Scheduling.IScheduledJob)">
            <summary>
            Schedule a job for single execution in the future.  Please note
            that the jobs are not persisted.
            </summary>
            <param name="timeDelta">Time delta in milliseconds from the current date.</param>
            <param name="job">The job to trigger.</param>
            <returns>The name of the scheduled job.</returns>
        </member>
        <member name="M:FluorineFx.Scheduling.ISchedulingService.AddScheduledOnceJob(System.DateTime,FluorineFx.Scheduling.IScheduledJob)">
            <summary>
            Schedule a job for single execution at a given date. Please note that the jobs are not persisted.
            </summary>
            <param name="date">Date when the job should be executed.</param>
            <param name="job">The job to trigger.</param>
            <returns>The name of the scheduled job.</returns>
        </member>
        <member name="M:FluorineFx.Scheduling.ISchedulingService.RemoveScheduledJob(System.String)">
            <summary>
            Remove (delete) the <see cref="T:FluorineFx.Scheduling.IScheduledJob"/> with the given and any <see cref="T:FluorineFx.Scheduling.Trigger"/> s that reference it.
            </summary>
            <param name="jobName">The name of the job to stop.</param>
        </member>
        <member name="M:FluorineFx.Scheduling.ISchedulingService.GetScheduledJobNames">
            <summary>
            Return names of scheduled jobs.
            </summary>
            <returns>List of job names.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IServiceProvider">
            <summary>
            Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceProvider.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType or a null reference (Nothing in Visual Basic) if there is no service object of type serviceType.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IServiceContainer">
            <summary>
            Provides a container for services.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Adds the specified service to the scope.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="service">An instance of the service type to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the specified service to the scope.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="service">An instance of the service type to add.</param>
            <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceContainer.RemoveService(System.Type)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceContainer.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IBandwidthConfigure">
            <summary>
            Interface for setting/getting bandwidth configuration.
            
            Two properties are provided for bandwidth configuration. The property
            "channelBandwidth" is used to configure the bandwidth of each channel.
            The property "channelInitialBurst" is used to configure the initial
            bytes that can be sent to client in each channel.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IBandwidthConfigure.GetChannelBandwidth">
            <summary>
            Returns the bandwidth configure for 3 channels: audio, video, data and the overall bandwidth.
            The unit is bit per second. A value of -1 means "don't care" so that there's no limit on bandwidth for that channel.
            The last element is the overall bandwidth. If it's not -1, the value of the first three elements will be ignored.
            </summary>
            <returns>The 4-element array of bandwidth configuration.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IBandwidthConfigure.GetChannelInitialBurst">
            <summary>
            Returns the byte count of initial burst value for 3 channels: audio, video, data and the overall bandwidth.
            If the value is -1, the default will be used per the implementation of bandwidth controller.
            </summary>
            <returns>The 4-element array of byte count of initial burst value.</returns>
        </member>
        <member name="T:FluorineFx.Json.JavaScriptObjectConverter">
            <summary>
            Provides a type converter to convert JavaScriptArray objects to and from various other representations.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overloaded. Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:FluorineFx.Json.JavaScriptObject">
            <summary>
            Represents a JavaScript object.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JavaScriptObject"/> class.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptObject.#ctor(FluorineFx.Json.JavaScriptObject)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JavaScriptObject"/> class that
            contains values copied from the specified <see cref="T:FluorineFx.Json.JavaScriptObject"/>.
            </summary>
            <param name="javaScriptObject">The <see cref="T:FluorineFx.Json.JavaScriptObject"/> whose elements are copied to the new object.</param>
        </member>
        <member name="T:FluorineFx.Expression.OpUnaryMinus">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.UnaryOperator">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.BaseNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.FluorineAST">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Expression.FluorineAST.Creator">
            <summary>
            The global FluorineAST node factory
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.FluorineAST.#ctor">
            <summary>
            Create an instance
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.FluorineAST.#ctor(antlr.IToken)">
            <summary>
            Create an instance from a token
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.FluorineAST.initialize(antlr.collections.AST)">
            <summary>
            initialize this instance from an AST
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.FluorineAST.initialize(antlr.IToken)">
            <summary>
            initialize this instance from an IToken
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.FluorineAST.initialize(System.Int32,System.String)">
            <summary>
            initialize this instance from a token type number and a text
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.FluorineAST.setText(System.String)">
            <summary>
            sets the text of this node
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.FluorineAST.getText">
            <summary>
            gets the text of this node
            </summary>
        </member>
        <member name="P:FluorineFx.Expression.FluorineAST.Type">
            <summary>
            gets or sets the token type of this node
            </summary>
        </member>
        <member name="P:FluorineFx.Expression.FluorineAST.Text">
            <summary>
            gets or sets the text of this node
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.IExpression">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.IExpression.Evaluate(System.Object,System.Collections.IDictionary)">
            <summary>
            Evaluates expression value.
            </summary>
            <param name="context">Object to evaluate expression against.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Value of the expression.</returns>
        </member>
        <member name="T:FluorineFx.Expression.IExpressionGenerator">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.BaseNode.Evaluate(System.Object,FluorineFx.Expression.BaseNode.EvaluationContext)">
            <summary>
            Returns node's value for the given context.
            </summary>
            <returns>Node's value.</returns>
        </member>
        <member name="M:FluorineFx.Expression.BaseNode.EvaluateInternal(System.Object,FluorineFx.Expression.BaseNode.EvaluationContext)">
            <summary>
            Called internally during expression evaluation
            </summary>
            <param name="context">Object to evaluate node against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Expression.BaseNode.EvaluationContext">
            <summary>
            Holds the state during evaluating an expression.
            </summary>
        </member>
        <member name="F:FluorineFx.Expression.BaseNode.EvaluationContext.RootContext">
            <summary>
            Gets/Sets the root context of the current evaluation
            </summary>
        </member>
        <member name="F:FluorineFx.Expression.BaseNode.EvaluationContext.ThisContext">
            <summary>
            Gets/Sets the current context of the current evaluation
            </summary>
        </member>
        <member name="F:FluorineFx.Expression.BaseNode.EvaluationContext.Variables">
            <summary>
            Gets/Sets global variables of the current evaluation
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.BaseNode.EvaluationContext.#ctor(System.Object,System.Collections.IDictionary)">
            <summary>
            Initializes a new EvaluationContext instance.
            </summary>
            <param name="rootContext">The root context for this evaluation</param>
            <param name="globalVariables">dictionary of global variables used during this evaluation</param>
        </member>
        <member name="M:FluorineFx.Expression.BaseNode.EvaluationContext.SwitchThisContext">
            <summary>
            Switches current ThisContext.
            </summary>
        </member>
        <member name="P:FluorineFx.Expression.BaseNode.EvaluationContext.RootContextType">
            <summary>
            Gets the type of the RootContext
            </summary>
        </member>
        <member name="P:FluorineFx.Expression.UnaryOperator.Operand">
            <summary>
            Gets the operand.
            </summary>
            <value>The operand.</value>
        </member>
        <member name="T:FluorineFx.Expression.OpIn">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.BinaryOperator">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Base class for unary operators.
            </summary>
        </member>
        <member name="P:FluorineFx.Expression.BinaryOperator.Left">
            <summary>
            Gets the left operand.
            </summary>
            <value>The left operand.</value>
        </member>
        <member name="P:FluorineFx.Expression.BinaryOperator.Right">
            <summary>
            Gets the right operand.
            </summary>
            <value>The right operand.</value>
        </member>
        <member name="T:FluorineFx.Expression.BooleanLiteralNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.SetBase">
            <summary>
            Sorted set of objects; depending on constructor parameters, implements
            regular set (equal members are not permitted), or multiset (equal members are OK).
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.ISet">
            <summary>
            Sorted set or multiset of objects.
            </summary>
            <remarks>
            ISet represents a modifiable collection of objects that are sorted in 
            ascending order to given Comparer. Derived classes may or may not
            permit duplicate (equivalent) objects.
            </remarks>
        </member>
        <member name="T:FluorineFx.Collections.IModifiableCollection">
            <summary>
            Modifiable and searchable collection.
            </summary>
            <remarks>
            <p>
            Unlike <b>IList</b>, modifiable collection may not support access to
            its elements by index.
            </p>
            <p>
            In order for <b>IModifiableCollection</b> methods to work adequately,
            member objects must at least properly implement Object.Equals().
            It must be 
            <list type="number">
            <item>Reflexive: <c>a.Equals(a)</c> is always true).</item>
            <item>Commutative: <c>a.Equals(b)</c> returns the same value as <c>b.Equals(a))</c></item> 
            <item>Transitive: if <c>a.Equals(b)</c> and <c>b.Equals(c)</c> then <c>a.Equals(c)</c>.</item>
            </list>
            </p>
            <p>
            Implementing classes may impose further requirements on member objects.
            </p>
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.IModifiableCollection.Add(System.Object)">
            <summary>
            Adds object to collection.
            Add(null) is a no-op.
            </summary>
            <param name="key">Object to add.</param>
            <returns>
            Returns true if new object has been added to the collection (Count has been incremented).
            Returns false if old object equal to key has been replaced with key (Count has not changed).
            The latter may happen with collection like set.
            </returns>
        </member>
        <member name="M:FluorineFx.Collections.IModifiableCollection.AddIfNotContains(System.Object)">
            <summary>
            Adds key to the collection only if it does not already contain an equal key.
            AddIfNotContains(null) is a no-op.
            </summary>
            <param name="key">Object to add</param>
            <returns>true if object has been added and Count has been incremented; false otherwise</returns>
        </member>
        <member name="M:FluorineFx.Collections.IModifiableCollection.Remove(System.Object)">
            <summary>
            Removes from collection all objects eqial to key.
            Remove(null) is a no-op.
            </summary>
            <param name="key">Object to remove.</param>
            <returns>Total number of objects removed from the collection (may be 0, 1, or more).</returns>
        </member>
        <member name="M:FluorineFx.Collections.IModifiableCollection.Clear">
            <summary>
            Removes all objects from the collection. 
            When this method returns, Count is 0.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.IModifiableCollection.Find(System.Object)">
            <summary>
            Finds first object in the collection that is equal to key.
            </summary>
            <param name="key">Object to look for.</param>
            <returns>First object that equals to key, or null if no such object exists.
            Find(null) always returns null.</returns>
        </member>
        <member name="M:FluorineFx.Collections.IModifiableCollection.FindAll(System.Object)">
            <summary>
            Finds all objects in the collection that are equal to key.
            </summary>
            <param name="key">Object to look for.</param>
            <returns>ICollection that iterates through objects equal to key.
            Resulting collection may be empty.
            Find(null) returns an valid reference to an empty collection.</returns>
        </member>
        <member name="P:FluorineFx.Collections.IModifiableCollection.IsReadOnly">
            <summary>
            Returns true if collection is read-only and modifications are disabled.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.IReversible">
            <summary>
            Reversible container.
            </summary>
            <remarks>
            Reversible container can be traversed from end to beginning.
            </remarks>
        </member>
        <member name="P:FluorineFx.Collections.IReversible.Reversed">
            <summary>
            Gets enumerable that traverses the container in reversed order.
            </summary>
            <example>
            IReversible container = ...;
            foreach (object obj in container.Reversed) ...;
            </example>
        </member>
        <member name="P:FluorineFx.Collections.ISet.Comparer">
            <summary>
            Returns comparer object used by the set.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.#ctor(System.Collections.IComparer,System.Boolean)">
            <summary>
            Creates an instance of SetBase.
            </summary>
            <param name="comparer">Comparer that specifies sort order of the elements.</param>
            <param name="allowDuplicates">Whether multiple duplicate (equivalent) elements are allowed.</param>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.Equals(System.Object)">
            <summary>
            Compares this to parameter.
            </summary>
            <remarks>
            If obj is not enumerable, returns false.
            If obj is enumerable, compares all members using <c>Comparer.Default</c>.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.GetHashCode">
            <summary>
            Exists just to silence compiler warning.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the set.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies set to an array.
            </summary>
            <remarks>
            <para>All items in the set must be castable to the type of the array. Otherwise,
            <c>InvalidCastException</c> will be thrown.</para>
            <para><b>array</b> must be one-dimensional. Otherwise <c>ArgumentException</c> is thrown.</para>
            <para><b>index</b> must be within valid range for the <b>array</b>. Otherwise <c>ArgumentOutOfRangeException</c> is thrown.</para>
            <para><b>array</b> must have enough space after <b>index</b> to fit all elements of the set. Otherwise <c>ArgumentOutOfRangeException</c> is thrown.</para>
            <para>Elements are put into the array in ascending sort order.</para>
            </remarks>
            <param name="array">Array to copy to.</param>
            <param name="index">Index to start from.</param>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.Add(System.Object)">
            <summary>
            Adds object to the set, preserving order.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.AddIfNotContains(System.Object)">
            <summary>
            Adds object to the set only if the set contains no equal object(s).
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.Remove(System.Object)">
            <summary>
            Removes object(s) from the set.
            </summary>
            <remarks>
            All objects equal to <b>key</b> are removed.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.Clear">
            <summary>
            Removes all objects from the set.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.Find(System.Object)">
            <summary>
            Finds object in the set.
            </summary>
            <returns>First object equal to <b>obj</b>, or null if not found.</returns>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.FindAll(System.Object)">
            <summary>
            Finds object(s) in the set.
            </summary>
            <returns>Collection of objects equal to <b>obj</b>.</returns>
            <remarks>
            If no elements equal to <b>obj</b> are found in the set, returns 
            valid reference to an empty collection.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.CompareTo(System.Object)">
            <summary>
            Compares this set to another object.
            </summary>
            <remarks>
            If obj is not an enumerable, returns -1 (this &lt; obj)
            Otherwise performs member-to-member lexicographical comparison of two enumerables using default comparer.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.SetBase.CheckComparer(FluorineFx.Collections.ISet)">
            <summary>
            Checks that the other set has compatible comparer.
            </summary>
            <remarks>
            Tries to check that comparer object of the other set is the same
            as comparer object of this set. Since comparers don't provide adequate
            imlpementation of Equals(), we just check that comparer types are the same.
            Throws exception if there is an incompatibility.
            </remarks>
        </member>
        <member name="P:FluorineFx.Collections.SetBase.IsSynchronized">
            <summary>
            Indicates whether access to the set is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.SetBase.Count">
            <summary>
            Returns number of elements in the set.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.SetBase.SyncRoot">
            <summary>
            An object that can be used to synchronize access to the set.
            </summary>
            <remarks>
            <para>Returns <c>this</c> for set objects that store their members themselves.</para>
            <para>Returns underlying object for decorators that are wrappers around other objects.</para>
            </remarks>
        </member>
        <member name="P:FluorineFx.Collections.SetBase.IsReadOnly">
            <summary>
            Indicates whether the set is read-only.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.SetBase.Reversed">
            <summary>
            Enumerable whose enumerator traverses the set in reversed order.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.SetBase.Comparer">
            <summary>
            Comparer object that defines sort order for the set.
            </summary>
        </member>
        <member name="T:FluorineFx.AMF3.IDataOutput">
            <summary>
            The IDataOutput interface provides a set of methods for writing binary data. 
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteBoolean(System.Boolean)">
            <summary>
            Writes a Boolean value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteByte(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of length bytes from the specified byte array, bytes, starting offset(zero-based index) bytes into the byte stream.
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteDouble(System.Double)">
            <summary>
            Writes an IEEE 754 double-precision (64-bit) floating point number.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteFloat(System.Single)">
            <summary>
            Writes an IEEE 754 single-precision (32-bit) floating point number.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteInt(System.Int32)">
            <summary>
            Writes a 32-bit signed integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteObject(System.Object)">
            <summary>
            Writes an object to the byte stream or byte array in AMF serialized format.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteShort(System.Int16)">
            <summary>
            Writes a 16-bit integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteUnsignedInt(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteUTF(System.String)">
            <summary>
            Writes a UTF-8 string to the byte stream.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataOutput.WriteUTFBytes(System.String)">
            <summary>
            Writes a UTF-8 string.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:FluorineFx.Messaging.Services.Messaging.MessagingAdapter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Services.ServiceAdapter">
            <summary>
            A Service adapter bridges destinations to back-end systems.
            The ServiceAdapter class is the base definition of a service adapter.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceAdapter.#ctor">
            <summary>
            Initializes a new instance of the ServiceAdapter class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceAdapter.Invoke(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Process a message routed for this adapter.
            </summary>
            <param name="message">The message sent by the client.</param>
            <returns>The body of the acknowledge message (or null if there is no body).</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceAdapter.Manage(FluorineFx.Messaging.Messages.CommandMessage)">
            <summary>
            Accept a command from the adapter's service (subscribe, unsubscribe and ping operations).
            </summary>
            <param name="commandMessage"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceAdapter.Init">
            <summary>
            Adapter initialization.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.ServiceAdapter.Stop">
            <summary>
            Stops the adapter.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Services.ServiceAdapter.HandlesSubscriptions">
            <summary>
            Gets whether the adapter performs custom subscription management. The default return value is false.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Services.ServiceAdapter.Destination">
            <summary>
            Returns the Destination of the ServiceAdapter.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Services.ServiceAdapter.DestinationSettings">
            <summary>
            Gets the settings for the Destination of the ServiceAdapter.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Services.ServiceAdapter.AdapterSettings">
            <summary>
            Gets settings for the ServiceAdapter.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Services.ServiceAdapter.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.Messaging.MessagingAdapter.#ctor">
            <summary>
            Initializes a new instance of the MessagingAdapter class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.Messaging.MessagingAdapter.Invoke(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            This method is responsible for handling the message and returning a result (if any).
            The return value of this message is used as the body of the acknowledge message returned to the client. It may be null if there is no data being returned for this message. 
            </summary>
            <param name="message">The message received from the client.</param>
            <returns>The body of the acknowledge message (or null if there is no body).</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.Messaging.MessagingAdapter.AllowSend(FluorineFx.Messaging.Services.Messaging.Subtopic)">
            <summary>
            Invoked before a client message is sent to a subtopic.
            </summary>
            <param name="subtopic">The subtopic the client is attempting to send a message to.</param>
            <returns>true to allow the message to be sent, false to prevent it.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.Messaging.MessagingAdapter.AllowSubscribe(FluorineFx.Messaging.Services.Messaging.Subtopic)">
            <summary>
            Invoked before a client subscribe request is processed.
            </summary>
            <param name="subtopic">The subtopic the client is attempting to subscribe to.</param>
            <returns>true to allow the subscription, false to prevent it.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Services.AuthenticationService">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Service.ServiceInvoker">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Service.IServiceInvoker">
            <summary>
            Interface for objects that execute service calls (remote calls from client).
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.IServiceInvoker.Invoke(FluorineFx.Messaging.Api.Service.IServiceCall,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Execute the passed service call in the given scope.  This looks up the
            handler for the call in the scope and the context of the scope.
            </summary>
            <param name="call">The call to invoke.</param>
            <param name="scope">The scope to search for a handler.</param>
            <returns><code>true</code> if the call was performed, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.IServiceInvoker.Invoke(FluorineFx.Messaging.Api.Service.IServiceCall,System.Object)">
            <summary>
            Execute the passed service call in the given object.
            </summary>
            <param name="call">The call to invoke.</param>
            <param name="service">The service to use.</param>
            <returns><code>true</code> if the call was performed, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Service.ServiceInvoker.GetServiceHandler(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Lookup a handler for the passed service name in the given scope.
            </summary>
            <param name="scope"></param>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.AMFWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the AMFReader class based on the supplied stream and using UTF8Encoding.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.Reset">
            <summary>
            Resets object references.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the AMF stream.
            </summary>
            <param name="value">A byte to write to the stream.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteBytes(System.Byte[])">
            <summary>
            Writes a stream of bytes to the current position in the AMF stream.
            </summary>
            <param name="buffer">The memory buffer containing the bytes to write to the AMF stream</param>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteShort(System.Int32)">
            <summary>
            Writes a 16-bit unsigned integer to the current position in the AMF stream.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteString(System.String)">
            <summary>
            Writes an UTF-8 string to the current position in the AMF stream.
            </summary>
            <param name="value">The UTF-8 string.</param>
            <remarks>Standard or long string header is written depending on the string length.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteUTF(System.String)">
            <summary>
            Writes a UTF-8 string to the current position in the AMF stream.
            The length of the UTF-8 string in bytes is written first, as a 16-bit integer, followed by the bytes representing the characters of the string.
            </summary>
            <param name="value">The UTF-8 string.</param>
            <remarks>Standard or long string header is not written.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteUTFBytes(System.String)">
            <summary>
            Writes a UTF-8 string to the current position in the AMF stream.
            Similar to WriteUTF, but does not prefix the string with a 16-bit length word.
            </summary>
            <param name="value">The UTF-8 string.</param>
            <remarks>Standard or long string header is not written.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteData(FluorineFx.ObjectEncoding,System.Object)">
            <summary>
            Serializes object graphs in Action Message Format (AMF).
            </summary>
            <param name="objectEncoding">AMF version to use.</param>
            <param name="data">The Object to serialize in the AMF stream.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteNull">
            <summary>
            Writes a null type marker to the current position in the AMF stream.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteDouble(System.Double)">
            <summary>
            Writes a double-precision floating point number to the current position in the AMF stream.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteFloat(System.Single)">
            <summary>
            Writes a single-precision floating point number to the current position in the AMF stream.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteInt32(System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the current position in the AMF stream.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteUInt24(System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the current position in the AMF stream using variable length unsigned 29-bit integer encoding.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteBoolean(System.Boolean)">
            <summary>
            Writes a Boolean value to the current position in the AMF stream.
            </summary>
            <param name="value">A Boolean value.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteLong(System.Int64)">
            <summary>
            Writes a 64-bit signed integer to the current position in the AMF stream.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteDateTime(System.DateTime)">
            <summary>
            Writes a DateTime value to the current position in the AMF stream.
            An ActionScript Date is serialized as the number of milliseconds elapsed since the epoch of midnight on 1st Jan 1970 in the UTC time zone.
            </summary>
            <param name="value">A DateTime value.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Writes an XmlDocument object to the current position in the AMF stream.
            </summary>
            <param name="value">An XmlDocument object.</param>
            <remarks>Xml type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteArray(FluorineFx.ObjectEncoding,System.Array)">
            <summary>
            Writes an Array value to the current position in the AMF stream.
            </summary>
            <param name="objectEcoding">Object encoding used.</param>
            <param name="value">An Array object.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAssociativeArray(FluorineFx.ObjectEncoding,System.Collections.IDictionary)">
            <summary>
            Writes an associative array to the current position in the AMF stream.
            </summary>
            <param name="objectEncoding">Object encoding used.</param>
            <param name="value">An Dictionary object.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteObject(FluorineFx.ObjectEncoding,System.Object)">
            <summary>
            Writes an object to the current position in the AMF stream.
            </summary>
            <param name="objectEncoding">Object encoding used.</param>
            <param name="obj">The object to serialize.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteASO(FluorineFx.ObjectEncoding,FluorineFx.ASObject)">
            <summary>
            Writes an anonymous ActionScript object to the current position in the AMF stream.
            </summary>
            <param name="objectEncoding">Object encoding to use.</param>
            <param name="asObject">The ActionScript object.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3Data(System.Object)">
            <summary>
            Serializes object graphs in Action Message Format (AMF).
            </summary>
            <param name="data">The Object to serialize in the AMF stream.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3Null">
            <summary>
            Writes a null type marker to the current position in the AMF stream.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3Bool(System.Boolean)">
            <summary>
            Writes a Boolean value to the current position in the AMF stream.
            </summary>
            <param name="value">A Boolean value.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3Array(System.Array)">
            <summary>
            Writes an Array value to the current position in the AMF stream.
            </summary>
            <param name="value">An Array object.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3Array(System.Collections.IList)">
            <summary>
            Writes an Array value to the current position in the AMF stream.
            </summary>
            <param name="value">An Array object.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3AssociativeArray(System.Collections.IDictionary)">
            <summary>
            Writes an associative array to the current position in the AMF stream.
            </summary>
            <param name="value">An Dictionary object.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3UTF(System.String)">
            <summary>
            Writes a UTF-8 string to the current position in the AMF stream.
            </summary>
            <param name="value">The UTF-8 string.</param>
            <remarks>Standard or long string header is not written.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3String(System.String)">
            <summary>
            Writes an UTF-8 string to the current position in the AMF stream.
            </summary>
            <param name="value">The UTF-8 string.</param>
            <remarks>Standard or long string header is written depending on the string length.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3DateTime(System.DateTime)">
            <summary>
            Writes a DateTime value to the current position in the AMF stream.
            An ActionScript Date is serialized as the number of milliseconds elapsed since the epoch of midnight on 1st Jan 1970 in the UTC time zone.
            Local time zone information is not sent.
            </summary>
            <param name="value">A DateTime value.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3Int(System.Int32)">
            <summary>
            Writes a 32-bit signed integer to the current position in the AMF stream.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <remarks>Type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3Double(System.Double)">
            <summary>
            Writes a double-precision floating point number to the current position in the AMF stream.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <remarks>Type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3XmlDocument(System.Xml.XmlDocument)">
            <summary>
            Writes an XmlDocument object to the current position in the AMF stream.
            </summary>
            <param name="value">An XmlDocument object.</param>
            <remarks>Xml type marker is written in the AMF stream.</remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFWriter.WriteAMF3Object(System.Object)">
            <summary>
            Writes an object to the current position in the AMF stream.
            </summary>
            <param name="value">The object to serialize.</param>
            <remarks>No type marker is written in the AMF stream.</remarks>
        </member>
        <member name="P:FluorineFx.IO.AMFWriter.UseLegacyCollection">
            <summary>
            Gets or sets whether legacy collection serialization is used for AMF3.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.AMFReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the AMFReader class based on the supplied stream and using UTF8Encoding.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.Reset">
            <summary>
            Resets object references.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadData">
            <summary>
            Deserializes object graphs from Action Message Format (AMF).
            </summary>
            <returns>The Object deserialized from the AMF stream.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadData(System.Byte)">
            <summary>
            Deserializes an object using the specified type marker.
            </summary>
            <param name="typeMarker">Type marker.</param>
            <returns>The Object deserialized from the AMF stream.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadReference">
            <summary>
            Reads a reference type.
            </summary>
            <returns>The Object deserialized from the AMF stream.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current AMF stream using network byte order encoding and advances the position of the stream by two bytes.
            </summary>
            <returns>The 2-byte unsigned integer.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current AMF stream using network byte order encoding and advances the position of the stream by two bytes.
            </summary>
            <returns>The 2-byte signed integer.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadString">
            <summary>
            Reads an UTF-8 encoded String from the current AMF stream.
            </summary>
            <returns>The String value.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadBoolean">
            <summary>
            Reads a Boolean value from the current AMF stream using network byte order encoding and advances the position of the stream by one byte.
            </summary>
            <returns>The Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current AMF stream using network byte order encoding and advances the position of the stream by four bytes.
            </summary>
            <returns>The 4-byte signed integer.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadUInt24">
            <summary>
            Reads a 3-byte signed integer from the current AMF stream using network byte order encoding and advances the position of the stream by three bytes.
            </summary>
            <returns>The 3-byte signed integer.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadDouble">
            <summary>
            Reads an 8-byte IEEE-754 double precision floating point number from the current AMF stream using network byte order encoding and advances the position of the stream by eight bytes.
            </summary>
            <returns>The 8-byte double precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadFloat">
            <summary>
            Reads a single-precision floating point number from the current AMF stream using network byte order encoding and advances the position of the stream by eight bytes.
            </summary>
            <returns>The single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.AddReference(System.Object)">
            <summary>
            Add object reference.
            </summary>
            <param name="instance">The object instance.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadObject">
            <summary>
            Reads an AMF0 object.
            </summary>
            <returns>The Object deserialized from the AMF stream.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadASObject">
            <summary>
            Reads an anonymous ActionScript object.
            </summary>
            <returns>The anonymous ActionScript object deserialized from the AMF stream.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadUTF(System.Int32)">
            <summary>
            Reads an UTF-8 encoded String.
            </summary>
            <param name="length">Byte-length header.</param>
            <returns>The String value.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadLongString">
            <summary>
            Reads an UTF-8 encoded AMF0 Long String type.
            </summary>
            <returns>The String value.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAssociativeArray">
            <summary>
            Reads an An ECMA or associative Array.
            </summary>
            <returns>The associative Array.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadArray">
            <summary>
            Reads an AMF0 strict Array.
            </summary>
            <returns>The Array.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadDateTime">
            <summary>
            Reads an ActionScript Date.
            </summary>
            <returns>The DateTime.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadXmlDocument">
            <summary>
            Reads an XML Document Type.
            The XML document type is always encoded as a long UTF-8 string.
            </summary>
            <returns>The XmlDocument.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3Data">
            <summary>
            Deserializes object graphs from Action Message Format (AMF3).
            </summary>
            <returns>The Object deserialized from the AMF stream.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3Data(System.Byte)">
            <summary>
            Deserializes an object using the specified type marker.
            </summary>
            <param name="typeMarker">Type marker.</param>
            <returns>The Object deserialized from the AMF stream.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.AddAMF3ObjectReference(System.Object)">
            <summary>
            Add object reference.
            </summary>
            <param name="instance">The object instance.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3ObjectReference(System.Int32)">
            <summary>
            Reads a reference type.
            </summary>
            <returns>The Object deserialized from the AMF stream.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3IntegerData">
            <summary>
            Handle decoding of the variable-length representation which gives seven bits of value per serialized byte by using the high-order bit 
            of each byte as a continuation flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3Int">
            <summary>
            Reads a 4-byte signed integer from the current AMF stream.
            </summary>
            <returns>The 4-byte signed integer.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3Date">
            <summary>
            Reads an ActionScript Date.
            </summary>
            <returns>The DateTime.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3String">
            <summary>
            Reads an UTF-8 encoded String from the current AMF stream.
            </summary>
            <returns>The String value.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3XmlDocument">
            <summary>
            Reads an XML Document Type.
            The XML document type is always encoded as a long UTF-8 string.
            </summary>
            <returns>The XmlDocument.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3ByteArray">
            <summary>
            Reads a ByteArray.
            </summary>
            <returns>The ByteArray instance.</returns>
            <remarks>
            	<para>ActionScript 3.0 introduces a new type to hold an Array of bytes, namely
                ByteArray. AMF 3 serializes this type using a variable length encoding 29-bit
                integer for the byte-length prefix followed by the raw bytes of the ByteArray.
                ByteArray instances can be sent as a reference to a previously occurring ByteArray
                instance by using an index to the implicit object reference table.</para>
            	<para>Note that this encoding imposes some theoretical limits on the use of
                ByteArray. The maximum byte-length of each ByteArray instance is limited to 2^28 -
                1 bytes (approx 256 MB).</para>
            </remarks>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3Array">
            <summary>
            Reads an AMF3 Array (string or associative).
            </summary>
            <returns>The Array instance.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFReader.ReadAMF3Object">
            <summary>
            Reads an AMF3 object.
            </summary>
            <returns>The Object deserialized from the AMF stream.</returns>
        </member>
        <member name="P:FluorineFx.IO.AMFReader.UseLegacyCollection">
            <summary>
            Gets or sets whether legacy collection serialization is used for AMF3.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFReader.FaultTolerancy">
            <summary>
            Indicates whether reflection errors should raise an exception or set the LastError property.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFReader.LastError">
            <summary>
            Returns the last exception that ocurred while deserializing an object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpQueuedWriteStream">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.BasicScope">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.PersistableAttributeStore">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.AttributeStore">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.DisposableBase">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Util.DisposableBase._disposed">
            <summary>
            Tracks whether Dispose has been called.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.DisposableBase.#ctor">
            <summary>
            Initializes a new instance of the DisposableBase class.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.DisposableBase.Finalize">
            <summary>
            Finalizer.
            Do not provide destructors in types derived from this class.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.DisposableBase.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.DisposableBase.Dispose(System.Boolean)">
            <summary>
            Dispose executes in two distinct scenarios:
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FluorineFx.Util.DisposableBase.Free">
            <summary>
            Free managed resources.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.DisposableBase.FreeUnmanaged">
            <summary>
            Free managed resources.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.DisposableBase.CheckDisposed">
            <summary>
            Check whether object is disposed.
            </summary>
            <remarks>Throws ObjectDisposedException if the object is disposed.</remarks>
        </member>
        <member name="P:FluorineFx.Util.DisposableBase.IsDisposed">
            <summary>
            Gets a value indicating whether the object is disposed.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.AttributeStore._attributes">
            <summary>
            Attribute dictionary.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.#ctor">
            <summary>
            Initializes a new instance of the AttributeStore class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.GetAttributeNames">
            <summary>
            Returns the attribute names.
            </summary>
            <returns>Collection of attribute names.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.SetAttribute(System.String,System.Object)">
            <summary>
            Sets an attribute on this object.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns>true if the attribute value changed otherwise false</returns>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.SetAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets multiple attributes on this object.
            </summary>
            <param name="values">Dictionary of attributes.</param>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.SetAttributes(FluorineFx.Messaging.Api.IAttributeStore)">
            <summary>
            Sets multiple attributes on this object.
            </summary>
            <param name="values">Attribute store.</param>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.GetAttribute(System.String)">
            <summary>
            Returns the value for a given attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.GetAttribute(System.String,System.Object)">
            <summary>
            Returns the value for a given attribute and sets it if it doesn't exist.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">Attribute's default value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.HasAttribute(System.String)">
            <summary>
            Checks whetner the object has an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>true if a child scope exists, otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>true if the attribute was found and removed otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.RemoveAttributes">
            <summary>
            Removes all attributes.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.AttributeStore.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies the collection of attribute values to a one-dimensional array, starting at the specified index in the array.
            </summary>
            <param name="array">The Array that receives the values.</param>
            <param name="index">The zero-based index in array from which copying starts.</param>
        </member>
        <member name="P:FluorineFx.Messaging.AttributeStore.IsEmpty">
            <summary>
            Gets whether the attribute store is empty;
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.AttributeStore.Item(System.String)">
            <summary>
            Gets or sets a value by name.
            </summary>
            <param name="name">The key name of the value.</param>
            <returns>The value with the specified name.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.AttributeStore.AttributesCount">
            <summary>
            Gets the number of attributes in the collection.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Persistence.IPersistable">
            <summary>
            Base interface for objects that can be made persistent.
            
            Every object that complies to this interface must provide either a
            constructor that takes an input stream as only parameter or an empty
            constructor so it can be loaded from the persistence store.
            
            However this is not required for objects that are created by the application
            and initialized afterwards.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Persistence.IPersistable.Serialize(FluorineFx.IO.AMFWriter)">
            <summary>
            Writes the object to the specified output stream.
            </summary>
            <param name="writer">Writer to write to.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Persistence.IPersistable.Deserialize(FluorineFx.IO.AMFReader)">
            <summary>
            Loads the object from the specified input stream.
            </summary>
            <param name="reader">Reader to load from.</param>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Persistence.IPersistable.IsPersistent">
            <summary>
            Gets or sets whether the object is persistent.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Persistence.IPersistable.Name">
            <summary>
            Gets or sets the name of the persistent object.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Persistence.IPersistable.Path">
            <summary>
            Gets or sets the path of the persistent object.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Persistence.IPersistable.LastModified">
            <summary>
            Gets the timestamp when the object was last modified.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Persistence.IPersistable.Store">
            <summary>
            Gets or sets the persistence store this object is stored in.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.PersistableAttributeStore.SetAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets multiple attributes on this object.
            </summary>
            <param name="values">Dictionary of attributes.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IBasicScope">
            <summary>
            Base interface for all scope objects.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Event.IEventObservable">
            <summary>
            Provides an Observer pattern, that is it has a list of objects that listen to events.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Event.IEventObservable.AddEventListener(FluorineFx.Messaging.Api.Event.IEventListener)">
            <summary>
            Add event listener to this observable.
            </summary>
            <param name="listener">Event listener.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Event.IEventObservable.RemoveEventListener(FluorineFx.Messaging.Api.Event.IEventListener)">
            <summary>
            Remove event listener from this observable.
            </summary>
            <param name="listener">Event listener.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Event.IEventObservable.GetEventListeners">
            <summary>
            Get the event listeners collection.
            </summary>
            <returns>Collection of event listeners.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IBasicScope.HasParent">
            <summary>
            Checks whether the scope has a parent.
            You can think of scopes as of tree items
            where scope may have a parent and children (child).
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IBasicScope.Parent">
            <summary>
            Get this scope's parent.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IBasicScope.Depth">
            <summary>
            Get the scopes depth, how far down the scope tree is it. The lowest depth
            is 0x00, the depth of Global scope. Application scope depth is 0x01. Room
            depth is 0x02, 0x03 and so forth.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IBasicScope.Name">
            <summary>
            Gets the name of this scope.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IBasicScope.Path">
            <summary>
            Gets the full absolute path.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IBasicScope.Type">
            <summary>
            Gets the type of the scope.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IBasicScope.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BasicScope._keepOnDisconnect">
            <summary>
            Set to true to prevent the scope from being freed upon disconnect.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BasicScope.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BasicScope.HasParent">
            <summary>
            Checks whether the scope has a parent.
            You can think of scopes as of tree items
            where scope may have a parent and children (child).
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BasicScope.Parent">
            <summary>
            Get this scope's parent.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BasicScope.Depth">
            <summary>
            Get the scopes depth, how far down the scope tree is it. The lowest depth
            is 0x00, the depth of Global scope. Application scope depth is 0x01. Room
            depth is 0x02, 0x03 and so forth.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BasicScope.Path">
            <summary>
            Gets the full absolute path.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Messages.ErrorMessage">
            <summary>
            The ErrorMessage class is used to report errors within the messaging system.
            An error message only occurs in response to a message sent within the system.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Messages.AcknowledgeMessage">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Messages.AsyncMessage">
            <summary>
            AsyncMessage contains information necessary to perform point-to-point or publish-subscribe messaging.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Messages.MessageBase">
            <summary>
            Base class for all messages. Messages have two customizable sections; headers and body. 
            The headers property provides access to specialized meta information for a specific message 
            instance. 
            The headers property is an associative array with the specific header name as the key.
            <br/><br/>
            The body of a message contains the instance specific data that needs to be delivered and 
            processed by the remote destination.
            The body is an object and is the payload for a message.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Messages.IMessage">
            <summary>
            Represents a Flex message object.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.IMessage.GetHeader(System.String)">
            <summary>
            Retrieves the specified header value.
            </summary>
            <param name="name">Header name.</param>
            <returns>The value associated with the specified header name.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.IMessage.SetHeader(System.String,System.Object)">
            <summary>
            Sets a header value.
            </summary>
            <param name="name">Header name.</param>
            <param name="value">Value associated with the header name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.IMessage.HeaderExists(System.String)">
            <summary>
            Retrieves whether for the specified header name an associated value exists.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.IMessage.clientId">
            <summary>
            Gets or sets the client identity indicating which client sent the message.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.IMessage.destination">
            <summary>
            Gets or sets the message destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.IMessage.messageId">
            <summary>
            Gets or sets the identity of the message.
            </summary>
            <remarks>This field is unique and can be used to correlate a response to the original request message.</remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.IMessage.timestamp">
            <summary>
            Gets or sets the time stamp for the message.
            </summary>
            <remarks>The time stamp is the date and time that the message was sent.</remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.IMessage.timeToLive">
            <summary>
            Gets or sets the validity for the message.
            </summary>
            <remarks>Time to live is the number of milliseconds that this message remains valid starting from the specified timestamp value.</remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.IMessage.body">
            <summary>
            Gets or sets the body of the message.
            </summary>
            <remarks>The body is the data that is delivered to the remote destination.</remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.IMessage.headers">
            <summary>
            Gets or sets the headers of the message.
            </summary>
            <remarks>
            The headers of a message are an associative array where the key is the header name and the value is the header value.
            This property provides access to the specialized meta information for the specific message instance. 
            Flex core header names begin with a 'DS' prefix. Custom header names should start with a unique prefix to avoid name collisions.
            </remarks>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase.DestinationClientIdHeader">
            <summary>
            Messages pushed from the server may arrive in a batch, with messages in the batch 
            potentially targeted to different Consumer instances.
            Each message will contain this header identifying the Consumer instance that will 
            receive the message.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase.EndpointHeader">
            <summary>
            Messages are tagged with the endpoint id for the Channel they are sent over.
            Channels set this value automatically when they send a message.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase.RemoteCredentialsHeader">
            <summary>
            Messages that need to set remote credentials for a destination carry the Base64 encoded 
            credentials in this header.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase.RequestTimeoutHeader">
            <summary>
            Messages sent with a defined request timeout use this header.
            The request timeout value is set on outbound messages by services or channels and the value 
            controls how long the corresponding MessageResponder will wait for an acknowledgement, 
            result or fault response for the message before timing out the request.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase.FlexClientIdHeader">
            <summary>
            This header is used to transport the global FlexClient Id value in outbound messages 
            once it has been assigned by the server.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase._headers">
            <summary>
            Message headers.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase._timestamp">
            <summary>
            Timestamp of the message.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase._clientId">
            <summary>
            Cclient id indicating the client that sent the message.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase._destination">
            <summary>
            The destination that the message targets. 
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase._messageId">
            <summary>
            A unique message id.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase._timeToLive">
            <summary>
            Time to live for the message. This is the number of milliseconds beyond the message timestamp that the message is considered valid and deliverable.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.MessageBase._body">
            <summary>
            The body of the message.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.MessageBase.#ctor">
            <summary>
            Initializes a new instance of the MessageBase class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.MessageBase.GetHeader(System.String)">
            <summary>
            Retrieves the specified header value.
            </summary>
            <param name="name">Header name.</param>
            <returns>The value associated with the specified header name.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.MessageBase.SetHeader(System.String,System.Object)">
            <summary>
            Sets a header value.
            </summary>
            <param name="name">Header name.</param>
            <param name="value">Value associated with the header name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.MessageBase.HeaderExists(System.String)">
            <summary>
            Retrieves whether for the specified header name an associated value exists.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.MessageBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.MessageBase.clientId">
            <summary>
            Gets or sets the client identity indicating which client sent the message.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.MessageBase.destination">
            <summary>
            Gets or sets the message destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.MessageBase.messageId">
            <summary>
            Gets or sets the identity of the message.
            </summary>
            <remarks>This field is unique and can be used to correlate a response to the original request message.</remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.MessageBase.timestamp">
            <summary>
            Gets or sets the time stamp for the message.
            </summary>
            <remarks>The time stamp is the date and time that the message was sent.</remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.MessageBase.timeToLive">
            <summary>
            Gets or sets the validity for the message.
            </summary>
            <remarks>Time to live is the number of milliseconds that this message remains valid starting from the specified timestamp value.</remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.MessageBase.body">
            <summary>
            Gets or sets the body of the message.
            </summary>
            <remarks>The body is the data that is delivered to the remote destination.</remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.MessageBase.headers">
            <summary>
            Gets or sets the headers of the message.
            </summary>
            <remarks>
            The headers of a message are an associative array where the key is the header name and the value is the header value.
            This property provides access to the specialized meta information for the specific message instance. 
            Flex core header names begin with a 'DS' prefix. Custom header names should start with a unique prefix to avoid name collisions.
            </remarks>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.AsyncMessage.SubtopicHeader">
            <summary>
            Messages sent by a MessageAgent with a defined subtopic property indicate their target subtopic in this header.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.AsyncMessage._correlationId">
            <summary>
            Correlation id for the AsyncMessage.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.AsyncMessage.#ctor">
            <summary>
            Initializes a new instance of the AsyncMessage class.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.AsyncMessage.correlationId">
            <summary>
            Gets or sets the correlation id of the message.
            </summary>
            <remarks>
            Used for acknowledgement and for segmentation of messages. The correlationId contains the messageId of the previous message that this message refers to.
            </remarks>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.AcknowledgeMessage.#ctor">
            <summary>
            Initializes a new instance of the AcknowledgeMessage class.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.ErrorMessage.ClientAuthenticationError">
            <summary>
            Client authentication fault code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.ErrorMessage.ClientAuthorizationError">
            <summary>
            Client authorization fault code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.ErrorMessage.#ctor">
            <summary>
            Initializes a new instance of the ErrorMessage class.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.ErrorMessage.faultCode">
            <summary>
            The fault code for the error. 
            This value typically follows the convention of "[outer_context].[inner_context].[issue]".
            
            For example: "Channel.Connect.Failed", "Server.Call.Failed"
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.ErrorMessage.faultString">
            <summary>
            A simple description of the error.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.ErrorMessage.faultDetail">
            <summary>
            Detailed description of what caused the error. This is typically a stack trace from the remote destination
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.ErrorMessage.rootCause">
            <summary>
            Root cause for the error.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.ErrorMessage.extendedData">
            <summary>
            Extended data that the remote destination can choose to associate with this error for custom error processing on the client.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IMessageConnection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.ServerSettings">
            <summary>
            Contains the properties for configuring server settings for message destinations.
            This is the <b>server</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServerSettings.AllowSubtopics">
            <summary>
            Gets whether subtopics are allowed.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.SO.ISharedObjectListener">
            <summary>
            Notifications about shared object updates.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectListener.OnSharedObjectConnect(FluorineFx.Messaging.Api.SO.ISharedObject)">
            <summary>
            Called when a client connects to a shared object.
            </summary>
            <param name="so">The shared object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectListener.OnSharedObjectDisconnect(FluorineFx.Messaging.Api.SO.ISharedObject)">
            <summary>
            Called when a client disconnects from a shared object.
            </summary>
            <param name="so">The shared object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectListener.OnSharedObjectUpdate(FluorineFx.Messaging.Api.SO.ISharedObject,System.String,System.Object)">
            <summary>
            Called when a shared object attribute is updated.
            </summary>
            <param name="so">The shared object.</param>
            <param name="key">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectListener.OnSharedObjectUpdate(FluorineFx.Messaging.Api.SO.ISharedObject,FluorineFx.Messaging.Api.IAttributeStore)">
            <summary>
            Called when multiple attributes of a shared object are updated.
            </summary>
            <param name="so">The shared object.</param>
            <param name="values">The new attributes of the shared object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectListener.OnSharedObjectUpdate(FluorineFx.Messaging.Api.SO.ISharedObject,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Called when multiple attributes of a shared object are updated.
            </summary>
            <param name="so">The shared object.</param>
            <param name="values">The new attributes of the shared object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectListener.OnSharedObjectDelete(FluorineFx.Messaging.Api.SO.ISharedObject,System.String)">
            <summary>
            Called when an attribute is deleted from the shared object.
            </summary>
            <param name="so">The shared object.</param>
            <param name="key">The name of the attribute to delete.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectListener.OnSharedObjectClear(FluorineFx.Messaging.Api.SO.ISharedObject)">
            <summary>
            Called when all attributes of a shared object are removed.
            </summary>
            <param name="so">The shared object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectListener.OnSharedObjectSend(FluorineFx.Messaging.Api.SO.ISharedObject,System.String,System.Collections.IList)">
            <summary>
            Called when a shared object method call is sent.
            </summary>
            <param name="so">The shared object.</param>
            <param name="method">The method name to call.</param>
            <param name="parameters">The arguments.</param>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3StringWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3DataTableWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0DBNullWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0ArrayWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3NumberReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0StringReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0ASObjectReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.AMFDeserializer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFDeserializer.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the AMFDeserializer class.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FluorineFx.IO.AMFDeserializer.ReadAMFMessage">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.IO.AMFDeserializer.FailedAMFBodies">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.HttpCompress.GZipFilter">
            <summary>
            A filter to support HTTP compression using GZip.
            </summary>
        </member>
        <member name="T:FluorineFx.HttpCompress.CompressingFilter">
            <summary>
            Base for any HttpFilter that performing compression
            </summary>
            <remarks>
            When implementing this class, you need to implement a <see cref="T:FluorineFx.HttpCompress.HttpOutputFilter"/>
            along with a <see cref="P:FluorineFx.HttpCompress.CompressingFilter.ContentEncoding"/>.  The latter corresponds to a 
            content coding (see http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.5)
            that your implementation will support.
            </remarks>
        </member>
        <member name="T:FluorineFx.HttpCompress.HttpOutputFilter">
            <summary>
            The base of anything you want to latch onto the Filter property of a <see cref="T:System.Web.HttpResponse"/>
            object.
            </summary>
            <remarks>
            <p></p>These are generally used with HttpModule but you could really use them in
            other HttpModules.  This is a general, write-only stream that writes to some underlying stream.  When implementing
            a real class, you have to override void Write(byte[], int offset, int count).  Your work will be performed there.
            </remarks>
        </member>
        <member name="M:FluorineFx.HttpCompress.HttpOutputFilter.#ctor(System.IO.Stream)">
            <summary>
            Subclasses need to call this on contruction to setup the underlying stream
            </summary>
            <param name="baseStream">The stream we're wrapping up in a filter</param>
        </member>
        <member name="M:FluorineFx.HttpCompress.HttpOutputFilter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.  Throws an exception saying so.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown.  Always.</exception>
        </member>
        <member name="M:FluorineFx.HttpCompress.HttpOutputFilter.SetLength(System.Int64)">
            <summary>
            Not supported.  Throws an exception saying so.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown.  Always.</exception>
        </member>
        <member name="M:FluorineFx.HttpCompress.HttpOutputFilter.Close">
            <summary>
            Closes this Filter and the underlying stream.
            </summary>
            <remarks>
            If you override, call up to this method in your implementation.
            </remarks>
        </member>
        <member name="M:FluorineFx.HttpCompress.HttpOutputFilter.Flush">
            <summary>
            Fluses this Filter and the underlying stream.
            </summary>
            <remarks>
            If you override, call up to this method in your implementation.
            </remarks>
        </member>
        <member name="M:FluorineFx.HttpCompress.HttpOutputFilter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="buffer">The buffer to write into.</param>
            <param name="offset">The offset on the buffer to write into</param>
            <param name="count">The number of bytes to write.  Must be less than buffer.Length</param>
            <returns>An int telling you how many bytes were written</returns>
        </member>
        <member name="P:FluorineFx.HttpCompress.HttpOutputFilter.BaseStream">
            <summary>
            Allow subclasses access to the underlying stream
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.HttpOutputFilter.CanRead">
            <summary>
            False.  These are write-only streams
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.HttpOutputFilter.CanSeek">
            <summary>
            False.  These are write-only streams
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.HttpOutputFilter.CanWrite">
            <summary>
            True.  You can write to the stream.  May change if you call Close or Dispose
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.HttpOutputFilter.Length">
            <summary>
            Not supported.  Throws an exception saying so.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown.  Always.</exception>
        </member>
        <member name="P:FluorineFx.HttpCompress.HttpOutputFilter.Position">
            <summary>
            Not supported.  Throws an exception saying so.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown.  Always.</exception>
        </member>
        <member name="M:FluorineFx.HttpCompress.CompressingFilter.#ctor(System.IO.Stream,FluorineFx.HttpCompress.CompressionLevels)">
            <summary>
            Protected constructor that sets up the underlying stream we're compressing into
            </summary>
            <param name="baseStream">The stream we're wrapping up</param>
            <param name="compressionLevel">The level of compression to use when compressing the content</param>
        </member>
        <member name="M:FluorineFx.HttpCompress.CompressingFilter.WriteHeaders">
            <summary>
            Writes out the compression-related headers.  Subclasses should call this once before writing to the output stream.
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.CompressingFilter.ContentEncoding">
            <summary>
            The name of the content-encoding that's being implemented
            </summary>
            <remarks>
            See http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.5 for more
            details on content codings.
            </remarks>
        </member>
        <member name="P:FluorineFx.HttpCompress.CompressingFilter.CompressionLevel">
            <summary>
            Allow inheriting classes to get access the the level of compression that should be used
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.CompressingFilter.HasWrittenHeaders">
            <summary>
            Keeps track of whether or not we're written the compression headers
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.CompressingFilter.TotalIn">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.CompressingFilter.TotalOut">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.GZipFilter.m_stream">
            <summary>
            compression stream member
            has to be a member as we can only have one instance of the
            actual filter class
            </summary>
        </member>
        <member name="M:FluorineFx.HttpCompress.GZipFilter.#ctor(System.IO.Stream)">
            <summary>
            Primary constructor.  Need to pass in a stream to wrap up with gzip.
            </summary>
            <param name="baseStream">The stream to wrap in gzip.  Must have CanWrite.</param>
        </member>
        <member name="M:FluorineFx.HttpCompress.GZipFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write content to the stream and have it compressed using gzip.
            </summary>
            <param name="buffer">The bytes to write</param>
            <param name="offset">The offset into the buffer to start reading bytes</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="M:FluorineFx.HttpCompress.GZipFilter.Close">
            <summary>
            Closes this Filter and calls the base class implementation.
            </summary>
        </member>
        <member name="M:FluorineFx.HttpCompress.GZipFilter.Flush">
            <summary>
            Flushes the stream out to underlying storage
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.GZipFilter.ContentEncoding">
            <summary>
            The Http name of this encoding.  Here, gzip.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.Identity">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.ArrayUtils">
            <summary>
            Array utility class.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.ArrayUtils.Resize(System.Array,System.Int32)">
            <summary>
            Changes the size of an array to the specified new size.
            </summary>
            <param name="array">The one-dimensional, zero-based array to resize.</param>
            <param name="newSize">The size of the new array.</param>
            <returns>The resized array.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.Messages.RtmpMessage">
            <summary>
            RTMP message
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.Messages.RtmpMessage.body">
            <summary>
            Gets or sets the body of the message.
            </summary>
            <remarks>The body is the data that is delivered to the remote destination.</remarks>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.IBWControlService">
            <summary>
            	<para>Bandwidth controller service interface.</para>
            	<para>The bandwidth controllable is registered in the bandwidth controller which
                provides the three token buckets used for bandwidth control.</para>
            	<para>The bandwidth controller manages the token buckets assigned to the bandwidth
                controllable and distributes the tokens to the buckets in an
                implementation-specific way. (eg timely distribute the tokens according to the
                bandwidth config of the controllable).</para>
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IBWControlService.RegisterBWControllable(FluorineFx.Messaging.Api.IBWControllable)">
            <summary>
            Register a bandwidth controllable. The necessary resources will be allocated and assigned to the controllable.
            </summary>
            <param name="bc">The bandwidth controllable.</param>
            <returns>The registry context. It's used in the subsequent calls to controller's method.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IBWControlService.UnregisterBWControllable(FluorineFx.Messaging.Rtmp.Stream.IBWControlContext)">
            <summary>
            Unregister the bandwidth controllable. The resources that were allocated will be freed.
            </summary>
            <param name="context">The registry context.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IBWControlService.LookupContext(FluorineFx.Messaging.Api.IBWControllable)">
            <summary>
            Lookup the registry context according to the controllable.
            </summary>
            <param name="bc">The bandwidth controllable.</param>
            <returns>The registry context.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IBWControlService.UpdateBWConfigure(FluorineFx.Messaging.Rtmp.Stream.IBWControlContext)">
            <summary>
            Update the bandwidth configuration of a controllable.
            Each time when the controllable changes the bandwidth config
            and wants to make the changes take effect, this method should be called.
            </summary>
            <param name="context">The registry context.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IBWControlService.ResetBuckets(FluorineFx.Messaging.Rtmp.Stream.IBWControlContext)">
            <summary>
            Reset all the token buckets for a controllable. All the callback
            will be reset and all blocked threads will be woken up.
            </summary>
            <param name="context">The registry context.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IBWControlService.GetAudioBucket(FluorineFx.Messaging.Rtmp.Stream.IBWControlContext)">
            <summary>
            Return the token bucket for audio channel.
            </summary>
            <param name="context">The registry context.</param>
            <returns>Token bucket for audio channel.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IBWControlService.GetVideoBucket(FluorineFx.Messaging.Rtmp.Stream.IBWControlContext)">
            <summary>
            Return the token bucket for video channel.
            </summary>
            <param name="context">The registry context.</param>
            <returns>Token bucket for video channel.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IBWControlService.GetDataBucket(FluorineFx.Messaging.Rtmp.Stream.IBWControlContext)">
            <summary>
            Return the token bucket for data channel.
            </summary>
            <param name="context">The registry context.</param>
            <returns>Token bucket for data channel.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.BaseConnection">
            <summary>
            Base abstract class for connections.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._connectionId">
            <summary>
            Connection id.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._objectEncoding">
            <summary>
            AMF version.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._path">
            <summary>
            Path of scope client connected to.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._readMessages">
            <summary>
            Number of read messages.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._writtenMessages">
            <summary>
            Number of written messages.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._droppedMessages">
            <summary>
            Number of dropped messages.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._parameters">
            <summary>
            Connection params passed from client with NetConnection.connect call.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._client">
            <summary>
            Client bound to connection.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._scope">
            <summary>
            Scope that connection belongs to.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection._basicScopes">
            <summary>
            Set of basic scopes.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.BaseConnection.__fields">
            <summary>
            State bit field.
            1 IsClosed
            2 IsClosing
            4
            8 IsFlexClient
            16 IsTunnelingDetected
            32 IsTunneled
            64
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.#ctor(System.String,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the BaseConnection class.
            </summary>
            <param name="path">Scope path on server.</param>
            <param name="parameters">Parameters passed from client.</param>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.#ctor(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the BaseConnection class.
            </summary>
            <param name="path">Scope path on server.</param>
            <param name="connectionId">Connection id.</param>
            <param name="parameters">Parameters passed from client.</param>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.Initialize(FluorineFx.Messaging.Api.IClient)">
            <summary>
            Initializes client.
            </summary>
            <param name="client">Client bound to connection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.Connect(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Connect to another scope on server.
            </summary>
            <param name="scope">New scope.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.Connect(FluorineFx.Messaging.Api.IScope,System.Object[])">
            <summary>
            Connect to another scope on server with given parameters.
            </summary>
            <param name="scope">New scope.</param>
            <param name="parameters">Parameters to connect with.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.Close">
            <summary>
            Closes connection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.Timeout">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.Ping">
            <summary>
            Start measuring the roundtrip time for a packet on the connection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.DispatchEvent(FluorineFx.Messaging.Api.Event.IEvent)">
            <summary>
            Dispatches event.
            </summary>
            <param name="evt">Event.</param>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.HandleEvent(FluorineFx.Messaging.Api.Event.IEvent)">
            <summary>
            Handles event
            </summary>
            <param name="evt">Event.</param>
            <returns>true if associated scope was able to handle event, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.NotifyEvent(FluorineFx.Messaging.Api.Event.IEvent)">
            <summary>
            Notified on event.
            </summary>
            <param name="evt">Event.</param>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.RegisterBasicScope(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Registers basic scope.
            </summary>
            <param name="basicScope">Basic scope to register.</param>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.UnregisterBasicScope(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Unregister basic scope.
            </summary>
            <param name="basicScope">Unregister basic scope.</param>
        </member>
        <member name="M:FluorineFx.Messaging.BaseConnection.GetPendingVideoMessages(System.Int32)">
            <summary>
            Get the total number of video messages that are pending to be sent to a stream.
            </summary>
            <param name="streamId">The stream id.</param>
            <returns>Number of pending video messages.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.RemoteEndPoint">
            <summary>
            Gets the network endpoint.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.Path">
            <summary>
            Gets the path for this connection. This is not updated if you switch scope.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.IsClosed">
            <summary>
            Gets whether the connection is closed.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.IsClosing">
            <summary>
            Gets whether the connection is being closed.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.IsFlexClient">
            <summary>
            Gets whether the connected client is a Flex client (swf).
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.IsConnected">
            <summary>
            Checks whether connection is alive.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.ClientLeaseTime">
            <summary>
            This property supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.Parameters">
            <summary>
            Gets connection parameters.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.Client">
            <summary>
            Gets the client object associated with this connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.Scope">
            <summary>
            Get the scope this client is connected to.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.BasicScopes">
            <summary>
            Gets the basic scopes this connection has subscribed.  This list will
            contain the shared objects and broadcast streams the connection connected to.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.ConnectionId">
            <summary>
            Gets the connection id.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.SessionId">
            <summary>
            Gets the session id.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.ObjectEncoding">
            <summary>
            Gets the object encoding (AMF version) for this connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.ReadBytes">
            <summary>
            Gets the total number of bytes read from the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.WrittenBytes">
            <summary>
            Gets the total number of bytes written to the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.ReadMessages">
            <summary>
            Gets the total number of messages read from the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.WrittenMessages">
            <summary>
            Gets the total number of messages written to the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.DroppedMessages">
            <summary>
            Gets the total number of messages that have been dropped.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.PendingMessages">
            <summary>
            Gets the total number of messages that are pending to be sent to the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.ClientBytesRead">
            <summary>
            Gets the number of written bytes the client reports to have received.
            This is the last value of the BytesRead message received from a client.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.BaseConnection.LastPingTime">
            <summary>
            Gets roundtrip time of last ping command.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.ISingleItemSubscriberStream">
            <summary>
            A subscriber stream that has only one item for play.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.ISubscriberStream">
            <summary>
            ISubscriberStream is a stream from subscriber's point of view. That is, it provides methods for common stream operations like play, pause or seek.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IClientStream">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStream">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStream.Start">
            <summary>
            Starts the stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStream.Stop">
            <summary>
            Stops the stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStream.Name">
            <summary>
            Gets the name of the stream. The name is unique across the server. This is
            just an id of the stream and NOT the name that is used at client side to
            subscribe to the stream. For that name, use IBroadcastStream.PublishedName.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStream.Scope">
            <summary>
            Gets the scope this stream is associated with.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStream.CodecInfo">
            <summary>
            Gets Codec info for a stream.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStream.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IBWControllable">
            <summary>
            Marks an object that can be bandwidth controlled.
            <para>
            A bw-controlled object has the bandwidth config property and a link to the parent controllable object.
            </para>
            <para>
            The parent controllable object acts as the bandwidth provider
            for this object, thus generates a tree structure, in which the null parent means the host. 
            The next depth level is the IClient. The following is IStreamCapableConnection.
            The deepest level is IClientStream. That is, bandwidth can be separately configured for
            client stream or connection, or client or the whole application.
            </para>
            <para>
            The summary of children's bandwidth can't exceed the parent's bandwidth
            even though the children's bandwidth could be configured larger than the parent's bandwidth.
            </para>
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IBWControllable.GetParentBWControllable">
            <summary>
            Returns parent IBWControllable object.
            </summary>
            <returns>Parent IBWControllable.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IBWControllable.BandwidthConfiguration">
            <summary>
            Gets or sets bandwidth configuration object.
            Bandwidth configuration allows you to set bandwidth size for audio, video and total amount.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IClientStream.SetClientBufferDuration(System.Int32)">
            <summary>
            Set the buffer duration for this stream as requested by the client.
            </summary>
            <param name="bufferTime">Duration in ms the client wants to buffer.</param>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IClientStream.StreamId">
            <summary>
            Gets stream id allocated in a connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IClientStream.Connection">
            <summary>
            Gets the connection containing the stream.
            </summary>
            <remarks>Returns the connection object or null if the connection is no longer active.</remarks>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.ISubscriberStream.Play">
            <summary>
            Start playing.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.ISubscriberStream.Pause(System.Int32)">
            <summary>
            Pause at a position for current playing item.
            </summary>
            <param name="position">Position for pause in millisecond.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.ISubscriberStream.Resume(System.Int32)">
            <summary>
            Resume from a position for current playing item.
            </summary>
            <param name="position">Position for resume in millisecond.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.ISubscriberStream.Seek(System.Int32)">
            <summary>
            Seek into a position for current playing item.
            </summary>
            <param name="position">Position for seek in millisecond.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.ISubscriberStream.ReceiveVideo(System.Boolean)">
            <summary>
            Should the stream send video to the client.
            </summary>
            <param name="receive"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.ISubscriberStream.ReceiveAudio(System.Boolean)">
            <summary>
            Should the stream send audio to the client.
            </summary>
            <param name="receive"></param>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.ISubscriberStream.IsPaused">
            <summary>
            Gets whether the stream is currently paused.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.ISingleItemSubscriberStream.PlayItem">
            <summary>
            Sets PlayItem.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IPipeConnectionListener">
            <summary>
            A listener that wants to listen to events when provider/consumer connects to or disconnects from a specific pipe.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IPipeConnectionListener.OnPipeConnectionEvent(FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent)">
            <summary>
            Pipe connection event handler.
            </summary>
            <param name="evt">Pipe connection event.</param>
        </member>
        <member name="T:FluorineFx.IO.FLV.IFlv">
            <summary>
            Represents a FLV file.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.IStreamableFile">
            <summary>
            Interface represents streamable file with tag reader and writers (one for plain mode and one for append).
            </summary>
        </member>
        <member name="M:FluorineFx.IO.IStreamableFile.GetReader">
            <summary>
            Returns a reader to parse and read the tags inside the file.
            </summary>
            <returns>Tag reader.</returns>
        </member>
        <member name="M:FluorineFx.IO.IStreamableFile.GetWriter">
            <summary>
            Returns a writer that creates a new file or truncates existing contents. 
            </summary>
            <returns>Tag writer.</returns>
        </member>
        <member name="M:FluorineFx.IO.IStreamableFile.GetAppendWriter">
            <summary>
            Returns a Writer which is setup to append to the file.
            </summary>
            <returns>Tag writer used for append mode.</returns>
        </member>
        <member name="M:FluorineFx.IO.FLV.IFlv.RefreshHeaders">
            <summary>
            Refreshes the headers. Usually used after data is added to the flv file.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.FLV.IFlv.FlushHeaders">
            <summary>
            Flushes the headers.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.FLV.IFlv.ReaderFromNearestKeyFrame(System.Int32)">
            <summary>
            Returns a Reader closest to the nearest keyframe.
            </summary>
            <param name="seekPoint">Point in file we are seeking around.</param>
            <returns>Tag reader closest to the specified point.</returns>
        </member>
        <member name="M:FluorineFx.IO.FLV.IFlv.WriterFromNearestKeyFrame(System.Int32)">
            <summary>
            Returns a Writer based on the nearest key frame.
            </summary>
            <param name="seekPoint">Point in file we are seeking around.</param>
            <returns>Tag writer closest to the specified point.</returns>
        </member>
        <member name="P:FluorineFx.IO.FLV.IFlv.HasMetaData">
            <summary>
            Returns a boolean stating whether the flv has metadata.
            </summary>
            <value><code>true</code> if file has injected metadata, <code>false</code> otherwise.</value>
        </member>
        <member name="P:FluorineFx.IO.FLV.IFlv.HasKeyFrameData">
            <summary>
            Returns a boolean stating whether a flv has keyframedata.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.IFlv.MetaData">
            <summary>
            Gets or sets the metadata.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.IFlv.MetaService">
            <summary>
            Gets or sets the MetaService.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.IFlv.KeyFrameData">
            <summary>
            Gets or sets the keyframe data.
            </summary>
        </member>
        <member name="T:FluorineFx.Net.RtmpClient">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Net.INetConnectionClient">
            <summary>
            This interface supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Service.IPendingServiceCallback">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.IPendingServiceCallback.ResultReceived(FluorineFx.Messaging.Api.Service.IPendingServiceCall)">
            <summary>
            Triggered when results are recieved.
            </summary>
            <param name="call"></param>
        </member>
        <member name="T:FluorineFx.Messaging.Config.FlexClientSettings">
            <summary>
            The flex-client element of the services configuration file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.FlexClientSettings.TimeoutMinutes">
            <summary>
            Gets or sets the number of minutes before an idle FlexClient is timed out.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IMessageClient">
            <summary>
            MessageClient interface.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IMessageClient.Renew">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IMessageClient.GetBinaryId">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IMessageClient.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IMessageClient.ClientId">
            <summary>
            Gets the MessageClient identity.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IMessageClient.IsDisconnecting">
            <summary>
            Gets whether the connection is being disconnected.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.JsonRpcMethodAttribute">
            <summary>
            Indicates whether an operation (method) can be invoked using Json RPC.
            </summary>
        </member>
        <member name="T:FluorineFx.Invocation.IInvocationResultHandler">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Invocation.IInvocationResultHandler.HandleResult(FluorineFx.Invocation.IInvocationManager,System.Reflection.MethodInfo,System.Object,System.Object[],System.Object)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="invocationManager"></param>
            <param name="methodInfo"></param>
            <param name="obj"></param>
            <param name="arguments"></param>
            <param name="result"></param>
        </member>
        <member name="M:FluorineFx.Json.JsonRpcMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the JsonRpcMethodAttribute class.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonRpcMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the JsonRpcMethodAttribute class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:FluorineFx.Json.IJsonRpcProxyGenerator">
            <summary>
            Json-Rpc proxy code generator interface.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.IJsonRpcProxyGenerator.WriteProxy(FluorineFx.Json.Services.ServiceClass,FluorineFx.Util.IndentedTextWriter,System.Web.HttpRequest)">
            <summary>
            Generates Json-Rpc Proxy.
            </summary>
            <param name="service"></param>
            <param name="writer"></param>
            <param name="request"></param>
            <remarks>
            A proxy must post back to request.Url
            </remarks>
        </member>
        <member name="M:FluorineFx.IO.IKeyFrameDataAnalyzer.AnalyzeKeyFrames">
            <summary>
            Analyze and return keyframe metadata.
            </summary>
            <returns>Metadata object.</returns>
        </member>
        <member name="T:FluorineFx.Expression.OpMODULUS">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpDIVIDE">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents arithmetic division operator.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.IntLiteralNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents parsed integer literal node.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.ReversedTree">
            <summary>
            Summary description for ReversedTree.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.WsdlHelper">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.WsdlHelper.#ctor">
            <summary>
            Initializes a new instance of the WsdlHelper class.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.WsdlHelper.GetAssemblyFromAsmx(System.String)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="asmxFile"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Util.ValidationUtils">
            <summary>
            Validation utility class.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Services.Messaging.Subtopic">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents a message destination subtopic.
            
            The subtopic feature lets you divide the messages that a Producer component sends to a destination into specific categories at the destination.
            Configure a Consumer component that subscribes to the destination to receive only messages sent to a specific subtopic or set of subtopics.
            Use wildcard characters (*) to send or receive messages from more than one subtopic.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.Messaging.Subtopic.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Subtopic class.
            </summary>
            <param name="subtopic"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Services.Messaging.Subtopic.Matches(FluorineFx.Messaging.Services.Messaging.Subtopic)">
            <summary>
            Matches the passed subtopic against this subtopic. 
            
            If neither subtopic contains a wildcard they must literally match.
            If one or the other contains a wildcard they may match. 
            
            "chatrooms.*" will match "chatrooms.lobby" or "chatrooms.us.ca" but will not match "chatrooms" (assuming a subtopic separator of "."). 
            "chatrooms.*.ca" will match "chatrooms.us.ca" but not "chatrooms.us.ma". 
            </summary>
            <param name="subtopic">Subtopic object to match against this subtopic.</param>
            <returns>True if subtopics match.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Services.Messaging.Subtopic.IsHierarchical">
            <summary>
            Gets whether the subtopic is hierarchical.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Services.Messaging.Subtopic.Separator">
            <summary>
            Gets the separator used to create this Subtopic instance.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Services.Messaging.Subtopic.Value">
            <summary>
            Gets the subtopic value.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.SharedObjectTypeMapping">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.SharedObjectService">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.SO.ISharedObject">
            <summary>
            Serverside access to shared objects. Changes to the shared objects are
            propagated to all subscribed clients.
            
            If you want to modify multiple attributes and notify the clients about all
            changes at once, you can use code like this:
            <p>
            <code>
            sharedObject.BeginUpdate();<br />
            sharedObject.SetAttribute("One", "1");<br />
            sharedObject.SetAttribute("Two", "2");<br />
            sharedObject.RemoveAttribute("Three");<br />
            sharedObject.EndUpdate();<br />
            </code>
            </p>
            
            All changes between BeginUpdate and EndUpdate will be sent to the clients.
            using one notification event.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObject.SendMessage(System.String,System.Collections.IList)">
            <summary>
            Sends a message to a handler of the shared object.
            </summary>
            <param name="handler">The name of the handler to call.</param>
            <param name="arguments">A list of objects that should be passed as arguments to the handler.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObject.BeginUpdate">
            <summary>
            Start performing multiple updates to the shared object from serverside code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObject.BeginUpdate(FluorineFx.Messaging.Api.Event.IEventListener)">
            <summary>
            Start performing multiple updates to the shared object from a connected client.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObject.EndUpdate">
            <summary>
            The multiple updates are complete, notify clients about all changes at once.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObject.AddSharedObjectListener(FluorineFx.Messaging.Api.SO.ISharedObjectListener)">
            <summary>
            Register object that will be notified about update events.
            </summary>
            <param name="listener">The object to notify.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObject.RemoveSharedObjectListener(FluorineFx.Messaging.Api.SO.ISharedObjectListener)">
            <summary>
            Unregister object to not longer receive update events.
            </summary>
            <param name="listener">The object to unregister.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObject.Clear">
            <summary>
            Deletes all the attributes and sends a clear event to all listeners. The
            persistent data object is also removed from a persistent shared object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObject.Close">
            <summary>
            Detaches a reference from this shared object, this will destroy the
            reference immediately. This is useful when you don't want to proxy a
            shared object any longer.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.SO.ISharedObject.Version">
            <summary>
            Returns the version of the shared object. The version is incremented
            automatically on each modification.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.SO.ISharedObject.IsPersistentObject">
            <summary>
            Checks if the object has been created as persistent shared object by the client.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.SO.ISharedObject.IsLocked">
            <summary>
            Returns the locked state of this SharedObject.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope._so">
            <summary>
            Scoped shared object
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope._serverListeners">
            <summary>
            Server-side listeners (ISharedObjectListener)
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope._handlers">
            <summary>
            Event handlers (String, Object)
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope._securityHandlers">
            <summary>
            Security handlers (ISharedObjectSecurity)
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope.#ctor(FluorineFx.Messaging.Api.IScope,System.String,System.Boolean,FluorineFx.Messaging.Api.Persistence.IPersistenceStore)">
            <summary>
            Creates shared object with given parent scope, name, persistence flag state and store object.
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="persistent"></param>
            <param name="store"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope.GetSecurityHandlers">
            <summary>
            Returns security handlers for this shared object or null if none are found.
            </summary>
            <returns>Collection of ISharedObjectSecurity objects.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope.IsConnectionAllowed">
            <summary>
            Call handlers and check if connection to the existing SO is allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope.IsWriteAllowed(System.String,System.Object)">
            <summary>
            Call handlers and check if writing to the SO is allowed.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope.IsDeleteAllowed(System.String)">
            <summary>
            Call handlers and check if deleting a property from the SO is allowed.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObjectScope.IsSendAllowed(System.String,System.Collections.IList)">
            <summary>
            Call handlers and check if sending a message to the clients connected to the SO is allowed.
            </summary>
            <param name="message"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.ScopeUtils">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.ScopeUtils.IsApplication(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Check whether scope is an application scope (level 1 leaf in scope tree) or not
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.ScopeUtils.IsRoom(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Check whether scope is a room scope (level 2 leaf in scope tree or lower, e.g. 3, 4, ...) or not
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.ScopeUtils.FindApplication(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Returns the application scope for specified scope. Application scope has depth of 1 and has no parent.
            </summary>
            <param name="scope">Scope to find application for.</param>
            <returns>Application scope.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.ScopeUtils.FindRoot(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Finds root scope for specified scope object. Root scope is the top level scope among scope's parents.
            </summary>
            <param name="scope">Scope to find root for.</param>
            <returns>Root scope object.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpHeader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpHeader._channelId">
            <summary>
            Channel.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpHeader._timer">
            <summary>
            Timer.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpHeader._size">
            <summary>
            Header size
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpHeader._headerDataType">
            <summary>
            Type of data.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpHeader._streamId">
            <summary>
            Stream id.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpHeader._timerRelative">
            <summary>
            Whether timer value is relative.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpHeader.ToString">
            <summary>
            Returns a string that represents the current RtmpHeader object.
            </summary>
            <returns>A string that represents the current RtmpHeader object.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpHeader.ChannelId">
            <summary>
            Gets or set the channel id.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpHeader.DataType">
            <summary>
            Gets or set the data type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpHeader.Size">
            <summary>
            Gets or sets the header size.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpHeader.StreamId">
            <summary>
            Gets or sets the stream id.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpHeader.Timer">
            <summary>
            Gets or sets the timer.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpHeader.IsTimerRelative">
            <summary>
            Gets or sets the timer relative flag.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.HeaderType">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpState">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpMode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.ScopeLevel">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpChannel">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpChannel._connection">
            <summary>
            RTMP connection used to transfer packets.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpChannel._channelId">
            <summary>
            Channel id.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpChannel.Close">
            <summary>
            Closes channel with this id on RTMP connection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpChannel.Write(FluorineFx.Messaging.Rtmp.Event.IRtmpEvent)">
            <summary>
            Writes packet from event data to the RTMP connection.
            </summary>
            <param name="message">Event data.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpChannel.Write(FluorineFx.Messaging.Rtmp.Event.IRtmpEvent,System.Int32)">
            <summary>
            Writes packet from event data to the RTMP connection using the specified stream id.
            </summary>
            <param name="message">Event data.</param>
            <param name="streamId">Stream id.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpChannel.SendStatus(FluorineFx.Messaging.Rtmp.StatusASO)">
            <summary>
            Sends status notification.
            </summary>
            <param name="status">Status object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpChannel.ToString">
            <summary>
            Returns a string that represents the current RtmpChannel object.
            </summary>
            <returns>A string that represents the current RtmpChannel object.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpChannel.ChannelId">
            <summary>
            Gets the channel id.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpChannel.Connection">
            <summary>
            Get the connection.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.SerializationFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.SerializationFilter.#ctor">
            <summary>
            Initializes a new instance of the SerializationFilter class.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.DotNetFactoryInstance">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.FactoryInstance">
            <summary>
            This class is used by the IFlexFactory to store the configuration for an instance created by the factory.
            There is one of these for each destination currently since only destinations create these components.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.FactoryInstance.#ctor(FluorineFx.Messaging.IFlexFactory,System.String,System.Collections.Hashtable)">
            <summary>
            Initializes a new instance of the FactoryInstance class.
            </summary>
            <param name="factory">The IFlexFactory this FactoryInstance is created from.</param>
            <param name="id">The Destination's id.</param>
            <param name="properties">The configuration properties for this destination.</param>
        </member>
        <member name="M:FluorineFx.Messaging.FactoryInstance.GetInstanceClass">
            <summary>
            If possible, returns the class for the underlying configuration. 
            This method can return null if the class is not known until the lookup method is called. 
            The goal is so the factories which know the class at startup time can provide earlier error detection. 
            If the class is not known, this method can return null and validation will wait until the first lookup call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.FactoryInstance.Lookup">
            <summary>
            Return an instance as appropriate for this instance of the given factory. This just calls the lookup method on the factory 
            that this instance was created on. You override this method to return the specific component for this destination. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.FactoryInstance.OnOperationComplete(System.Object)">
            <summary>
            When the caller is done with the instance, this method is called. For session scoped components, this gives you the opportunity to 
            update any state modified in the instance in a remote persistence store. 
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:FluorineFx.Messaging.DotNetFactoryInstance.#ctor(FluorineFx.Messaging.IFlexFactory,System.String,System.Collections.Hashtable)">
            <summary>
            Initializes a new instance of the DotNetFactoryInstance class.
            </summary>
            <param name="flexFactory"></param>
            <param name="id"></param>
            <param name="properties"></param>
        </member>
        <member name="T:FluorineFx.Messaging.Config.MetadataSettings">
            <summary>
            Contains the properties for configuring destination metadata.
            This is the <b>metadata</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.MetadataSettings.Identity">
            <summary>
            Gets the properties to be used to guarantee unique identity among items in a collection of data.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IScopeContext">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeContext.ResolveScope(System.String)">
            <summary>
            Returns scope by path. You can think of IScope as of tree items, used to
            separate context and resources between users.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeContext.ResolveScope(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Resolves scope from given root using scope resolver.
            </summary>
            <param name="root">Scope to start from.</param>
            <param name="path">Path to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeContext.GetGlobalScope">
            <summary>
            Returns global scope reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeContext.LookupScopeHandler(System.String)">
            <summary>
            Returns scope handler (object that handler all actions related to the scope) by path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeContext.GetResource(System.String)">
            <summary>
            Returns an <see cref="T:FluorineFx.Context.IResource"/> handle for the
            </summary>
            <param name="location">The resource location.</param>
            <returns>An appropriate <see cref="T:FluorineFx.Context.IResource"/> handle.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IScopeContext.ClientRegistry">
            <summary>
            Gets the client registry. Client registry is a place where all clients are registered.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IScopeContext.PersistenceStore">
            <summary>
            Gets persistence store object, a storage for persistent objects like
            persistent SharedObjects.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IScopeContext.ServiceInvoker">
            <summary>
            Gets the service invoker object. Service invokers are objects that make
            service calls to client side NetConnection objects.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IScopeContext.ScopeResolver">
            <summary>
            Gets the scope resolverobject.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0StringWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMFUnknownTagReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0NumberReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.MessageOutput">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.AMFMessage">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFMessage._version">
            <summary>
            AMF packet version.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFMessage._bodies">
            <summary>
            AMF packet body values.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFMessage._headers">
            <summary>
            AMF packet headers.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFMessage.#ctor">
            <summary>
            Initializes a new instance of the AMFMessage class.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFMessage.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the AMFMessage class.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:FluorineFx.IO.AMFMessage.AddBody(FluorineFx.IO.AMFBody)">
            <summary>
            Adds a body to the AMF packet.
            </summary>
            <param name="body">The body object to add.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFMessage.AddHeader(FluorineFx.IO.AMFHeader)">
            <summary>
            Adds a header to the AMF packet.
            </summary>
            <param name="header">The header object to add.</param>
        </member>
        <member name="M:FluorineFx.IO.AMFMessage.GetBodyAt(System.Int32)">
            <summary>
            Gets a single AMF body object by index.
            </summary>
            <param name="index">The numerical index of the body.</param>
            <returns>The body referenced by index.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFMessage.GetHeaderAt(System.Int32)">
            <summary>
            Gets a single AMF header object by index.
            </summary>
            <param name="index">The numerical index of the header.</param>
            <returns>The header referenced by index.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFMessage.GetHeader(System.String)">
            <summary>
            Gets the value of a single AMF header object by name.
            </summary>
            <param name="header">The name of the header.</param>
            <returns>The header referenced by name.</returns>
        </member>
        <member name="M:FluorineFx.IO.AMFMessage.RemoveHeader(System.String)">
            <summary>
            Removes the named header from teh AMF packet.
            </summary>
            <param name="header">The name of the header.</param>
        </member>
        <member name="P:FluorineFx.IO.AMFMessage.Version">
            <summary>
            Gets the AMF packet version.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFMessage.BodyCount">
            <summary>
            Gets the body count.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFMessage.Bodies">
            <summary>
            Gets a readonly collection of AMF bodies.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFMessage.HeaderCount">
            <summary>
            Gets the header count.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFMessage.ObjectEncoding">
            <summary>
            Gets the AMF version/encoding used for this AMF packet.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.MessageOutput.#ctor">
            <summary>
            Initializes a new instance of the MessageOutput class.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.MessageOutput.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the MessageOutput class.
            </summary>
            <param name="version"></param>
        </member>
        <member name="T:FluorineFx.Exceptions.ProtocolException">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Exceptions.ProtocolException.#ctor">
            <summary>
            Initializes a new instance of the ProtocolException class.
            </summary>
        </member>
        <member name="M:FluorineFx.Exceptions.ProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProtocolException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>			
        </member>
        <member name="M:FluorineFx.Exceptions.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ProtocolException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>	
            <remarks>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.</remarks>			
        </member>
        <member name="M:FluorineFx.Exceptions.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ProtocolException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:FluorineFx.Data.Assemblers.IAssembler">
            <summary>
            Specifies an assembler interface which gets data from a data resource and handles the synchronization 
            of data among clients and the data resource.
            <br/><br/>
            An assembler must have a zero-argument constructor.<br/><br/>
            It is recommended that you extend the Assembler class, instead of directly implementing this interface.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.AddItemToFill(System.Collections.IList,System.Int32,System.Collections.Hashtable)">
            <summary>
            Called when a client adds an item to a filled collection.
            </summary>
            <param name="fillParameters">The list of parameters which identify the fill that the client changed.</param>
            <param name="position">The index where a new item was added.</param>
            <param name="identity">The identity of the item added at the specified position.</param>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.AutoRefreshFill(System.Collections.IList)">
            <summary>
            This method can be used to help control how fill methods are refreshed.
            </summary>
            <param name="fillParameters">Client-side parameters to a fill method that created a managed collection still managed by one or more clients.</param>
            <returns>true if the fill identified by the fill parameters should be auto-refreshed or false if auto-refresh is off for this fill.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.Count(System.Collections.IList)">
            <summary>
            Retrieve the number of items for a given query with the supplied parameters.
            </summary>
            <param name="countParameters">A list of parameters to the count method provided by the client invocation.</param>
            <returns>The number of items in the collection specified by the countParameters.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.CreateItem(System.Object)">
            <summary>
            Creates the item. Often, you fill in the identity properties unless those values were supplied by the client. 
            </summary>
            <param name="item">The initial instance of the item to create.</param>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.DeleteItem(System.Object)">
            <summary>
            This is called when the client application removes an item managed by the destination corresponding to this assembler. 
            </summary>
            <param name="previousVersion">The original version of the item on the client which the client intends to remove.</param>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.Fill(System.Collections.IList)">
            <summary>
            This method is called by for any fill methods called by the client which are not configured in the configuration file explicitly using the fill-method tag.
            </summary>
            <param name="list">The list of fill parameters provided to the DataService.fill method on the client. Note that the first parameter - the ArrayCollection is not included in this list.</param>
            <returns>A collection containing a list of items to be managed by the client. This collection should contain instances which all have valid identity properties and should not contain more than one instance with the same identity.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.GetItem(System.Collections.IDictionary)">
            <summary>
            Retrieves an item with the specified identity.
            </summary>
            <param name="identity">A Hashtable which contains key/value pairs for each identity property.</param>
            <returns>The item corresponding to this identity property or null if there is no item for this identity.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.GetItems(System.Collections.IList)">
            <summary>
            Given a list of identities, returns the list of items.
            </summary>
            <param name="identityList">A list of Hashtable objects specifying the list of items.</param>
            <returns>The list of items corresponding to the list of identities specified. If an item is not found, a null value should be placed into the list to indicate that.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.RefreshFill(System.Collections.IList,System.Object,System.Boolean)">
            <summary>
            If your fill methods are auto-refreshed, this method is called for each item that changes (either created or updated as indicated by the isCreate parameter).
            </summary>
            <param name="fillParameters">The parameters which identify a fill method that is still actively being managed by one or more clients connected to this server.</param>
            <param name="item">The item which is being created or updated in a recently committed transaction.</param>
            <param name="isCreate">true if this item was just created operation, false if it was just updated.</param>
            <returns>Assembler.DoNotExecuteFill - do nothing, Assembler.ExecuteFill - re-run the fill method to get the new list, Assembler.AppendToFill - just add it to the existing list, Assembler.RemoveFromFill - remove it from the sequence</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.RemoveItemFromFill(System.Collections.IList,System.Int32,System.Collections.Hashtable)">
            <summary>
            Called when a client removes an item from a filled collection.
            </summary>
            <param name="fillParameters">The list of parameters which identify the fill that the client changed.</param>
            <param name="position">The index where a new item was removed.</param>
            <param name="identity">The identity of the item removed at the specified position.</param>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.IAssembler.UpdateItem(System.Object,System.Object,System.Collections.IList)">
            <summary>
            Updates the item. The newVersion is always going to be present and contains the new version of the item.
            The previousVersion contains any state required for maintaining the integrity of this instance.
            </summary>
            <param name="newVersion">The new version of the item with which to perform the update.</param>
            <param name="previousVersion">The original version of the item before these changes were made (used for conflict detection).</param>
            <param name="changes">The list of changed property names.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.IProviderService">
            <summary>
            Central unit to get access to different types of provider inputs.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IProviderService.GetProviderInput(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Returns a named provider as the source of input. Live stream first, VOD stream second.
            </summary>
            <param name="scope">Scope of provider.</param>
            <param name="name">Name of provider.</param>
            <returns>null if nothing found.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IProviderService.GetLiveProviderInput(FluorineFx.Messaging.Api.IScope,System.String,System.Boolean)">
            <summary>
            Returns a named Live provider as the source of input.
            </summary>
            <param name="scope">Scope of provider.</param>
            <param name="name">Name of provider.</param>
            <param name="needCreate">Whether there's need to create basic scope if that doesn't exist.</param>
            <returns>null if not found.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IProviderService.GetVODProviderInput(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Returns a named VOD provider as the source of input.
            </summary>
            <param name="scope">Scope of provider.</param>
            <param name="name">Name of provider.</param>
            <returns>null if not found.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IProviderService.GetVODProviderFile(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Returns a named VOD source file.
            </summary>
            <param name="scope">Scope of provider.</param>
            <param name="name">Name of provider.</param>
            <returns>null if not found</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IProviderService.RegisterBroadcastStream(FluorineFx.Messaging.Api.IScope,System.String,FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
            <summary>
            Registers a broadcast stream to a scope.
            </summary>
            <param name="scope">Scope.</param>
            <param name="name">Name of stream.</param>
            <param name="broadcastStream">Broadcast stream to register.</param>
            <returns>true if register successfully.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IProviderService.GetBroadcastStreamNames(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Returns names of existing broadcast streams in a scope. 
            </summary>
            <param name="scope">Scope to get stream names from.</param>
            <returns>List of stream names.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IProviderService.UnregisterBroadcastStream(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Unregister a broadcast stream of a specific name from a scope.
            </summary>
            <param name="scope">Scope.</param>
            <param name="name">Stream name.</param>
            <returns>true if unregister successfully.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.DummyBWControlService">
            <summary>
            A dummy bandwidth control service (bandwidth controller) that always has token available.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.ITokenBucket">
            <summary>
            Token bucket is used to control the bandwidth used by a stream or a connection or a client.
            There's a background thread that distributes tokens to the buckets in the system according
            to the configuration of the bucket. The configuration includes how fast the tokens are distributed.
            When a stream, for example, needs to send out a packet, the packet's byte count is calculated and
            each byte corresponds to a token in the bucket. The stream is assigned a bucket and the tokens in
            the bucket are acquired before the packet can be sent out. So if the speed(or bandwidth) in
            configuration is low, the stream can't send out packets fast. 
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ITokenBucket.AcquireToken(System.Int64,System.Int64)">
            <summary>
            Acquire tokens amount of tokenCount. Waiting wait milliseconds if token not available.
            </summary>
            <param name="tokenCount">The count of tokens to acquire.</param>
            <param name="wait">Milliseconds to wait. 0 means no wait and any value below zero means wait forever. </param>
            <returns>true if successfully acquired or false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ITokenBucket.AcquireTokenNonblocking(System.Int64,FluorineFx.Messaging.Rtmp.Stream.ITokenBucketCallback)">
            <summary>
            Nonblockingly acquire token. If the token is not available the callback will be executed when the token
            is available. The tokens are not consumed automatically before callback,
            so it's recommended to acquire token again in callback function.
            </summary>
            <param name="tokenCount">Number of tokens.</param>
            <param name="callback">Callback.</param>
            <returns>true if successfully acquired or false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ITokenBucket.AcquireTokenBestEffort(System.Int64)">
            <summary>
            Nonblockingly acquire token. The upper limit is specified. If
            not enough tokens are left in bucket, all remaining will be returned.
            </summary>
            <param name="upperLimitCount">Upper limit of aquisition.</param>
            <returns>Remaining tokens from bucket.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ITokenBucket.Reset">
            <summary>
            Reset this token bucket. All pending threads are woken up with false
            returned for acquiring token and callback is removed without calling back.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ITokenBucket.Capacity">
            <summary>
            Gets the capacity of this bucket in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ITokenBucket.Speed">
            <summary>
            Gets the amount of tokens increased per millisecond.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.IBWControlContext">
            <summary>
            The registry context for a controllable.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IBWControlContext.GetBWControllable">
            <summary>
            Returns the controllable that registered.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpServerConnection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpConnection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IServiceCapableConnection">
            <summary>
            Connection that has options to invoke and handle remote calls.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Invoke(FluorineFx.Messaging.Api.Service.IServiceCall)">
            <summary>
            Invokes service using service call object.
            </summary>
            <param name="serviceCall">Service call object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Invoke(FluorineFx.Messaging.Api.Service.IServiceCall,System.Byte)">
            <summary>
            Invokes service using service call object and channel.
            </summary>
            <param name="serviceCall">Service call object.</param>
            <param name="channel">Channel to use.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Invoke(System.String)">
            <summary>
            Invoke method by name.
            </summary>
            <param name="method">Method name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Invoke(System.String,FluorineFx.Messaging.Api.Service.IPendingServiceCallback)">
            <summary>
            Invoke method by name with callback.
            </summary>
            <param name="method">Method name.</param>
            <param name="callback">Callback used to handle return values.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Invoke(System.String,System.Object[])">
            <summary>
            Invoke method with parameters.
            </summary>
            <param name="method">Method name.</param>
            <param name="parameters">Invocation parameters passed to the method.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Invoke(System.String,System.Object[],FluorineFx.Messaging.Api.Service.IPendingServiceCallback)">
            <summary>
            Invoke method with parameters and callback.
            </summary>
            <param name="method">Method name.</param>
            <param name="parameters">Invocation parameters passed to the method.</param>
            <param name="callback">Callback used to handle return values.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Notify(FluorineFx.Messaging.Api.Service.IServiceCall)">
            <summary>
            Notifies service using service call object.
            </summary>
            <param name="serviceCall">Service call object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Notify(FluorineFx.Messaging.Api.Service.IServiceCall,System.Byte)">
            <summary>
            Notifies service using service call object and channel.
            </summary>
            <param name="serviceCall">Service call object.</param>
            <param name="channel">Channel to use.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Notify(System.String)">
            <summary>
            Notifies method by name.
            </summary>
            <param name="method">Method name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IServiceCapableConnection.Notify(System.String,System.Object[])">
            <summary>
            Notifies method with parameters.
            </summary>
            <param name="method">Method name.</param>
            <param name="parameters">Parameters passed to the method.</param>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._channels">
            <summary>
            Connection channels.
            Integer, Channel
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._pendingCalls">
            <summary>
            Stores pending calls and ids as pairs.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._deferredResults">
            <summary>
            Deferred results set.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._invokeId">
            <summary>
            Identifier for remote calls.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._lastPingSent">
            <summary>
            Timestamp when last ping command was sent.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._lastPongReceived">
            <summary>
            Timestamp when last ping result was received.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._lastPingTime">
            <summary>
            Last ping timestamp.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._clientBytesRead">
            <summary>
            Number of bytes the client reported to have received.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._bytesReadInterval">
            <summary>
            Data read interval
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._nextBytesRead">
            <summary>
            Number of bytes to read next.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpConnection._lastBytesRead">
            <summary>
            Previously number of bytes read from connection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Connect(FluorineFx.Messaging.Api.IScope,System.Object[])">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="newScope"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Timeout">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Close">
            <summary>
            Closes the connection. This will disconnect the client from the associated scope.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.IsChannelUsed(System.Int32)">
            <summary>
            Checks whether a channel is used.
            </summary>
            <param name="channelId">Channel id.</param>
            <returns><code>true</code> if channel is in use, <code>false</code> otherwise</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.GetChannel(System.Int32)">
            <summary>
            Returns channel by id.
            </summary>
            <param name="channelId">The channel id.</param>
            <returns>Channel object by id.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.CloseChannel(System.Int32)">
            <summary>
            Closes channel.
            </summary>
            <param name="channelId">Channel id</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.GetStreamIdForChannel(System.Int32)">
            <summary>
            Returns a stream id for given channel id.
            </summary>
            <param name="channelId">Channel id.</param>
            <returns>Id of stream that channel belongs to.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.GetPendingCall(System.Int32)">
            <summary>
            Gets pending call service by id.
            </summary>
            <param name="invokeId">Pending call service id.</param>
            <returns>Pending call service object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Write(FluorineFx.Messaging.Rtmp.RtmpPacket)">
            <summary>
            Write a RTMP packet.
            </summary>
            <param name="packet">The RTMP packet.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.WritingMessage(FluorineFx.Messaging.Rtmp.RtmpPacket)">
            <summary>
            Mark message as being written.
            </summary>
            <param name="packet">The RTMP packet</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Ping">
            <summary>
            Start measuring the roundtrip time for a packet on the connection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Ping(FluorineFx.Messaging.Rtmp.Event.Ping)">
            <summary>
            Start measuring the roundtrip time for a packet on the connection.
            </summary>
            <param name="ping"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.PingReceived(FluorineFx.Messaging.Rtmp.Event.Ping)">
            <summary>
            Marks that pingback was received.
            </summary>
            <param name="pong"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Invoke(FluorineFx.Messaging.Api.Service.IServiceCall)">
            <summary>
            Invokes service using service call object.
            </summary>
            <param name="serviceCall">Service call object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Invoke(FluorineFx.Messaging.Api.Service.IServiceCall,System.Byte)">
            <summary>
            Invokes service using service call object and channel.
            </summary>
            <param name="serviceCall">Service call object.</param>
            <param name="channel">Channel to use.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Invoke(System.String)">
            <summary>
            Invoke method by name.
            </summary>
            <param name="method">Method name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Invoke(System.String,FluorineFx.Messaging.Api.Service.IPendingServiceCallback)">
            <summary>
            Invoke method by name with callback.
            </summary>
            <param name="method">Method name.</param>
            <param name="callback">Callback used to handle return values.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Invoke(System.String,System.Object[])">
            <summary>
            Invoke method with parameters.
            </summary>
            <param name="method">Method name.</param>
            <param name="parameters">Invocation parameters passed to the method.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Invoke(System.String,System.Object[],FluorineFx.Messaging.Api.Service.IPendingServiceCallback)">
            <summary>
            Invoke method with parameters and callback.
            </summary>
            <param name="method">Method name.</param>
            <param name="parameters">Invocation parameters passed to the method.</param>
            <param name="callback">Callback used to handle return values.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Notify(FluorineFx.Messaging.Api.Service.IServiceCall)">
            <summary>
            Notifies service using service call object.
            </summary>
            <param name="serviceCall">Service call object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Notify(FluorineFx.Messaging.Api.Service.IServiceCall,System.Byte)">
            <summary>
            Notifies service using service call object and channel.
            </summary>
            <param name="serviceCall">Service call object.</param>
            <param name="channel">Channel to use.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Notify(System.String)">
            <summary>
            Notifies method by name.
            </summary>
            <param name="method">Method name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.Notify(System.String,System.Object[])">
            <summary>
            Notifies method with parameters.
            </summary>
            <param name="method">Method name.</param>
            <param name="parameters">Parameters passed to the method.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.ToString">
            <summary>
            Returns a string that represents the current RtmpConnection object.
            </summary>
            <returns>A string that represents the current RtmpConnection object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.MessageReceived">
            <summary>
            Increases number of read messages by one. Updates number of bytes read.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.UpdateBytesRead">
            <summary>
            Update number of bytes to read next value.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.CreateOutputStream(System.Int32)">
            <summary>
            Creates output stream object from stream id. Output stream consists of audio, data and video channels.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>Output stream object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.RegisterDeferredResult(FluorineFx.Messaging.Rtmp.DeferredResult)">
            <summary>
            Registers deferred result.
            </summary>
            <param name="result">Result to register.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.UnregisterDeferredResult(FluorineFx.Messaging.Rtmp.DeferredResult)">
            <summary>
            Unregister deferred result.
            </summary>
            <param name="result">Result to unregister.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpConnection.OnInactive">
            <summary>
            Inactive state event handler.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpConnection.InvokeId">
            <summary>
            Gets identifier for remote calls.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpConnection.LastPingTime">
            <summary>
            Gets roundtrip time of last ping command.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpConnection.ReadBytes">
            <summary>
            Gets the total number of bytes read from the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpConnection.WrittenBytes">
            <summary>
            Gets the total number of bytes written to the connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpConnection.ClientBytesRead">
            <summary>
            Gets the number of bytes the client reported to have received.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection">
            <summary>
            A connection that supports streaming.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.ReserveStreamId">
            <summary>
            Returns a reserved stream id for use.
            According to FCS/FMS regulation, the base is 1.
            </summary>
            <returns>Reserved stream id.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.UnreserveStreamId(System.Int32)">
            <summary>
            Unreserve this id for future use.
            </summary>
            <param name="streamId">ID of stream to unreserve.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.DeleteStreamById(System.Int32)">
            <summary>
            Deletes the stream with the given id.
            </summary>
            <param name="streamId">Id of stream to delete.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.GetStreamById(System.Int32)">
            <summary>
            Get a stream by its id.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>Stream with given id.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.NewSingleItemSubscriberStream(System.Int32)">
            <summary>
            Creates a stream that can play only one item.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>New subscriber stream that can play only one item.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.NewPlaylistSubscriberStream(System.Int32)">
            <summary>
            Creates a stream that can play a list.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>New stream that can play sequence of items.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.NewBroadcastStream(System.Int32)">
            <summary>
            Creates a broadcast stream.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>New broadcast stream.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.GetPendingVideoMessages(System.Int32)">
            <summary>
            Total number of video messages that are pending to be sent to a stream.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>Number of pending video messages.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.GetStreamByChannelId(System.Int32)">
            <summary>
            Returns a stream by given channel id.
            </summary>
            <param name="channelId">The channel id.</param>
            <returns>Stream that channel belongs to the specified channel.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamCapableConnection.GetStreams">
            <summary>
            Returns a collection of client streams.
            </summary>
            <returns></returns>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpServerConnection._streams">
            <summary>
            Client streams.
            Map(Integer, IClientStream)
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpServerConnection._streamBuffers">
            <summary>
            Remembers stream buffer durations
            Map(Integer, Integer)
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpServerConnection._pendingVideos">
            <summary>
            Map for pending video packets and stream IDs
            Map(Integer, AtomicInteger)
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpServerConnection._streamCount">
            <summary>
            Number of streams used.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpServerConnection._bwConfig">
            <summary>
            Bandwidth configure.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpServerConnection._bwContext">
            <summary>
            Bandwidth context used by bandwidth controller.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.RtmpServerConnection._keepAliveJobName">
            <summary>
            Name of job that keeps connection alive.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.StartRoundTripMeasurement">
            <summary>
            Starts measurement.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.GetPendingVideoMessages(System.Int32)">
            <summary>
            Total number of video messages that are pending to be sent to a stream.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>Number of pending video messages.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.GetStreamById(System.Int32)">
            <summary>
            Get a stream by its id.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>Stream with given id.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.ReserveStreamId">
            <summary>
            Returns a reserved stream id for use.
            According to FCS/FMS regulation, the base is 1.
            </summary>
            <returns>Reserved stream id.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.UnreserveStreamId(System.Int32)">
            <summary>
            Unreserve this id for future use.
            </summary>
            <param name="streamId">ID of stream to unreserve.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.DeleteStreamById(System.Int32)">
            <summary>
            Deletes the stream with the given id.
            </summary>
            <param name="streamId">Id of stream to delete.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.NewSingleItemSubscriberStream(System.Int32)">
            <summary>
            Creates a stream that can play only one item.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>New subscriber stream that can play only one item.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.NewPlaylistSubscriberStream(System.Int32)">
            <summary>
            Creates a stream that can play a list.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>New stream that can play sequence of items.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.CreateStreamName">
            <summary>
            Generates new stream name.
            </summary>
            <returns>New stream name.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.NewBroadcastStream(System.Int32)">
            <summary>
            Creates a broadcast stream.
            </summary>
            <param name="streamId">Stream id.</param>
            <returns>New broadcast stream.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.RegisterStream(FluorineFx.Messaging.Api.Stream.IClientStream)">
            <summary>
            Store a stream in the connection.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.GetParentBWControllable">
            <summary>
            Returns parent IBWControllable object.
            </summary>
            <returns>Parent IBWControllable.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServerConnection.GetStreams">
            <summary>
            Gets collection of IClientStream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpServerConnection.BandwidthConfiguration">
            <summary>
            Gets or sets bandwidth configuration object.
            Bandwidth configuration allows you to set bandwidth size for audio, video and total amount.
            </summary>
        </member>
        <member name="T:FluorineFx.Scheduling.IScheduledJob">
            <summary>
            Interface that must be implemented by classes that can be scheduled for periodic execution.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.IScheduledJob.Execute(FluorineFx.Scheduling.ScheduledJobContext)">
            <summary>
            Called each time the job is triggered by the scheduling service.
            </summary>
            <param name="context">The execution context.</param>
        </member>
        <member name="P:FluorineFx.Scheduling.IScheduledJob.Name">
            <summary>
            Get or sets the name of this job.
            </summary>
        </member>
        <member name="P:FluorineFx.Scheduling.IScheduledJob.JobDataMap">
            <summary>
            Get or set the data map that is associated with the job.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent">
            <summary>
            Event object corresponds to the connect/disconnect events among providers/consumers and pipes.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.PROVIDER_CONNECT_PULL">
            <summary>
            A provider connects as pull mode.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.PROVIDER_CONNECT_PUSH">
            <summary>
            A provider connects as push mode.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.PROVIDER_DISCONNECT">
            <summary>
            A provider disconnects.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.CONSUMER_CONNECT_PULL">
            <summary>
            A consumer connects as pull mode.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.CONSUMER_CONNECT_PUSH">
            <summary>
            A consumer connects as push mode.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.CONSUMER_DISCONNECT">
            <summary>
            A consumer disconnects.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent._provider">
            <summary>
            Provider.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent._consumer">
            <summary>
            Consumer.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent._type">
            <summary>
            Event type.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent._parameterMap">
            <summary>
            Params map.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.#ctor(System.Object)">
            <summary>
            Construct an object with the specific pipe as the source.
            </summary>
            <param name="source">A pipe that triggers this event.</param>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.Provider">
            <summary>
            Gets or sets pipe connection provider.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.Consumer">
            <summary>
            Gets or sets pipe connection consumer.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.Type">
            <summary>
            Gets or sets event type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.ParameterMap">
            <summary>
            Gets or sets event parameters.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent.Source">
            <summary>
            Gets or sets the vent source.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:FluorineFx.IO.FLV.MetaData">
            <summary>
            FLV MetaData
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.MetaData._cuePoints">
            <summary>
            Cue points array. Cue points can be injected on fly like any other data even on client-side.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaData.CanSeekToEnd">
            <summary>
            Gets or sets whether the video can seek to end.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaData.VideoCodecId">
            <summary>
            Gets or sets the video codec id.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaData.AudioCodecId">
            <summary>
            Gets or sets the audio codec id.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaData.FrameRate">
            <summary>
            Gets or sets the FLV framerate in frames per second.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaData.VideoDataRate">
            <summary>
            Gets or sets the video data rate.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaData.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaData.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaData.Duration">
            <summary>
            Gets or sets the video duration in seconds.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaData.MetaCue">
            <summary>
            Gets or set the cue points.
            </summary>
        </member>
        <member name="T:FluorineFx.PagingContext">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.PagingContext.Offset">
            <summary>
            The offset of the first row to return.
            </summary>
        </member>
        <member name="P:FluorineFx.PagingContext.Limit">
            <summary>
            The maximum number of rows to return.
            </summary>
        </member>
        <member name="P:FluorineFx.PagingContext.Current">
            <summary>
            Gets the PagingContext object for the current request.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamListener">
            <summary>
            Listener that is notified about packets received from a stream.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.Services.ServiceClass">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.Services.ServiceClass.GetMethods">
            <summary>
            Gets the collection of methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Json.Services.ServiceClass.FindMethodByName(System.String)">
            <summary>
            Find a method by name.
            </summary>
            <param name="name">Method name.</param>
            <returns>The Method instance if found, null otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Json.Services.ServiceClass.GetMethodByName(System.String)">
            <summary>
            Return a method by name.
            </summary>
            <param name="name">Method name.</param>
            <returns>The Method instance if found, throws MissingMethodException excpetion otherwise.</returns>
        </member>
        <member name="P:FluorineFx.Json.Services.ServiceClass.Name">
            <summary>
            Gets the service class name.
            </summary>
        </member>
        <member name="P:FluorineFx.Json.Services.ServiceClass.Description">
            <summary>
            Gets the service class description.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpOR">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpNOT">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Context.FluorineWebContext">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Context.FluorineContext">
            <summary>
            Similary to the ASP.NET HttpContext class you can access the Fluorine context for the current request from any code inside the same application domain.
            The context information is accessed through the static property Current on the FluorineContext class.
            </summary>
            <remarks>
            <para>
            For an AMF channel (Http request) the Fluorine context wrapps the underlying HttpContext.
            </para>
            <para>
            The Fluorine context is available only when client requests are handled (both HTTP and RTMP) and is not avaliable in a newly started thread.
            </para>
            <para>
            It is recommended to use FluorineContext instead of HttpContext if you do not want to tie your application to ASP.NET that would otherwise work without change with a RTMP channel (both APS.NET hosted or FluorineFx Windows Service hosted).
            If you are using both AMF and RTMP channels from the same Flex application do not expect that the Session will always access the underlying HttpSession object. For RTMP calls the ASP.NET HttpSession object is not accessible and the Session in this case references the RTMP connection's attribute store.
            In this scenario the Client object can be used for identification and common storage (Flex only).
            </para>
            </remarks>
            <example>
            	<code lang="CS">
                string clientId = FluorineContext.Current.ClientId;
            </code>
            </example>
        </member>
        <member name="F:FluorineFx.Context.FluorineContext.FluorineContextKey">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FluorineContext.FluorineTicket">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FluorineContext.FluorinePrincipalAttribute">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FluorineContext.FluorineSessionAttribute">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FluorineContext.FluorineConnectionKey">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FluorineContext.FluorineClientKey">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FluorineContext.FluorineStreamIdKey">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FluorineContext.FluorineDataServiceTransaction">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FluorineContext.FlexClientIdHeader">
            <summary>
            Global FlexClient Id value stored by FluorineFx.
            </summary>
        </member>
        <member name="M:FluorineFx.Context.FluorineContext.GetFullPath(System.String)">
            <summary>
            Converts a path into a fully qualified local file path.
            If the path is relative it is taken as relative from the application base directory.
            </summary>
            <param name="path">The path to convert.</param>
            <returns>The fully qualified path.</returns>
        </member>
        <member name="M:FluorineFx.Context.FluorineContext.StorePrincipal(System.Security.Principal.IPrincipal,System.String,System.String)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="principal"></param>
            <param name="userId"></param>
            <param name="password"></param>
        </member>
        <member name="M:FluorineFx.Context.FluorineContext.RestorePrincipal(FluorineFx.Security.ILoginCommand)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="loginCommand"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Context.FluorineContext.ClearPrincipal">
            <summary>
            Clears the current Principal.
            </summary>
        </member>
        <member name="M:FluorineFx.Context.FluorineContext.GetResource(System.String)">
            <summary>
            Return an <see cref="T:FluorineFx.Context.IResource"/> handle for the specified location.
            </summary>
            <param name="location">The resource location.</param>
            <returns>An appropriate <see cref="T:FluorineFx.Context.IResource"/> handle.</returns>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.Current">
            <summary>Gets the FluorineContext object for the current HTTP/RTMP request.</summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.Items">
            <summary>
            Gets a key-value collection that can be used to organize and share data between
            an IHttpModule and an IHttpHandler during an HTTP request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.ApplicationState">
            <summary>
            Enables sharing of global information across multiple sessions and requests within an application.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.User">
            <summary>Gets or sets security information for the current request.</summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.Session">
            <summary>
            Gets the SessionState instance for the current request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.ApplicationBaseDirectory">
            <summary>
            Gets the base directory for this <see cref="T:System.AppDomain"/>
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.RootPath">
            <summary>
            Gets the physical drive path of the application directory for the application hosted in the current application domain.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.RequestPath">
            <summary>
            Gets the virtual path of the current request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.RequestApplicationPath">
            <summary>
            Gets the ASP.NET application's virtual application root path on the server.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.PhysicalApplicationPath">
            <summary>
            Gets the physical file system path of the currently executing server application's root directory.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.ApplicationPath">
            <summary>
            Gets the ASP.NET application's application root path on the server.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.AbsoluteUri">
            <summary>
            Gets the absolute URI from the URL of the current request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.ActivationMode">
            <summary>
            Gets activation mode passed through the HTTP query string.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.Connection">
            <summary>
            Gets the current Connection object.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.Client">
            <summary>
            Gets the current Client object.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineContext.ClientId">
            <summary>
            Gets the current Client identity.
            </summary>
        </member>
        <member name="M:FluorineFx.Context.FluorineWebContext.GetResource(System.String)">
            <summary>
            Return an <see cref="T:FluorineFx.Context.IResource"/> handle for the
            </summary>
            <param name="location">The resource location.</param>
            <returns>An appropriate <see cref="T:FluorineFx.Context.IResource"/> handle.</returns>
        </member>
        <member name="P:FluorineFx.Context.FluorineWebContext.Items">
            <summary>
            Gets a key-value collection that can be used to organize and share data between an IHttpModule and an IHttpHandler during an HTTP request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineWebContext.ApplicationState">
            <summary>
            Enables sharing of global information across multiple sessions and requests within an ASP.NET application.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineWebContext.User">
            <summary>
            Gets or sets security information for the current HTTP request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineWebContext.RootPath">
            <summary>
            Gets the physical drive path of the application directory for the application hosted in the current application domain.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineWebContext.RequestPath">
            <summary>
            Gets the virtual path of the current request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineWebContext.RequestApplicationPath">
            <summary>
            Gets the ASP.NET application's virtual application root path on the server.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineWebContext.AbsoluteUri">
            <summary>
            Gets the absolute URI from the URL of the current request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineWebContext.Session">
            <summary>
            Gets the SessionState instance for the current HTTP request.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.CacheMap">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.CollectionComparer">
            <summary>
            Lexicographical compare for <b>IEnumerable</b>s.
            </summary>
            <remarks>
            Performs memberwise compare of two collections using given comparer. 
            See <see cref="M:FluorineFx.Collections.CollectionComparer.Compare(System.Object,System.Object)">Compare</see>.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.CollectionComparer.#ctor">
            <summary>
            Creates new instance of collection comparer based on Comparer.Default.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.CollectionComparer.#ctor(System.Collections.IComparer)">
            <summary>
            Creates new instance of collection comparer based on given comparer object.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.CollectionComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two collections.
            </summary>
            <returns>
            <list type="table">
            <listheader><item><term>Condition</term><description>Value</description></item></listheader>
            <item><term>x&lt;y</term><description>-1</description></item>
            <item><term>x equivalent to y</term><description>0</description></item>
            <item><term>x&gt;y</term><description>1</description></item>
            </list>
            </returns>
            <remarks>
            <para>
            If neither x nor y implements <b>IEnumerable</b>,
            they are compared using underlying comparer object. 
            </para>
            <para>
            If one of x,y is an <b>IEnumerable</b> and the other is not, enumerable
            is greater than plain object.
            </para>
            <para>
            If both x,y implement <b>IEnumerable</b>, they are compared member by member
            using underlying comparer object. First pair that compares unequal
            determines the outcome of the whole comparison.
            </para>
            <para>
            If x is a proper subset of y, y is greater than x 
            </para>
            </remarks>
            <example>
            <para>{1, 10} &gt; { 1, 2, 100, 1000 }</para>
            <para>{1, 2 } &lt; { 1, 2, 3 }</para>
            </example>
        </member>
        <member name="P:FluorineFx.Collections.CollectionComparer.Default">
            <summary>
            Default collection comparer, based on Comparer.Default.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.ObjectPool">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.MethodHandler">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.MethodHandler.#ctor">
            <summary>
            Initializes a new instance of the MethodHandler class.
            </summary>
        </member>
        <member name="M:FluorineFx.MethodHandler.GetMethod(System.Type,System.String,System.Collections.IList)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.MethodHandler.GetMethod(System.Type,System.String,System.Collections.IList,System.Boolean)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="arguments"></param>
            <param name="exactMatch"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.MethodHandler.GetMethod(System.Type,System.String,System.Collections.IList,System.Boolean,System.Boolean)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="arguments"></param>
            <param name="exactMatch"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.MethodHandler.GetMethod(System.Type,System.String,System.Collections.IList,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="arguments"></param>
            <param name="exactMatch"></param>
            <param name="throwException"></param>
            <param name="traceError"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Services.MessageService">
            <summary>
            The MessageService class is the Service implementation that manages point-to-point and publish-subscribe messaging.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Services.MessageService.#ctor(FluorineFx.Messaging.MessageBroker,FluorineFx.Messaging.Config.ServiceSettings)">
            <summary>
            Initializes a new instance of the MessageService class.
            </summary>
            <param name="messageBroker"></param>
            <param name="serviceSettings"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Services.MessageService.NewDestination(FluorineFx.Messaging.Config.DestinationSettings)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="destinationSettings"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.MessageService.ServiceMessage(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Handles a message routed to the service by the MessageBroker.
            </summary>
            <param name="message">The message that should be handled by the service.</param>
            <returns>The result of the message processing.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.MessageService.GetSubscriber(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Returns a collection of client Ids of the clients subscribed to receive this message.
            If the message has a subtopic header, the subtopics are used to filter the subscribers. 
            If there is no subtopic header, subscribers to the destination with no subtopic are used.
            Selector expressions if available will be evaluated to filter the subscribers.
            </summary>
            <param name="message">The message to send to subscribers.</param>
            <returns>Collection of subscribers.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Services.MessageService.GetSubscriber(FluorineFx.Messaging.Messages.IMessage,System.Boolean)">
            <summary>
            Returns a collection of client Ids of the clients subscribed to receive this message.
            If the message has a subtopic header, the subtopics are used to filter the subscribers. 
            If there is no subtopic header, subscribers to the destination with no subtopic are used. 
            If a subscription has a selector expression associated with it and evalSelector is true, 
            the subscriber is only returned if the selector expression evaluates to true.
            </summary>
            <param name="message">The message to send to subscribers.</param>
            <param name="evalSelector">Indicates whether evaluate selector expressions.</param>
            <returns>Collection of subscribers.</returns>
            <remarks>
            Use this method to do additional processing to the subscribers list.
            </remarks>
        </member>
        <member name="M:FluorineFx.Messaging.Services.MessageService.PushMessageToClients(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Pushes a message to all clients that are subscribed to the destination targeted by this message.
            </summary>
            <param name="message">The Message to push to the destination's subscribers.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Services.MessageService.PushMessageToClients(System.Collections.ICollection,FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Pushes a message to the specified clients (subscribers).
            </summary>
            <param name="subscribers">Collection of subscribers.</param>
            <param name="message">The Message to push to the subscribers.</param>
            <remarks>
            The Collection of subscribers is a collection of client Id strings.
            </remarks>
        </member>
        <member name="T:FluorineFx.Messaging.GlobalScope">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Scope">
            <summary>
            The scope object.
            
            A statefull object shared between a group of clients connected to the same
            context path. Scopes are arranged in a hierarchical way, so its possible for
            a scope to have a parent. If a client is connect to a scope then they are
            also connected to its parent scope. The scope object is used to access
            resources, shared object, streams, etc.
            
            The following are all names for scopes: application, room, place, lobby.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IScope">
            <summary>
            The scope object.
            
            A statefull object shared between a group of clients connected to the same
            context path. Scopes are arranged in a hierarchical way, so its possible for
            a scope to have a parent. If a client is connect to a scope then they are
            also connected to its parent scope. The scope object is used to access
            resources, shared object, streams, etc.
            
            The following are all names for scopes: application, room, place, lobby.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.Connect(FluorineFx.Messaging.Api.IConnection)">
            <summary>
            Adds given connection to the scope.
            </summary>
            <param name="connection">Connection object.</param>
            <returns>true on success, false if the specified connection already belongs to this scope</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.Connect(FluorineFx.Messaging.Api.IConnection,System.Object[])">
            <summary>
            Adds given connection to the scope.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="parameters">Parameters passed.</param>
            <returns>true on success, false if the specified connection already belongs to this scope</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.Disconnect(FluorineFx.Messaging.Api.IConnection)">
            <summary>
            Removes the specified connection from list of scope connections. This disconnects
            all clients of the specified connection from the scope.
            </summary>
            <param name="conn">Connection object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.HasChildScope(System.String)">
            <summary>
            Check to see if this scope has a child scope matching a given name.
            </summary>
            <param name="name">The name of the child scope.</param>
            <returns>true if a child scope exists, otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.HasChildScope(System.String,System.String)">
            <summary>
            Checks whether scope has a child scope with given name and type.
            </summary>
            <param name="type">Child scope type.</param>
            <param name="name">Child scope name.</param>
            <returns>true if a child scope exists, otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.CreateChildScope(System.String)">
            <summary>
            Creates child scope with name given and returns success value.
            </summary>
            <param name="name">New child scope name.</param>
            <returns>true if child scope was successfully creates, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.AddChildScope(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Adds scope as a child scope.
            </summary>
            <param name="scope">Add the specified scope.</param>
            <returns>true if child scope was successfully added, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.RemoveChildScope(FluorineFx.Messaging.Api.IBasicScope)">
            <summary>
            Removes scope from the children scope list.
            </summary>
            <param name="scope">Removes the specified scope.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.GetScopeNames">
            <summary>
            Gets the child scope names.
            </summary>
            <returns>Collection of child scope names.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.GetBasicScopeNames(System.String)">
            <summary>
            Returns an iterator of basic scope names.
            </summary>
            <param name="type">Child scope type.</param>
            <returns>An iterator of basic scope names.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.GetBasicScope(System.String,System.String)">
            <summary>
            Gets a child scope by name.
            </summary>
            <param name="type">Child scope type.</param>
            <param name="name">Name of the child scope.</param>
            <returns>Scope object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.GetScope(System.String)">
            <summary>
            Returns scope by name.
            </summary>
            <param name="name">Scope name.</param>
            <returns>Scope with the specified name.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.GetClients">
            <summary>
            Gets a set of connected clients.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.GetConnections">
            <summary>
            Get a connection iterator. You can call remove, and the connection will be closed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScope.LookupConnections(FluorineFx.Messaging.Api.IClient)">
            <summary>
            Returns collection of connections for the specified client.
            </summary>
            <param name="client">The client object.</param>
            <returns>Collection of connections.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IScope.Context">
            <summary>
            Returns scope context.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IScope.HasHandler">
            <summary>
            Checks whether scope has handler or not.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IScope.Handler">
            <summary>
            Gets handler of the scope.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IScope.ContextPath">
            <summary>
            Gets context path.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Scope._children">
            <summary>
            String, IBasicScope
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Scope._clients">
            <summary>
            IClient, Set(IConnection)
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Scope.Uninit">
            <summary>
            Uninitialize scope and unregister from parent.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Scope.AddService(System.Type,System.Object)">
            <summary>
            Adds the specified service to the scope.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="service">An instance of the service type to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Scope.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the specified service to the scope.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="service">An instance of the service type to add.</param>
            <param name="promote"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Scope.RemoveService(System.Type)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Scope.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <param name="promote"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Scope.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType or a null reference (Nothing in Visual Basic) if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Scope.Start">
            <summary>
            Starts scope.
            </summary>
            <returns><code>true</code> if scope has handler and it's start method returned true, <code>false</code> otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Scope.Stop">
            <summary>
            Stops scope.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Scope.GetContext">
            <summary>
            Returns scope context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IGlobalScope">
            <summary>
            The global scope that acts as root for all applications in a host.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IGlobalScope.Register">
            <summary>
            Register the global scope in the server and initialize it.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IGlobalScope.ServiceProvider">
            <summary>
            Gets the root service provide object.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.Ping">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.CacheFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.AMFEndpoint">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.EndpointBase">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.IEndpoint">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.SecurityConstraint">
            <summary>
            Contains the properties for declaring a security constraint inline(destination) or globally.
            This is the <b>security-constraint</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.SecurityConstraint.Id">
            <summary>
            Gets the identity of the security constraint.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.SecurityConstraint.AuthMethod">
            <summary>
            Gets the authentication method of the security constraint.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.SecurityConstraint.Roles">
            <summary>
            Gets the role memberships of the security constraint.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.SecurityConstraintRef">
            <summary>
            Contains the properties for declaring a security constraint reference.
            This is the <b>security-constraint</b> element with a ref attribute in the services-config.xml file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.SecurityConstraintRef.Reference">
            <summary>
            Gets the security constraint reference.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.SecuritySettings">
            <summary>
            Contains the properties for declaring security setting.
            This is the <b>security</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Config.SecuritySettings._destinationSettings">
            <summary>
            Null for global security settings.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.SecuritySettings.GetRoles">
            <summary>
            Returns the role memberships from the security section.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.SecuritySettings.LoginCommands">
            <summary>
            Gets the login commands included in the security section of the Flex services configuration file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.SecuritySettings.SecurityConstraints">
            <summary>
            Gets the security constraints included in the security section of the Flex services configuration file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.SecuritySettings.SecurityConstraintRef">
            <summary>
            Gets the security constraints reference for a destination security section.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3BooleanWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0NumberWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3TypedASObjectReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <remarks>
            This reader is used only in case that a requested type is not found and the gateway choose to represent 
            typed objects with ActionScript typed objects.
            </remarks>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.IReflectionOptimizer">
            <summary>
            Reflection optimizer interface.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.IReflectionOptimizer.CreateInstance">
            <summary>
            Performs instantiation of an instance of the underlying class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.IReflectionOptimizer.ReadData(FluorineFx.IO.AMFReader,FluorineFx.AMF3.ClassDefinition)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="reader"></param>
            <param name="classDefinition"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3BooleanFalseReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.CacheableObject">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.CacheableObject.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the CacheableObject class.
            </summary>
            <param name="source"></param>
            <param name="cacheKey"></param>
            <param name="obj"></param>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.CodeDom.BytecodeProvider">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.IBytecodeProvider">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.AMFSerializer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFSerializer.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the AMFSerializer class.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FluorineFx.IO.AMFSerializer.#ctor(FluorineFx.IO.AMFWriter,System.IO.Stream)">
            <summary>
            Initializes a new instance of the AMFSerializer class.
            </summary>
            <param name="writer"></param>
            <param name="stream"></param>
        </member>
        <member name="M:FluorineFx.IO.AMFSerializer.WriteMessage(FluorineFx.IO.AMFMessage)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="amfMessage"></param>
        </member>
        <member name="T:FluorineFx.Exceptions.ServiceNotFoundException">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Exceptions.ServiceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServiceNotFoundException class.
            </summary>
            <param name="serviceName"></param>
        </member>
        <member name="T:FluorineFx.IO.ITagWriter">
            <summary>
            Writes tags to FLV file.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.ITagWriter.WriteHeader">
            <summary>
            Writes the header bytes.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.ITagWriter.WriteTag(FluorineFx.IO.ITag)">
            <summary>
            Writes a Tag object.
            </summary>
            <param name="tag">Tag to write.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.IO.ITagWriter.WriteTag(System.Byte,FluorineFx.Util.ByteBuffer)">
            <summary>
            Write a Tag using bytes.
            </summary>
            <param name="type">Tag type.</param>
            <param name="data">Byte data.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.IO.ITagWriter.WriteStream(System.Byte[])">
            <summary>
            Write a Stream to disk using bytes.
            </summary>
            <param name="buffer">Array of bytes to write.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.IO.ITagWriter.Close">
            <summary>
            Closes a writer.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITagWriter.File">
            <summary>
            Gets the file that is loaded.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITagWriter.Position">
            <summary>
            Gets the position.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITagWriter.BytesWritten">
            <summary>
            Gets the amount of bytes written.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.ITagReader.DecodeHeader">
            <summary>
            Decode the header of the stream.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.ITagReader.HasMoreTags">
            <summary>
            Returns a boolean stating whether the FLV has more tags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.ITagReader.ReadTag">
            <summary>
            Returns a Tag object.
            </summary>
            <returns>Tag.</returns>
        </member>
        <member name="M:FluorineFx.IO.ITagReader.Close">
            <summary>
            Closes the reader and free any allocated memory.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.ITagReader.HasVideo">
            <summary>
            Checks if the reader also has video tags.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.IO.ITagReader.File">
            <summary>
            Gets the file that is loaded.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITagReader.Offset">
            <summary>
            Gets the offet length.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITagReader.BytesRead">
            <summary>
            Gets the amount of bytes read.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITagReader.Duration">
            <summary>
            Gets length in seconds.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITagReader.Position">
            <summary>
            Moves the reader pointer to given position in file.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.Trigger.RepeatIndefinitely">
            <summary>
            Used to indicate the 'repeat count' of the trigger is indefinite. Or in
            other words, the trigger should repeat continually until the trigger's
            ending timestamp.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.#ctor(System.String,System.String)">
            <summary>
            Create a <see cref="T:FluorineFx.Scheduling.Trigger"/> that will occur immediately, and not repeat.
            </summary>
            <param name="name">The name.</param>
            <param name="jobName">The job name.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FluorineFx.Scheduling.Trigger.#ctor(System.String,System.String,System.Int32,System.Int64)" -->
        <member name="M:FluorineFx.Scheduling.Trigger.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Create a <see cref="T:FluorineFx.Scheduling.Trigger"/> that will occur at the given time, and not repeat.
            </summary>
            <param name="name">The name.</param>
            <param name="jobName">The job name.</param>
            <param name="startTimeUtc">A UTC <see cref="T:System.DateTime"/> set to the time for the <see cref="T:FluorineFx.Scheduling.Trigger"/> to fire.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:FluorineFx.Scheduling.Trigger.#ctor(System.String,System.String,System.DateTime,System.Nullable{System.DateTime},System.Int32,System.Int64)" -->
        <member name="M:FluorineFx.Scheduling.Trigger.Triggered">
            <summary>
            Called when the scheduler has decided to 'fire'
            the trigger (Execute the associated <see cref="T:FluorineFx.Scheduling.IScheduledJob"/>), in order to
            give the <see cref="T:FluorineFx.Scheduling.Trigger"/> a chance to update itself for its next
            triggering (if any).
            </summary>
            <seealso cref="T:FluorineFx.Scheduling.JobExecutionException"/>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.ComputeFirstFireTimeUtc">
            <summary>
            Called by the scheduler at the time a <see cref="T:FluorineFx.Scheduling.Trigger"/> is first
            added to the scheduler, in order to have the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            compute its first fire time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.GetFireTimeAfter(System.Nullable{System.DateTime})">
            <summary> 
            Returns the next UTC time at which the <see cref="T:FluorineFx.Scheduling.Trigger"/> will
            fire, after the given UTC time. If the trigger will not fire after the given
            time, <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.GetFireTimeBefore(System.Nullable{System.DateTime})">
            <summary>
            Returns the last UTC time at which the <see cref="T:FluorineFx.Scheduling.Trigger"/> will
            fire, before the given time. If the trigger will not fire before the
            given time, <see langword="null"/> will be returned.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.ComputeNumTimesFiredBetween(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Computes the number of times fired between the two UTC date times.
            </summary>
            <param name="startTimeUtc">The UTC start date and time.</param>
            <param name="endTimeUtc">The UTC end date and time.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.GetMayFireAgain">
            <summary> 
            Determines whether or not the <see cref="T:FluorineFx.Scheduling.Trigger"/> will occur again.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.UpdateAfterMisfire">
            <summary>
            Updates the <see cref="!:SimpleTrigger"/>'s state based on the
            MisfireInstruction value that was selected when the <see cref="!:SimpleTrigger"/>
            was created.
            </summary>
            <remarks>
            If MisfireSmartPolicyEnabled is set to true,
            then the following scheme will be used: <br/>
            <ul>
            <li>If the Repeat Count is 0, then the instruction will
            be interpreted as <see cref="!:MisfireInstruction.SimpleTrigger.FireNow"/>.</li>
            <li>If the Repeat Count is <see cref="F:FluorineFx.Scheduling.Trigger.RepeatIndefinitely"/>, then
            the instruction will be interpreted as <see cref="!:MisfireInstruction.SimpleTrigger.RescheduleNowWithRemainingRepeatCount"/>.
            <b>WARNING:</b> using MisfirePolicy.SimpleTrigger.RescheduleNowWithRemainingRepeatCount 
            with a trigger that has a non-null end-time may cause the trigger to 
            never fire again if the end-time arrived during the misfire time span. 
            </li>
            <li>If the Repeat Count is &gt; 0, then the instruction
            will be interpreted as <see cref="!:MisfireInstruction.SimpleTrigger.RescheduleNowWithExistingRepeatCount"/>.
            </li>
            </ul>
            </remarks>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.SetNextFireTime(System.Nullable{System.DateTime})">
            <summary>
            Set the next UTC time at which the <see cref="!:SimpleTrigger"/> should fire.
            <strong>This method should not be invoked by client code.</strong>
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.SetPreviousFireTime(System.Nullable{System.DateTime})">
            <summary>
            Set the previous UTC time at which the <see cref="!:SimpleTrigger"/> fired.
            <strong>This method should not be invoked by client code.</strong>
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.Trigger.CompareTo(System.Object)">
            <summary>
            Compare the next fire time of this <see cref="T:FluorineFx.Scheduling.Trigger"/> to that of another.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Scheduling.Trigger.MisfireInstruction">
            <summary>
            Get or set the instruction the <see cref="!:IScheduler"/> should be given for
            handling misfire situations for this <see cref="T:FluorineFx.Scheduling.Trigger"/>- the
            concrete <see cref="T:FluorineFx.Scheduling.Trigger"/> type that you are using will have
            defined a set of additional MISFIRE_INSTRUCTION_XXX
            constants that may be passed to this method.
            <p>
            If not explicitly set, the default value is <see cref="!:MisfireInstruction.InstructionNotSet"/>.
            </p>
            </summary>
            <seealso cref="!:Quartz.MisfireInstruction.InstructionNotSet"/>
            <seealso cref="M:FluorineFx.Scheduling.Trigger.UpdateAfterMisfire"/>
            <seealso cref="!:SimpleTrigger"/>
            <seealso cref="!:CronTrigger"/>
        </member>
        <member name="P:FluorineFx.Scheduling.Trigger.RepeatCount">
            <summary>
            Get or set thhe number of times the <see cref="T:FluorineFx.Scheduling.Trigger"/> should
            repeat, after which it will be automatically deleted.
            </summary>
            <seealso cref="F:FluorineFx.Scheduling.Trigger.RepeatIndefinitely"/>
        </member>
        <member name="P:FluorineFx.Scheduling.Trigger.RepeatInterval">
            <summary>
            Get or set the the time interval (in milliseconds) at which the Trigger should repeat.
            </summary>
        </member>
        <member name="P:FluorineFx.Scheduling.Trigger.TimesTriggered">
            <summary>
            Get or set the number of times the <see cref="T:FluorineFx.Scheduling.Trigger"/> has already fired.
            </summary>
        </member>
        <member name="P:FluorineFx.Scheduling.Trigger.FinalFireTimeUtc">
            <summary> 
            Returns the final UTC time at which the <see cref="T:FluorineFx.Scheduling.Trigger"/> will
            fire, if repeatCount is RepeatIndefinitely, null will be returned.
            <p>
            Note that the return time may be in the past.
            </p>
            </summary>
        </member>
        <member name="T:FluorineFx.Net.SyncHandler">
            <summary>
            Represents the method that will handle the Sync event of a RemoteSharedObject object. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A SyncEventArgs object that contains the event data.</param>
        </member>
        <member name="T:FluorineFx.Net.RemoteSharedObject">
            <summary>
            The SharedObject class is used to access, read and store data on remote shared objects, 
            that are shared in real-time by all clients connected to your application.
            </summary>
        </member>
        <member name="F:FluorineFx.Net.RemoteSharedObject._initialSyncReceived">
            <summary>
            Initial synchronization flag.
            </summary>
        </member>
        <member name="F:FluorineFx.Net.RemoteSharedObject._persistentSO">
            <summary>
            true if the client / server created the SO to be persistent
            </summary>
        </member>
        <member name="F:FluorineFx.Net.RemoteSharedObject._source">
            <summary>
            Event listener, actually RTMP connection
            </summary>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.#ctor">
            <summary>
            Initializes a new instance of the NetConnection class.
            </summary>
            <remarks>Do not create directly RemoteSharedObject objects, use the RemoteSharedObject.GetRemote method instead.</remarks>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.GetRemote(System.String,System.String,System.Object)">
            <summary>
            Returns a reference to an object that can be shared across multiple clients by means of a server, such as Flash Media Server.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="remotePath">The URI of the server on which the shared object will be stored. This URI must be identical to the URI of the NetConnection object passed to the SharedObject.Connect() method.</param>
            <param name="persistence">Specifies whether the attributes of the shared object's data property are persistent locally, remotely, or both.</param>
            <returns>A reference to an object that can be shared across multiple clients.</returns>
            <example>
            NetConnection myNC = new NetConnection();
            myNC.Connect("rtmp://[yourDomain].com/applicationName");
            ...
            RemoteSharedObject myRemoteSO = SharedObject.GetRemote("mo", myNC.uri, false);
            myRemoteSO.Connect(myNC);
            </example>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.GetRemote(System.Type,System.String,System.String,System.Object)">
            <summary>
            Returns a reference to an object that can be shared across multiple clients by means of a server, such as Flash Media Server.
            </summary>
            <param name="type">Custom RemoteSharedObject type.</param>
            <param name="name">The name of the object.</param>
            <param name="remotePath">The URI of the server on which the shared object will be stored. This URI must be identical to the URI of the NetConnection object passed to the SharedObject.Connect() method.</param>
            <param name="persistence">Specifies whether the attributes of the shared object's data property are persistent locally, remotely, or both.</param>
            <returns>A reference to an object that can be shared across multiple clients.</returns>
            <example>
            NetConnection myNC = new NetConnection();
            myNC.Connect("rtmp://[yourDomain].com/applicationName");
            ...
            RemoteSharedObject myRemoteSO = SharedObject.GetRemote("mo", myNC.uri, false);
            myRemoteSO.Connect(myNC);
            </example>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.GetRemote(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Returns a reference to an object that can be shared across multiple clients by means of a server, such as Flash Media Server.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="remotePath">The URI of the server on which the shared object will be stored. This URI must be identical to the URI of the NetConnection object passed to the SharedObject.Connect() method.</param>
            <param name="persistence">Specifies whether the attributes of the shared object's data property are persistent locally, remotely, or both.</param>
            <param name="secure">Not supported.</param>
            <returns>A reference to an object that can be shared across multiple clients.</returns>
            <example>
            NetConnection myNC = new NetConnection();
            myNC.Connect("rtmp://[yourDomain].com/applicationName");
            SharedObject myRemoteSO = SharedObject.GetRemote("mo", myNC.uri, false);
            myRemoteSO.Connect(myNC);
            </example>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.Connect(FluorineFx.Net.NetConnection)">
            <summary>
            Connects to a remote shared object on the server through the specified connection. Use this method after 
            issuing SharedObject.GetRemote(...). After a successful connection, the sync event is dispatched. 
            </summary>
            <param name="connection">A NetConnection object (such as one used to communicate with Flash Media Server) that is using the Real-Time Messaging Protocol (RTMP).</param>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.Connect(FluorineFx.Net.NetConnection,System.String)">
            <summary>
            Connects to a remote shared object on the server through the specified connection. Use this method after 
            issuing SharedObject.GetRemote(...). After a successful connection, the sync event is dispatched. 
            </summary>
            <param name="connection">A NetConnection object (such as one used to communicate with Flash Media Server) that is using the Real-Time Messaging Protocol (RTMP).</param>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.Close">
            <summary>
            Closes the connection between a remote shared object and the server.
            </summary>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.SetProperty(System.String,System.Object)">
            <summary>
            Updates the value of a property in a shared object and indicates to the server that the value of the property has changed. 
            The SetProperty() method explicitly marks properties as changed, or dirty. 
            </summary>
            <param name="propertyName">The name of the property in the shared object.</param>
            <param name="value">The value of the property or null to delete the property.</param>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.SetDirty(System.String)">
            <summary>
            Indicates to the server that the value of a property in the shared object has changed. This method marks properties as dirty, which means changed.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.Send(System.String,System.Object[])">
            <summary>
            Broadcasts a message to all clients connected to a remote shared object, including the client that sent the message.
            </summary>
            <param name="handler">A string that identifies the message; the name of a handler functions attached to the shared object.</param>
            <param name="arguments">One or more arguments.</param>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.SetAttribute(System.String,System.Object)">
            <summary>
            Sets an attribute on this object.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
            <returns>true if the attribute value changed otherwise false</returns>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>true if the attribute was found and removed otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.RemoveAttributes">
            <summary>
            Removes all attributes.
            </summary>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.GetAttribute(System.String,System.Object)">
            <summary>
            Returns the value for a given attribute and sets it if it doesn't exist.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="value">Attribute's default value.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.SetAttributes(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets multiple attributes on this object.
            </summary>
            <param name="values">Dictionary of attributes.</param>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.SetAttributes(FluorineFx.Messaging.Api.IAttributeStore)">
            <summary>
            Sets multiple attributes on this object.
            </summary>
            <param name="values">Attribute store.</param>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.BeginUpdate">
            <summary>
            Start performing multiple updates to the shared object.
            </summary>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.EndUpdate">
            <summary>
            The multiple updates are complete, notify server about all changes at once.
            </summary>
        </member>
        <member name="M:FluorineFx.Net.RemoteSharedObject.SendUpdates">
            <summary>
            Send update notification over data channel of RTMP connection
            </summary>
        </member>
        <member name="P:FluorineFx.Net.RemoteSharedObject.ObjectEncoding">
            <summary>
            Gets or sets the object encoding (AMF version) for this shared object. Default is ObjectEncoding.AMF0
            </summary>
        </member>
        <member name="E:FluorineFx.Net.RemoteSharedObject.NetStatus">
            <summary>
            Dispatched when a SharedObject instance is reporting its status or error condition.
            </summary>
        </member>
        <member name="E:FluorineFx.Net.RemoteSharedObject.Sync">
            <summary>
            Dispatched when a SharedObject instance has been updated by the server.
            </summary>
        </member>
        <member name="E:FluorineFx.Net.RemoteSharedObject.OnConnect">
            <summary>
            Dispatched when a SharedObject instance is connected.
            </summary>
        </member>
        <member name="E:FluorineFx.Net.RemoteSharedObject.OnDisconnect">
            <summary>
            Dispatched when a SharedObject instance is disconnected.
            </summary>
        </member>
        <member name="P:FluorineFx.Net.RemoteSharedObject.IsPersistentObject">
            <summary>
            Indicates whether the shared object data is persistent.
            </summary>
        </member>
        <member name="P:FluorineFx.Net.RemoteSharedObject.Connected">
            <summary>
            Indicates whether this SharedObject has connected to the server.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Client.Renew">
            <summary>
            Renews a lease.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Client.Renew(System.Int32)">
            <summary>
            Renews a lease.
            </summary>
            <param name="clientLeaseTime">The amount of time in minutes before client times out.</param>
        </member>
        <member name="T:FluorineFx.Expression.OpADD">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents arithmetic addition operator.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.RemotingServiceAttributeConstraint">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.TimezoneCompensation">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.FluorineConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.SetEnumerator">
            <summary>
            Summary description for SetEnumerator.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.CopyOnWriteDictionary">
            <summary>
            A thread-safe version of IDictionary in which all operations that change the dictionary are implemented by 
            making a new copy of the underlying Hashtable.
            </summary>
        </member>
        <member name="T:FluorineFx.Threading.WorkItem">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItem._workItemState">
            <summary>
            Holds the state of the work item.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItem._callback">
            <summary>
            Callback delegate.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItem._state">
            <summary>
            An object containing data to be used by the method.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItem._exception">
            <summary>
            The exception thrown.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItem._queuedTime">
            <summary>
            The time when the work items was queued.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItem._beginProcessTime">
            <summary>
            The time when the work item starts its execution.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItem._endProcessTime">
            <summary>
            The time when the work item ends its execution.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.WorkItem.SetWorkItemState(FluorineFx.Threading.WorkItem.WorkItemState)">
            <summary>
            Sets the work item state.
            </summary>
            <param name="workItemState">The new state.</param>
        </member>
        <member name="M:FluorineFx.Threading.WorkItem.SignalComplete(System.Boolean)">
            <summary>
            Signals that the work item has been completed or canceled.
            </summary>
            <param name="canceled">Indicates that the work item has been canceled.</param>
        </member>
        <member name="M:FluorineFx.Threading.WorkItem.StartingWorkItem">
            <summary>
            Change the state of the work item to in progress if it wasn't canceled.
            </summary>
            <returns>
            Return true on success or false in case the work item was canceled.
            </returns>
        </member>
        <member name="M:FluorineFx.Threading.WorkItem.Execute">
            <summary>
            Execute the work item.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.WorkItem.ExecuteWorkItem">
            <summary>
            Execute the work item.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.WorkItem.SetException(System.Exception)">
            <summary>
            Sets the result of the work item.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:FluorineFx.Threading.WorkItem.IsCanceled">
            <summary>
            Returns true if the work item is canceled.
            </summary>
        </member>
        <member name="P:FluorineFx.Threading.WorkItem.IsCompleted">
            <summary>
            Returns true if the work item has completed.
            </summary>
        </member>
        <member name="T:FluorineFx.Threading.WorkItem.WorkItemState">
            <summary>
            Indicates the state of the work item in the thread pool.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.Invoke">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.Notify">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Messages.CommandMessage">
            <summary>
            A message that represents an infrastructure command passed between client and server. 
            Subscribe/unsubscribe operations result in CommandMessage transmissions, as do polling operations.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.AuthenticationMessageRefType">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.ClientPingOperation">
            <summary>
            This operation is used to test connectivity over the current channel to the remote endpoint.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.SubscribeOperation">
            <summary>
            This operation is used to subscribe to a remote destination.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.UnsubscribeOperation">
            <summary>
            This operation is used to unsubscribe from a remote destination.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.UnknownOperation">
            <summary>
            This is the default operation for new CommandMessage instances. 
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.PollOperation">
            <summary>
            This operation is used to poll a remote destination for pending, undelivered messages.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.ClientSyncOperation">
            <summary>
            This operation is used by a remote destination to sync missed or cached messages back to a client as a result of a client issued poll command.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.ClusterRequestOperation">
            <summary>
            This operation is used to request a list of failover endpoint URIs for the remote destination based on cluster membership.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.LoginOperation">
            <summary>
            This operation is used to send credentials to the endpoint so that the user can be 
            logged in over the current channel. The credentials need to be Base64 encoded and 
            stored in the body of the message.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.LogoutOperation">
            <summary>
            This operation is used to log the user out of the current channel, and will 
            invalidate the server session if the channel is HTTP based. 
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.SessionInvalidateOperation">
            <summary>
            This operation is used to indicate that the client's session with a remote destination has timed out.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.SelectorHeader">
            <summary>
            The name for the selector header in subscribe messages.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.SessionInvalidatedHeader">
            <summary>
            The name for the header used internaly on the server to indicate that an 
            unsubscribe message is due to a client session being invalidated. 
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.FluorineMessageClientTimeoutHeader">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Messages.CommandMessage.FluorineSuppressPollWaitHeader">
            <summary>
            Poll wait must be suppressed.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.CommandMessage.#ctor">
            <summary>
            Initializes a new instance of the CommandMessage class.
            The message id is set to a universally unique 
            value, and the timestamp for the message is set to the current system timestamp. 
            The operation is set to a default value of UnknownOperation.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.CommandMessage.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the CommandMessage class. The message id is set to a 
            universally unique value, and the timestamp for the message is set 
            to the current system timestamp.
            </summary>
            <param name="operation">Operation for the new CommandMessage instance.</param>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.CommandMessage.messageRefType">
            <summary>
            Gets or sets the message reference type for the CommandMessage.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.CommandMessage.operation">
            <summary>
            Gets or sets the operation for this CommandMessage.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.MessageBroker">
            <summary>
            <para>
            All communication with the various services provided is mediated by the message broker.
            </para>
            <para>
            It has a number of endpoints which send and receive messages over the network, and it has 
            a number of services that are message destinations. The broker routes messages to 
            endpoints based on the content type of those messages, and routes decoded messages 
            to services based on message type.
            </para>
            <para>
            The broker also has a means of calling back into the endpoints in order to push messages 
            back through them. 
            </para>
            </summary>
            <example>
            <para>Pushing a message to connected clients (Flex Messaging)</para>
            <code lang="CS">
            MessageBroker msgBroker = MessageBroker.GetMessageBroker(null);
            AsyncMessage msg = new AsyncMessage();
            msg.destination = "chat";
            msg.headers.Add(AsyncMessage.SubtopicHeader, "status." + userId);
            msg.clientId = Guid.NewGuid().ToString("D");
            msg.messageId = Guid.NewGuid().ToString("D");
            msg.timestamp = Environment.TickCount;
            Hashtable body = new Hashtable();
            body.Add("userId", userId);
            body.Add("status", status);
            msg.body = body;
            msgBroker.RouteMessage(msg);
            </code>
            </example>
        </member>
        <member name="F:FluorineFx.Messaging.MessageBroker.DefaultMessageBrokerId">
            <summary>
            Default MessageBroker identity.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.#ctor(FluorineFx.Messaging.MessageServer)">
            <summary>
            Initializes a new instance of the MessageBroker class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.RegisterMessageBroker">
            <summary>
            Registers the message broker.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.UnregisterMessageBroker">
            <summary>
            Unregisters the message broker.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.GetMessageBroker(System.String)">
            <summary>
            Gets the MessageBroker object for the current request.
            </summary>
            <param name="messageBrokerId">Ignored.</param>
            <returns>The MessageBroker instance if it is found; otherwise, null.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.GetFactory(System.String)">
            <summary>
            Returns the IFlexFactory with the specified Id.
            </summary>
            <param name="id">FlexFactory identity.</param>
            <returns>The FlexFactory instance if it is found; otherwise, null.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.StartServices">
            <summary>
            Start all of the broker's services.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.StopServices">
            <summary>
            Stop all of the broker's services.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.StartEndpoints">
            <summary>
            Start all of the broker's endpoints.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.StopEndpoints">
            <summary>
            Stop all of the broker's endpoints.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.Start">
            <summary>
            Start the message broker.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.Stop">
            <summary>
            Stop the message broker.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.RouteMessage(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Call this method in order to send a message from your code into the message routing system.
            The message is routed to a service that is defined to handle messages of this type.
            Once the service is identified, the destination property of the message is used to find a destination configured for that service.
            The adapter defined for that destination is used to handle the message.
            </summary>
            <param name="message">The message to be routed to a service.</param>
            <returns>The result of the message routing.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.RouteMessage(FluorineFx.Messaging.Messages.IMessage,FluorineFx.Messaging.Endpoints.IEndpoint)">
            <summary>
            Call this method in order to send a message from your code into the message routing system.
            The message is routed to a service that is defined to handle messages of this type.
            Once the service is identified, the destination property of the message is used to find a destination configured for that service.
            The adapter defined for that destination is used to handle the message.
            </summary>
            <param name="message">The message to be routed to a service.</param>
            <param name="endpoint">This can identify the endpoint that is sending the message but it is currently not used so you may pass in null.</param>
            <returns>The result of the message routing.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.GetDestinationBySource(System.String)">
            <summary>
            Gets the destination Id for the specified source.
            </summary>
            <param name="source">The destination's source property.</param>
            <returns>The Id if the destination is found; otherwise, null.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.GetDestination(System.String)">
            <summary>
            Gets the specified destination.
            </summary>
            <param name="destinationId">The Id if the destination.</param>
            <returns>The destination if found; otherwise, null.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.GetDestinationId(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Gets the destination Id from the specified IMessage instance.
            </summary>
            <param name="message">The message that should be handled by the destination.</param>
            <returns>The Id if the destination is found; otherwise, null.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.MessageBroker.GetDestinationId(System.String)">
            <summary>
            Gets the destination Id for the specified source.
            </summary>
            <param name="source">The source should be handled by the destination.</param>
            <returns>The Id if the destination is found; otherwise, null.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.MessageBroker.Id">
            <summary>
            Gets the Id for the MessageBroker.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageBroker.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageBroker.GlobalScope">
            <summary>
            Gets the Global scope.
            </summary>
            <remarks>
            The global scope is the parent of all Web scopes. For Flex Messaging applications the Global scope is accessible through the message broker.
            </remarks>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IMessageClientListener">
            <summary>
            Interface to be notified when a MessageClient is created or destroyed.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IMessageClientListener.MessageClientCreated(FluorineFx.Messaging.Api.IMessageClient)">
            <summary>
            Notification that a MessageClient instance was created.
            </summary>
            <param name="messageClient">The MessageClient that was created.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IMessageClientListener.MessageClientDestroyed(FluorineFx.Messaging.Api.IMessageClient)">
            <summary>
            Notification that a MessageClient is about to be destroyed.
            </summary>
            <param name="messageClient">The MessageClient that will be destroyed.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.RtmpEndpoint">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Persistence.IPersistenceStore">
            <summary>
            Storage for persistent objects.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Persistence.IPersistenceStore.Save(FluorineFx.Messaging.Api.Persistence.IPersistable)">
            <summary>
            Make the passed object persistent.
            </summary>
            <param name="obj">The object to store.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Persistence.IPersistenceStore.Load(System.String)">
            <summary>
            Load a persistent object with the given name.  The object must provide
            either a constructor that takes an input stream as only parameter or an
            empty constructor so it can be loaded from the persistence store.
            </summary>
            <param name="name">The name of the object to load.</param>
            <returns>The loaded object or <code>null</code> if no such object was found.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Persistence.IPersistenceStore.Load(FluorineFx.Messaging.Api.Persistence.IPersistable)">
            <summary>
            Load state of an already instantiated persistent object.
            </summary>
            <param name="obj">The object to initialize.</param>
            <returns>true if the object was initialized, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Persistence.IPersistenceStore.Remove(FluorineFx.Messaging.Api.Persistence.IPersistable)">
            <summary>
            Delete the passed persistent object.
            </summary>
            <param name="obj">The object to delete.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Persistence.IPersistenceStore.Remove(System.String)">
            <summary>
            Delete the persistent object with the given name.
            </summary>
            <param name="name">The name of the object to delete.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Persistence.IPersistenceStore.GetObjectNames">
            <summary>
            Return iterator over the names of all already loaded objects in the storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Persistence.IPersistenceStore.GetObjects">
            <summary>
            Return iterator over the already loaded objects in the storage.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3CharWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3ASObjectWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0CharWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0ASObjectWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Invocation.IInvocationCallback">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Invocation.IInvocationCallback.OnInvoked(FluorineFx.Invocation.IInvocationManager,System.Reflection.MethodInfo,System.Object,System.Object[],System.Object)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="invocationManager"></param>
            <param name="methodInfo"></param>
            <param name="obj"></param>
            <param name="arguments"></param>
            <param name="result"></param>
        </member>
        <member name="T:FluorineFx.Diagnostic.TraceHeader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Diagnostic.DebugEvent">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.Messages.UpdateCollectionMessage">
            <summary>
            This message is used to establish consistency between the remote sequence and the 
            corresponding local collection. It contains all insert and delete operations that 
            were performed on a collection. 
            Clients send this message when a local collection is updated using the collection API 
            (IListView.removeItemAt(), etc) or the Single Managed Object API (DataService.createItem()). 
            The remote destination sends this message when the remote sequence is updated 
            and items are moved or removed and inserted. 
            This body property contains a list of UpdateCollectionRange objects that indicate just 
            how the collection was modified. 
            Applying the update collection ranges inorder will establish a consistent ordering of the items within the specified collection. 
            </summary>
        </member>
        <member name="T:FluorineFx.Data.Messages.DataMessage">
            <summary>
            DataMessage transports an operation that occured on a managed object or collection. This class of message is transmitted between clients subscribed to a remote destination.
            The message describes all of the relevant details of the operation (used to replicate updates and detect conflicts).
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.PageSizeHeader">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.PageIndexHeader">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.SequenceIdHeader">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.CreateOperation">
            <summary>
            Indicates a create operation.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.FillOperation">
            <summary>
            This operation requests that the remote destination create a sequence using 
            the remote destination's adapter.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.GetOperation">
            <summary>
            This operation requests that the remote destination get a specific managed object based on its unique ID.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.UpdateOperation">
            <summary>
            This operation indicates an update to data object has been performed.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.DeleteOperation">
            <summary>
            This operation indicates that the specified item should be removed.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.BatchedOperation">
            <summary>
            This operation represents a set of batched operations to be performed as a single unit.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.MultiBatchOperation">
            <summary>
            This operation represents a set of operations to be performed as a single unit but 
            which may contain multiple batched, create, update or delete operations that involve 
            more than one destination, that is, more than one remote adapter.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.TransactedOperation">
            <summary>
            This operation is similar to the MultiBatchOperation with the addition that the server 
            should encapsulate the multiple batches of messages within a transacation.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.PageOperation">
            <summary>
            This operation is used to retrieve a page of sequenced content that is delivered across 
            several messages instead of in a single message.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.GetOrCreateOperation">
            <summary>
            This operation requests an item with the specified identity from the remote destination.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.CountOperation">
            <summary>
            This operation requests that a configured &lt;count-method&gt; be invoked on a remote destination.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.CreateAndSequenceOperation">
            <summary>
            This operation requests a create of the specified item from a remote destination.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.GetSequenceIdOperation">
            <summary>
            This operation requests a sequence id for a set of fill parameters.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.AssociationAddOperation">
            <summary>
            This operation requests the remote destination add a new association between the specified instances.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.AssociationRemoveOperation">
            <summary>
            This operation requests the remote destination remove an association between the specified instances.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.RefreshFillOperation">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.UpdateCollectionOperation">
            <summary>
            This operation is sent when a local or remote sequence has been modified by insert(s) or delete(s).
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.ReleaseCollectionOperation">
            <summary>
            This operation indicates that the client is no longer interested in receiving notificaion of operations performed on the specified collection.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.ReleaseItemOperation">
            <summary>
            This operation indicates that the client is no longer interested in receiving notification of operations performed on the specified item.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.PageItemsOperation">
            <summary>
            This operation indicates a request for a page of items specified by identities.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.UpdateBodyChanges">
            <summary>
            This constant is used to access the list of changed property names.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.UpdateBodyPrev">
            <summary>
            This constant is used to access the previous value of the changed item.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage.UpdateBodyNew">
            <summary>
            This constant is used to access the new value of a changed item.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage._operation">
            <summary>
            Operation/command of this DataMessage.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.DataMessage._identity">
            <summary>
            Identity hash which defines the unique identity of the item affected by this DataMessage.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.Messages.DataMessage.#ctor">
            <summary>
            Initializes a new instance of the DataMessage class.
            </summary>
        </member>
        <member name="P:FluorineFx.Data.Messages.DataMessage.operation">
            <summary>
            Gets or sets the operation/command of this DataMessage.
            Operations indicate how the remote destination should process this message. 
            </summary>
        </member>
        <member name="P:FluorineFx.Data.Messages.DataMessage.identity">
            <summary>
            Gets or sets the identity hash which defines the unique identity of the item affected by this DataMessage 
            (relevant for create/update/delete but not fill operations). 
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.UpdateCollectionMessage.ClientUpdate">
            <summary>
             Indicates this update collection message was client generated.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.UpdateCollectionMessage.ServerOverride">
            <summary>
            Indicates this update collection message was client generated and the 
            remote destination determined that it should be reverted on that client.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Messages.UpdateCollectionMessage.ServerUpdate">
            <summary>
            Indicates this update collection message was remotely generated and is 
            based on the current state of the remote sequence.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.Messages.UpdateCollectionMessage.#ctor">
            <summary>
            Initializes a new instance of the UpdateCollectionMessage class.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.Messages.UpdateCollectionMessage.AddItemIdentityChange(System.Int32,System.Int32,System.Object)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="updateType"></param>
            <param name="position"></param>
            <param name="identity"></param>
        </member>
        <member name="P:FluorineFx.Data.Messages.UpdateCollectionMessage.collectionId">
            <summary>
            The unique identifier for the collection that was updated. 
            For a collection filled with the DataService.fill() method this contains 
            and Array of the parameters specified.
            </summary>
        </member>
        <member name="P:FluorineFx.Data.Messages.UpdateCollectionMessage.replace">
            <summary>
            Indicates if the entire collection should be replaced by the contents of this message.
            When the number of changes to a remote sequence have reached a tipping point a 
            replace message is generated as an optimization. 
            When true the body property contains an Array of item identities that should 
            replace any existing items. 
            </summary>
        </member>
        <member name="P:FluorineFx.Data.Messages.UpdateCollectionMessage.updateMode">
            <summary>
            Indicates the state of this update. The remote destination sends update collection messages 
            to clients with one of three update modes: 
            ServerUpdate - client applies this update collection unconditionally 
            ClientUpdate - the committing client does not need to process this update collection. 
            ServerOverride - the remote destination modified the update collection message sent by the client and the committing client must revert this update collection. 
            </summary>
        </member>
        <member name="T:FluorineFx.SWX.Writers.SWXDoubleWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.SWX.Writers.ISWXWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.SWX.Writers.ISWXWriter.WriteData(FluorineFx.SWX.SwxAssembler,System.Object)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="assembler"></param>
            <param name="data"></param>
        </member>
        <member name="P:FluorineFx.SWX.Writers.ISWXWriter.IsPrimitive">
            <summary>
            Gets a value indicating whether the SWXWriter Type is one of the primitive types.
            </summary>
            <remarks>The primitive types are those serialized as String, Number, Boolean, Date</remarks>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.IBroadcastScope">
            <summary>
            Broadcast scope is marker interface that represents object that works as basic scope and
            has pipe connection event dispatching capabilities.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IPipe">
            <summary>
            A pipe is an object that connects message providers and
            message consumers. Its main function is to transport messages
            in kind of ways it provides.
            
            Pipes fire events as they go, these events are common way to work with pipes for
            higher level parts of server.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IMessageInput">
            <summary>
            Input Endpoint for a consumer to connect.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageInput.PullMessage">
            <summary>
            Pull message from this input endpoint. Return w/o waiting.
            </summary>
            <returns>The pulled message or null if message is not available.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageInput.PullMessage(System.Int64)">
            <summary>
            Pull message from this input endpoint. Wait "wait" milliseconds if message is not available.
            </summary>
            <param name="wait">Milliseconds to wait when message is not available.</param>
            <returns>The pulled message or null if message is not available.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageInput.Subscribe(FluorineFx.Messaging.Api.Messaging.IConsumer,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Connect to a consumer.
            </summary>
            <param name="consumer">Consumer object.</param>
            <param name="parameterMap">Parameters map.</param>
            <returns>true when successfully subscribed, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageInput.Unsubscribe(FluorineFx.Messaging.Api.Messaging.IConsumer)">
            <summary>
            Disconnect from a consumer.
            </summary>
            <param name="consumer">Consumer to disconnect.</param>
            <returns>true when successfully unsubscribed, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageInput.GetConsumers">
            <summary>
            Returns a collection of IConsumer objects.
            </summary>
            <returns>A collection of IConsumer objects.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageInput.SendOOBControlMessage(FluorineFx.Messaging.Api.Messaging.IConsumer,FluorineFx.Messaging.Api.Messaging.OOBControlMessage)">
            <summary>
            Sends OOB Control Message to all providers on the other side of pipe.
            </summary>
            <param name="consumer">The consumer that sends the message.</param>
            <param name="oobCtrlMsg">Out-of-band control message.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IMessageOutput">
            <summary>
            Output Endpoint for a provider to connect.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageOutput.PushMessage(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Push a message to this output endpoint. May block the pusher when output can't handle the message at the time.
            </summary>
            <param name="message">Message to be pushed.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageOutput.Subscribe(FluorineFx.Messaging.Api.Messaging.IProvider,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Connect to a provider. Note that parameters passed have nothing to deal with NetConnection.connect in client-side Flex/Flash RIA.
            </summary>
            <param name="provider">Provider object.</param>
            <param name="parameterMap">Parameters passed with connection</param>
            <returns>true when successfully subscribed, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageOutput.Unsubscribe(FluorineFx.Messaging.Api.Messaging.IProvider)">
            <summary>
            Disconnect from a provider.
            </summary>
            <param name="provider">Provider object.</param>
            <returns>true when successfully unsubscribed, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageOutput.GetProviders">
            <summary>
            Returns collection of providers.
            </summary>
            <returns>Collection of IProvider objects.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IMessageOutput.SendOOBControlMessage(FluorineFx.Messaging.Api.Messaging.IProvider,FluorineFx.Messaging.Api.Messaging.OOBControlMessage)">
            <summary>
            Send OOB Control Message to all consumers on the other side of pipe.
            </summary>
            <param name="provider">The provider that sends the message.</param>
            <param name="oobCtrlMsg">Out-of-band control message.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IPipe.AddPipeConnectionListener(FluorineFx.Messaging.Api.Messaging.IPipeConnectionListener)">
            <summary>
            Adds connection event listener to pipe.
            </summary>
            <param name="listener">Connection event listener.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IPipe.RemovePipeConnectionListener(FluorineFx.Messaging.Api.Messaging.IPipeConnectionListener)">
            <summary>
            Removes connection event listener to pipe.
            </summary>
            <param name="listener">Connection event listener.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.BroadcastScope">
            <summary>
            Scope type for publishing that deals with pipe connection events.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.BroadcastScope._pipe">
            <summary>
            Simple in memory push pipe, triggered by an active provider to push messages to consumer.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.BroadcastScope._compCounter">
            <summary>
            Number of components.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.BroadcastScope._hasRemoved">
            <summary>
            Remove flag.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.IO.IStreamableFileFactory">
            <summary>
            Scope service extension that provides method to get streamable file services set.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.IO.IStreamableFileFactory.GetServices">
            <summary>
            Returns streamable file services.
            </summary>
            <returns>Set of streamable file services.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Config.MsmqSettings">
            <summary>
            Contains the properties for configuring MSQM service adapters.
            This is the <b>msmq</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Config.MsmqSettings.BinaryMessageFormatter">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Config.MsmqSettings.XmlMessageFormatter">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.MsmqSettings.Name">
            <summary>
            Gets the name of the MSMQ queue.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.MsmqSettings.Formatter">
            <summary>
            Gets the message formatter type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.MsmqSettings.Label">
            <summary>
            Gets the message label.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamFilenameGenerator">
            <summary>
            Interface for generating filenames for streams.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamFilenameGenerator.GenerateFilename(FluorineFx.Messaging.Api.IScope,System.String,FluorineFx.Messaging.Api.GenerationType)">
            <summary>
            Generate a filename without an extension.
            </summary>
            <param name="scope">Scope to use.</param>
            <param name="name">Stream name.</param>
            <param name="type">Generation strategy (either playback or record).</param>
            <returns>Filename.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamFilenameGenerator.GenerateFilename(FluorineFx.Messaging.Api.IScope,System.String,System.String,FluorineFx.Messaging.Api.GenerationType)">
            <summary>
            Generate a filename with an extension.
            </summary>
            <param name="scope">Scope to use.</param>
            <param name="name">Stream name.</param>
            <param name="extension">Extension.</param>
            <param name="type">Generation strategy (either playback or record).</param>
            <returns>Filename with extension.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStreamFilenameGenerator.ResolvesToAbsolutePath">
            <summary>
            Gets whether generated filename is an absolute path.
            </summary>
            <remarks>
            True if returned filename is an absolute path, else relative to application.
            If relative to application, you need to use
            <code>scope.Context.GetResources(fileName)[0].File</code> to resolve this to a file.
            
            If absolute (ie returns true) simply use <code>new FileInfo(GenerateFilename(scope, name))</code>
            </remarks>
        </member>
        <member name="T:FluorineFx.Messaging.Api.ScopeShuttingDownException">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.ScopeShuttingDownException.#ctor(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Initializes a new instance of the ScopeNotFoundException class.
            </summary>
            <param name="scope"></param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IConnectionBWConfig">
            <summary>
            The bandwidth configure for connection that has an extra
            property "upstreamBandwidth" which is not used by Bandwidth Control Framework.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnectionBWConfig.UpstreamBandwidth">
            <summary>
            Gets or sets the upstream bandwidth to be notified to the client.
            Upstream is the data that is sent from the client to the server.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IConnectionBWConfig.DownstreamBandwidth">
            <summary>
            Gets downstream bandwidth.
            </summary>
            <value>Downstream bandwidth, from server to client.</value>
        </member>
        <member name="T:FluorineFx.Json.JavaScriptConstructor">
            <summary>
            Represents a JavaScript constructor.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.IO.Mp3.IMp3Service">
            <summary>
            Provide access to MP3 objects. Marker interface.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.IO.IStreamableFileService">
            <summary>
            Provides access to files that can be streamed.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.IO.IStreamableFileService.PrepareFilename(System.String)">
            <summary>
            Prepair given string to conform filename requirements, for example, add
            extension to the end if missing.
            </summary>
            <param name="name">String to format.</param>
            <returns>Filename.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.IO.IStreamableFileService.CanHandle(System.IO.FileInfo)">
            <summary>
            Checks whether file can be used by file service, that is, it does exist and have valid extension.
            </summary>
            <param name="file">FileInfo object.</param>
            <returns>true if file exist and has valid extension, false otherwise</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.IO.IStreamableFileService.GetStreamableFile(System.IO.FileInfo)">
            <summary>
            Returns streamable file reference. For FLV files returned streamable file already has generated metadata injected.
            </summary>
            <param name="file">File resource.</param>
            <returns>Streamable file resource.s</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.IO.IStreamableFileService.Prefix">
            <summary>
            Gets prefix. Prefix is used in filename composition to fetch real file name.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.IO.IStreamableFileService.Extension">
            <summary>
            Gets for extension of file
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.StringLiteralNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents parsed string literal node.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.NullLiteralNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents parsed null literal node.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.ExpressionEvaluator">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.ExpressionEvaluator.Evaluate(System.Object,System.String,System.Collections.IDictionary)">
            <summary>
            Parses and evaluates the specified expression.
            </summary>
            <param name="root">Root object.</param>
            <param name="expression">Expression to evaluate.</param>
            <param name="variables">Expression variables map.</param>
            <returns>Value of the last node in the expression.</returns>
        </member>
        <member name="T:FluorineFx.Context.RtmpApplicationState">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Context.IApplicationState">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Context.IApplicationState.Remove(System.String)">
            <summary>
            Removes the named object from an ApplicationState collection.
            </summary>
            <param name="key">The name of the object to be removed from the collection.</param>
        </member>
        <member name="M:FluorineFx.Context.IApplicationState.RemoveAt(System.Int32)">
            <summary>
            Removes an ApplicationState object from the collection by index.
            </summary>
            <param name="index">The position in the collection of the item to remove.</param>
        </member>
        <member name="M:FluorineFx.Context.IApplicationState.Add(System.String,System.Object)">
            <summary>
            Adds a new object to the ApplicationState collection.
            </summary>
            <param name="name">The name of the object to be added to the collection.</param>
            <param name="value">The value of the object.</param>
        </member>
        <member name="P:FluorineFx.Context.IApplicationState.Item(System.Int32)">
            <summary>
            Gets a single ApplicationState object by index.
            </summary>
            <param name="index">The numerical index of the object in the collection.</param>
            <returns>The object referenced by index.</returns>
        </member>
        <member name="P:FluorineFx.Context.IApplicationState.Item(System.String)">
            <summary>
            Gets the value of a single ApplicationState object by name.
            </summary>
            <param name="name">The name of the object in the collection.</param>
            <returns>The object referenced by name.</returns>
        </member>
        <member name="T:FluorineFx.Collections.SynchronizedEnumerator">
            <summary>
            Synchronized <see cref="T:System.Collections.IEnumerator"/> that should be returned by synchronized
            collections in order to ensure that the enumeration is thread safe.
            </summary>
        </member>
        <member name="T:FluorineFx.PageSizeAttribute">
            <summary>
            Indicates that the result of a service method is pageable recordset.
            </summary>
        </member>
        <member name="M:FluorineFx.PageSizeAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the PageSizeAttribute class.
            </summary>
            <param name="pageSize">The number of records requested each time.</param>
        </member>
        <member name="M:FluorineFx.PageSizeAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PageSizeAttribute class.
            </summary>
            <param name="pageSize">The number of records requested each time.</param>
            <param name="offset">The offset of the first row to return.</param>
            <param name="limit">The maximum number of rows to return.</param>
        </member>
        <member name="P:FluorineFx.PageSizeAttribute.PageSize">
            <summary>
            Gets the page size (number of records requested each time).
            </summary>
        </member>
        <member name="P:FluorineFx.PageSizeAttribute.Offset">
            <summary>
            Gets the offset of the first row to return.
            </summary>
        </member>
        <member name="P:FluorineFx.PageSizeAttribute.Limit">
            <summary>
            Gets the maximum number of rows to return.
            </summary>
        </member>
        <member name="T:FluorineFx.AMF3.IDataInput">
            <summary>
            The IDataInput interface provides a set of methods for reading binary data.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadBoolean">
            <summary>
            Reads a Boolean from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadByte">
            <summary>
            Reads a signed byte from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadBytes(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Reads length bytes of data from the byte stream or byte array. 
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadDouble">
            <summary>
            Reads an IEEE 754 double-precision floating point number from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadFloat">
            <summary>
            Reads an IEEE 754 single-precision floating point number from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadInt">
            <summary>
            Reads a signed 32-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadObject">
            <summary>
            Reads an object from the byte stream or byte array, encoded in AMF serialized format. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadShort">
            <summary>
            Reads a signed 16-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadUnsignedByte">
            <summary>
            Reads an unsigned byte from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadUnsignedInt">
            <summary>
            Reads an unsigned 32-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadUnsignedShort">
            <summary>
            Reads an unsigned 16-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadUTF">
            <summary>
            Reads a UTF-8 string from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.IDataInput.ReadUTFBytes(System.UInt32)">
            <summary>
            Reads a sequence of length UTF-8 bytes from the byte stream or byte array, and returns a string. 
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.StringUtils.ContainsWhiteSpace(System.String)">
            <summary>
            Determines whether the string contains white space.
            </summary>
            <param name="s">The string to test for white space.</param>
            <returns>
            	<c>true</c> if the string contains white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.StringUtils.EnsureEndsWith(System.String,System.String)">
            <summary>
            Ensures the target string ends with the specified string.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
            <returns>The target string with the value string at the end.</returns>
        </member>
        <member name="M:FluorineFx.Util.StringUtils.IsNullOrEmpty(System.Data.SqlTypes.SqlString)">
            <summary>
            Determines whether the SqlString is null or empty.
            </summary>
            <param name="s">The string.</param>
            <returns>
            	<c>true</c> if the SqlString is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="M:FluorineFx.Util.StringUtils.HasText(System.String)">
            <summary>
            Checks if a <see cref="T:System.String"/> has text.
            </summary>
            <remarks>
            <p>
            More specifically, returns <see langword="true"/> if the string is
            not <see langword="null"/>, it's <see cref="P:System.String.Length"/> is &gt;
            zero <c>(0)</c>, and it has at least one non-whitespace character.
            </p>
            </remarks>
            <param name="target">
            The string to check, may be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the <paramref name="target"/> is not
            <see langword="null"/>,
            <see cref="P:System.String.Length"/> &gt; zero <c>(0)</c>, and does not consist
            solely of whitespace.
            </returns>
            <example>
            <code language="C#">
            StringUtils.HasText(null) = false
            StringUtils.HasText("") = false
            StringUtils.HasText(" ") = false
            StringUtils.HasText("12345") = true
            StringUtils.HasText(" 12345 ") = true
            </code>
            </example>
        </member>
        <member name="M:FluorineFx.Util.StringUtils.HasLength(System.String)">
            <summary>Checks if a string has length.</summary>
            <param name="target">
            The string to check, may be <see langword="null"/>.
            </param>
            <returns>
            <see langword="true"/> if the string has length and is not
            <see langword="null"/>.
            </returns>
            <example>
            <code lang="C#">
            StringUtils.HasLength(null) = false
            StringUtils.HasLength("") = false
            StringUtils.HasLength(" ") = true
            StringUtils.HasLength("Hello") = true
            </code>
            </example>
        </member>
        <member name="T:FluorineFx.Util.Nullables.NullableDateTime">
            <summary>
            An <see cref="T:FluorineFx.Util.Nullables.INullableType"/> that wraps a <see cref="T:System.DateTime"/> value.
            </summary>
            <remarks>
            Please see the 
            <a href="http://msdn.microsoft.com/netframework/programming/bcl/faq/DateAndTimeFAQ.aspx">DateTime FAQ</a>
            on MSDN. 
            </remarks>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.SharedObjectMessage">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.ISharedObjectMessage">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.SO.ISharedObjectMessage.Name">
            <summary>
            Gets the name of the shared object this message belongs to.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.SO.ISharedObjectMessage.Version">
            <summary>
            Returns the version to modify.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.SO.ISharedObjectMessage.IsPersistent">
            <summary>
            Gets whether the message affects a persistent shared object.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.SO.ISharedObjectMessage.Events">
            <summary>
            Returns a set of ISharedObjectEvent objects containing informations what to change.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpProtocolEncoder">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpProtocolEncoder.GetHeaderType(FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.RtmpHeader)">
            <summary>
            Determine type of header to use.
            </summary>
            <param name="header">RTMP message header.</param>
            <param name="lastHeader">Previous header.</param>
            <returns>Header type to use.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpProtocolEncoder.CalculateHeaderSize(FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.RtmpHeader)">
            <summary>
            Calculate number of bytes necessary to encode the header.
            </summary>
            <param name="header">RTMP message header</param>
            <param name="lastHeader">Previous header</param>
            <returns>Calculated size</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpProtocolEncoder.EncodeHeaderByte(FluorineFx.Util.ByteBuffer,System.Byte,System.Int32)">
            <summary>
            Encodes header size marker and channel id into header marker
            </summary>
            <param name="output"></param>
            <param name="headerSize">Header size marker</param>
            <param name="channelId">Channel used</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpProtocolEncoder.EncodeHeader(FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Messaging.Rtmp.RtmpHeader,FluorineFx.Util.ByteBuffer)">
            <summary>
            Encode RTMP header into given ByteBuffer
            </summary>
            <param name="header">RTMP message header</param>
            <param name="lastHeader">Previous header</param>
            <param name="buffer">Buffer to write encoded header to</param>
            <returns>Encoded header data</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpProtocolEncoder.EncodeServerBW(FluorineFx.Messaging.Rtmp.RtmpContext,FluorineFx.Messaging.Rtmp.Event.ServerBW)">
            <summary>
            Encode server-side bandwidth event
            </summary>
            <param name="context"></param>
            <param name="serverBW"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpProtocolEncoder.GenerateErrorResult(System.String,System.Exception)">
            <summary>
            Generate error object to return for given exception.
            </summary>
            <param name="code"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpNetworkStream">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.ClientBW">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.ScopeContext">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.ScopeContext.GetResource(System.String)">
            <summary>
            Return an <see cref="T:FluorineFx.Context.IResource"/> handle for the
            </summary>
            <param name="location">The resource location.</param>
            <returns>An appropriate <see cref="T:FluorineFx.Context.IResource"/> handle.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.BasicScopeEnumerator">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0NullWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0BooleanWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3NullReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3ExternalizableReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3DateTimeReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0XmlReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0NullReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0DateTimeReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.CodeDom.AMF0ReflectionOptimizer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.CodeDom.AMF0ReflectionOptimizer.AddAssembly(System.String)">
            <summary>
            Add an assembly to the list of ReferencedAssemblies
            required to build the class
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:FluorineFx.IO.AMFHeader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFHeader.CredentialsHeader">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFHeader.DebugHeader">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFHeader.ServiceBrowserHeader">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFHeader.ClearedCredentials">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFHeader.CredentialsIdHeader">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFHeader.RequestPersistentHeader">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFHeader.#ctor(System.String,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the AMFHeader class.
            </summary>
            <param name="name"></param>
            <param name="mustUnderstand"></param>
            <param name="content"></param>
        </member>
        <member name="P:FluorineFx.IO.AMFHeader.Name">
            <summary>
            Gets the header name.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFHeader.Content">
            <summary>
            Gets the header content.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFHeader.MustUnderstand">
            <summary>
            If a header is sent to the Flash Player with must understand set to true and the NetConnection instance's client object does not have a method to handle the header, then the Flash Player will invoke the onStatus handler on the NetConnection object.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFHeader.IsClearedCredentials">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.Messages.DataErrorMessage">
            <summary>
            ErrorMessage that will be sent when a data conflict occurs.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.ItemWrapper">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.CollectionUtils">
            <summary>
            Collection utility class.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.CollectionUtils.IsNullOrEmptyOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            Determines whether the collection is null, empty or its contents are uninitialized values.
            </summary>
            <param name="list">The list.</param>
            <returns>
            	<c>true</c> if the collection is null or empty or its contents are uninitialized values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:FluorineFx.Util.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Makes a slice of the specified list in between the start and end indexes,
            getting every so many items based upon the step.
            </summary>
            <param name="list">The list.</param>
            <param name="start">The start index.</param>
            <param name="end">The end index.</param>
            <param name="step">The step.</param>
            <returns>A slice of the list.</returns>
        </member>
        <member name="M:FluorineFx.Util.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.Support.SimplePlayItem">
            <summary>
            Simple playlist item implementation.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IPlayItem">
            <summary>
            Playlist item. Each playlist item has name, start time, length in milliseconds and message input source.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlayItem.Name">
            <summary>
            Gets the name of item.
            The VOD or Live stream provider is found according to this name.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlayItem.Start">
            <summary>
            Gets the start time in millisecond.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlayItem.Length">
            <summary>
            Gets the play length in millisecond.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlayItem.MessageInput">
            <summary>
            Gets a message input for play.
            This object overrides the default algorithm for finding
            the appropriate VOD or Live stream provider according to the item name.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Stream.Support.SimplePlayItem._start">
            <summary>
            Start mark.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Stream.Support.SimplePlayItem._msgInput">
            <summary>
            Message source
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.Support.SimplePlayItem.Name">
            <summary>
            Gets item name.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.Support.SimplePlayItem.Start">
            <summary>
            Gets or sets start position.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.Support.SimplePlayItem.Length">
            <summary>
            Gets play item length in milliseconds.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.Support.SimplePlayItem.MessageInput">
            <summary>
            Gets or sets the message input source.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IVideoStreamCodec">
            <summary>
            Video codec info used by stream codec.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IVideoStreamCodec.Reset">
            <summary>
            Resets the codec to its initial state.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IVideoStreamCodec.CanHandleData(FluorineFx.Util.ByteBuffer)">
            <summary>
            Returns true if the codec knows how to handle the passed stream data.
            </summary>
            <param name="data">Stream data.</param>
            <returns><code>true</code> if codec can handle data, <code>false</code> otherwise</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IVideoStreamCodec.AddData(FluorineFx.Util.ByteBuffer)">
            <summary>
            Update the state of the codec with the passed data.
            </summary>
            <param name="data">Stream data.</param>
            <returns><code>true</code> if codec can handle data, <code>false</code> otherwise</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IVideoStreamCodec.GetKeyframe">
            <summary>
            Returns the data for a keyframe.
            </summary>
            <returns>Data.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IVideoStreamCodec.Name">
            <summary>
            Gets the name of the video codec.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IVideoStreamCodec.CanDropFrames">
            <summary>
            Gets whether the codec supports frame dropping.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamService">
            <summary>
            This interface represents the stream methods that can be called throug RTMP.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.createStream">
            <summary>
            Creates a stream and returns a corresponding id.
            </summary>
            <returns>ID of created stream.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.closeStream">
            <summary>
            Close the stream but not deallocate the resources.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.deleteStream(System.Int32)">
            <summary>
            Close the stream if not been closed. Deallocate the related resources.
            </summary>
            <param name="streamId">Stream id.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.releaseStream(System.String)">
            <summary>
            Called by FME.
            </summary>
            <param name="streamName">Stream name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.deleteStream(FluorineFx.Messaging.Api.Stream.IStreamCapableConnection,System.Int32)">
            <summary>
            Delete stream.
            </summary>
            <param name="connection">Stream capable connection.</param>
            <param name="streamId">Stream id.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.play(System.Boolean)">
            <summary>
            Play stream without initial stop.
            </summary>
            <param name="dontStop">Stoppage flag.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.play(System.String)">
            <summary>
            Play stream with name.
            </summary>
            <param name="name">Stream name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.play(System.String,System.Double)">
            <summary>
            Play stream with name from start position.
            </summary>
            <param name="name">Stream name.</param>
            <param name="start">Start position.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.play(System.String,System.Double,System.Double)">
            <summary>
            Play stream with name from start position and for given amount if time.
            </summary>
            <param name="name">Stream name.</param>
            <param name="start">Start position.</param>
            <param name="length">Playback length.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.play(System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            Publishes stream from given position for given amount of time.
            </summary>
            <param name="name">Stream name.</param>
            <param name="start">Start position.</param>
            <param name="length">Playback length.</param>
            <param name="flushPlaylist">Flush playlist flag.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.publish(System.String)">
            <summary>
            Publishes stream with given name.
            </summary>
            <param name="name">Stream published name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.publish(System.String,System.String)">
            <summary>
            Publishes stream with given name and mode.
            </summary>
            <param name="name">Stream published name.</param>
            <param name="mode">Stream publishing mode.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.publish(System.Boolean)">
            <summary>
            Publish.
            </summary>
            <param name="dontStop">Whether need to stop first.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.seek(System.Double)">
            <summary>
            Seek to position.
            </summary>
            <param name="position">Seek position.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.pause(System.Boolean,System.Double)">
            <summary>
            Pauses playback.
            </summary>
            <param name="pausePlayback">Pause flag.</param>
            <param name="position">Pause position.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.receiveVideo(System.Boolean)">
            <summary>
            Can recieve video.
            </summary>
            <param name="receive"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamService.receiveAudio(System.Boolean)">
            <summary>
            Can recieve audio.
            </summary>
            <param name="receive"></param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IPlaylistController">
            <summary>
            A play list controller that controls the order of play items.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylistController.NextItem(FluorineFx.Messaging.Api.Stream.IPlaylist,System.Int32)">
            <summary>
            Get next item to play.
            </summary>
            <param name="playlist">The play list.</param>
            <param name="itemIndex">The current item index. -1 indicates to retrieve the first item for play.</param>
            <returns>The next item index to play. -1 reaches the end.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IPlaylistController.PreviousItem(FluorineFx.Messaging.Api.Stream.IPlaylist,System.Int32)">
            <summary>
            Get previous item to play.
            </summary>
            <param name="playlist">The play list.</param>
            <param name="itemIndex">The current item index. IPlaylist.Count indicates to retrieve the last item for play.</param>
            <returns>The previous item index to play. -1 reaches the beginning.</returns>
        </member>
        <member name="T:FluorineFx.Json.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.JavaScriptArrayConverter">
            <summary>
            Provides a type converter to convert JavaScriptArray objects to and from various other representations.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptArrayConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overloaded. Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:FluorineFx.Json.JavaScriptArray">
            <summary>
            Represents a JavaScript array.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JavaScriptArray"/> class.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptArray.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JavaScriptArray"/> class that
            contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new array.</param>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JavaScriptArray"/> class that
            is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new array can initially store.</param>
        </member>
        <member name="P:FluorineFx.IO.KeyFrameMeta.Duration">
            <summary>
            Gets or sets duration in milliseconds.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.KeyFrameMeta.AudioOnly">
            <summary>
            Gets or sets whether only audio frames are present.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.KeyFrameMeta.Timestamps">
            <summary>
            Gets or sets keyframe timestamps.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.KeyFrameMeta.Positions">
            <summary>
            Gets or sets keyframe positions.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.HexLiteralNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Context.ISessionState">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Context.ISessionState.Add(System.String,System.Object)">
            <summary>
            Adds a new item to the session-state collection
            </summary>
            <param name="name">The name of the item to add to the session-state collection.</param>
            <param name="value">The value of the item to add to the session-state collection.</param>
        </member>
        <member name="M:FluorineFx.Context.ISessionState.Clear">
            <summary>
            Removes all keys and values from the session-state collection. 
            </summary>
        </member>
        <member name="M:FluorineFx.Context.ISessionState.Remove(System.String)">
            <summary>
            Deletes an item from the session-state collection.
            </summary>
            <param name="name">The name of the item to delete from the session-state collection.</param>
            <remarks>If the session-state collection does not contain an element with the specified name, the collection remains unchanged. No exception is thrown.</remarks>
        </member>
        <member name="M:FluorineFx.Context.ISessionState.RemoveAll">
            <summary>
            Removes all keys and values from the session-state collection. 
            </summary>
        </member>
        <member name="M:FluorineFx.Context.ISessionState.RemoveAt(System.Int32)">
            <summary>
            Deletes an item at a specified index from the session-state collection.
            </summary>
            <param name="index">The index of the item to remove from the session-state collection.</param>
        </member>
        <member name="P:FluorineFx.Context.ISessionState.SessionID">
            <summary>
            Gets the unique identifier for the session. 
            </summary>
        </member>
        <member name="P:FluorineFx.Context.ISessionState.Item(System.String)">
            <summary>
            Gets or sets a session value by name.
            </summary>
            <param name="name">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="P:FluorineFx.Context.ISessionState.Item(System.Int32)">
            <summary>
            Gets or sets a session value by numerical index.
            </summary>
            <param name="index">The numerical index of the session value.</param>
            <returns>The session-state value stored at the specified index.</returns>
        </member>
        <member name="T:FluorineFx.Context.HttpSessionStateWrapper">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.IResource.File">
            <summary>
            Returns a <see cref="T:System.IO.FileInfo"/> handle for this resource.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.IResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.IResource.Exists">
            <summary>
            Gets whether this resource actually exist in physical form.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FileSystemResource.ProtocolSeparator">
            <summary>
            The separator between the protocol name and the resource name.
            </summary>
        </member>
        <member name="F:FluorineFx.Context.FileSystemResource.DefaultBasePathPlaceHolder">
            <summary>
            The default special character that denotes the base (home, or root)
            path.
            </summary>
            <remarks>
            <p>
            Will be resolved (by those <see cref="T:FluorineFx.Context.IResource"/>
            implementations that support it) to the home (or root) path for
            the specific <see cref="T:FluorineFx.Context.IResource"/> implementation.
            </p>
            <p>
            For example, in the case of a web application this will (probably)
            resolve to the virtual directory of the web application.
            </p>
            </remarks>
        </member>
        <member name="M:FluorineFx.Context.FileSystemResource.ResolveResourceNameWithoutProtocol(System.String)">
            <summary>
            Resolves the supplied <paramref name="resourceName"/> to its value
            sans any leading protocol.
            </summary>
            <param name="resourceName">
            The name of the resource.
            </param>
            <returns>
            The name of the resource without the protocol name.
            </returns>
        </member>
        <member name="M:FluorineFx.Context.FileSystemResource.ResolveBasePathPlaceHolder(System.String,System.String)">
            <summary>
            Resolves the presence of the
            <paramref name="basePathPlaceHolder"/> value
            in the supplied <paramref name="resourceName"/> into a path.
            </summary>
            <param name="resourceName">The name of the resource.</param>
            <param name="basePathPlaceHolder">The string that is a placeholder for a base path.</param>
            <returns>The name of the resource with any <paramref name="basePathPlaceHolder"/> value having been resolved into an actual path.</returns>
        </member>
        <member name="M:FluorineFx.Context.FileSystemResource.GetResourceNameWithoutProtocol(System.String)">
            <summary>
            Strips any protocol name from the supplied.
            </summary>
            <param name="resourceName">The name of the resource.</param>
            <returns>The name of the resource without the protocol name.</returns>
        </member>
        <member name="P:FluorineFx.Context.FileSystemResource.Description">
            <summary>
            Returns a description for this resource.
            </summary>
            <value>
            A description for this resource.
            </value>
        </member>
        <member name="P:FluorineFx.Context.FileSystemResource.Exists">
            <summary>
            Gets whether this resource actually exist in physical form.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.Set">
            <summary>
            Sorted set of unique (non-equal) objects
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Set.#ctor">
            <summary>
            Creates an empty set with default comparer; members must implement IComparable.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Set.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a set from elements of given collection; default comparer is used; members must implement IComparable.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Set.#ctor(System.Collections.IComparer)">
            <summary>
            Creates an empty set that uses given comparer object.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Set.#ctor(System.Collections.IComparer,System.Collections.ICollection)">
            <summary>
            Creates a set from elements of given collection that uses given comparer object.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Set.Union(FluorineFx.Collections.Set)">
            <summary>
            Returns union of two sets.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Set.Union(FluorineFx.Collections.Set,FluorineFx.Collections.Set)">
            <summary>
            Returns union of two sets.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Set.Intersection(FluorineFx.Collections.Set)">
            <summary>
            Returns intersection of two sets.
            </summary>
            <remarks>Intersection contains elements present in both sets.</remarks>
        </member>
        <member name="M:FluorineFx.Collections.Set.Intersection(FluorineFx.Collections.Set,FluorineFx.Collections.Set)">
            <summary>
            Returns intersection of two sets.
            </summary>
            <remarks>Intersection contains elements present in both sets.</remarks>
        </member>
        <member name="M:FluorineFx.Collections.Set.Difference(FluorineFx.Collections.Set)">
            <summary>
            Returns difference of two sets.
            </summary>
            <remarks>
            Difference contains elements present in first set, but not in the second.<br/>
            Difference is not symmetric. Difference(a,b) is not equal to Difference(b,a)
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.Set.Difference(FluorineFx.Collections.Set,FluorineFx.Collections.Set)">
            <summary>
            Returns difference of two sets.
            </summary>
            <remarks>
            Difference contains elements present in first set, but not in the second.<br/>
            Difference is not symmetric. Difference(a,b) is not equal to Difference(b,a)
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.Set.SymmetricDifference(FluorineFx.Collections.Set)">
            <summary>
            Returns symmetric difference of two sets.
            </summary>
            <remarks>
            Symmetric difference contains elements present in one of the sets, but not in both.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.Set.SymmetricDifference(FluorineFx.Collections.Set,FluorineFx.Collections.Set)">
            <summary>
            Returns symmetric difference of two sets.
            </summary>
            <remarks>
            Symmetric difference contains elements present in one of the sets, but not in both
            </remarks>
        </member>
        <member name="T:FluorineFx.TypeHelper">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.TypeHelper.GetAssemblies">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.Locate(System.String)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.LocateInLac(System.String,System.String)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="typeName"></param>
            <param name="lac"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.SearchAllTypes(System.String,System.Collections.Hashtable)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="lac"></param>
            <param name="excludedBaseTypes"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.SkipMethod(System.Reflection.MethodInfo)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.GetDescription(System.Type)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.GetDescription(System.Reflection.MethodInfo)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.GetLacLocations">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.GetTypeIsAccessible(System.Type)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type argument of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><list>
            <item>The type argument of the type parameter,
            if the type parameter is a closed generic nullable type.</item>
            <item>The underlying Type of enumType, if the type parameter is an enum type.</item>
            <item>Otherwise, the type itself.</item>
            </list>
            </returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.GetCSharpName(System.Type)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.IsAssignable(System.Object,System.Type)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="obj"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.TypeHelper.ChangeType(System.Object,System.Type)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Remoting.RemotingAdapter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.BytesRead">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.AudioData">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.IFlexFactory">
            <summary>
            The IFlexFactory interface is implemented by factory components that provide object instances.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.IFlexFactory.CreateFactoryInstance(System.String,System.Collections.Hashtable)">
            <summary>
            This method is called when the definition of an instance that this factory looks up is initialized. 
            </summary>
            <param name="id">The factory identity.</param>
            <param name="properties">Configuration properties.</param>
            <returns>A FactoryInstance instance.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.IFlexFactory.Lookup(FluorineFx.Messaging.FactoryInstance)">
            <summary>
            This method is called by the default implementation of FactoryInstance.Lookup.
            </summary>
            <param name="factoryInstance">FactoryInstance used to retrieve the object instance.</param>
            <returns>The Object instance to use for the given operation for the current destination.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.ServiceMapFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.ServiceMapFilter.#ctor(FluorineFx.Messaging.Endpoints.EndpointBase)">
            <summary>
            Initializes a new instance of the ServiceMapFilter class.
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="T:FluorineFx.Messaging.Config.ServiceConfigSettings">
            <summary>
            Represents a configuration class that contains information about the services-config.xml file.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ServiceConfigSettings.Load(System.String,System.String)">
            <summary>
            Loads a services-config.xml file.
            </summary>
            <param name="configPath">Path to the file.</param>
            <param name="configFileName">Service configuration file name.</param>
            <returns>A ServiceConfigSettings instance loaded from the specified file.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceConfigSettings.FlexClientSettings">
            <summary>
            Gets flex client settings.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceConfigSettings.SecuritySettings">
            <summary>
            Gets security settings.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceConfigSettings.ChannelsSettings">
            <summary>
            Gets channel definitions.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceConfigSettings.FactoriesSettings">
            <summary>
            Gets factory definitions.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceConfigSettings.ServiceSettings">
            <summary>
            Gets service settings.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IScopeResolver">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeResolver.ResolveScope(System.String)">
            <summary>
            Gets the scope for a given path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IScopeResolver.ResolveScope(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Resolves scope from given root using scope resolver.
            </summary>
            <param name="root">Scope to start from.</param>
            <param name="path">Path to resolve.</param>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.IScopeResolver.GlobalScope">
            <summary>
            Gets the global scope.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3SqlTypesWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0DataTableWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3OptimizedObjectReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0ArrayReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Invocation.InvocationManager">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Invocation.IInvocationManager">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Invocation.IInvocationManager.Context">
            <summary>
            Gets a stack-based, user-defined storage area that is useful for communication between callback handlers.
            </summary>
        </member>
        <member name="P:FluorineFx.Invocation.IInvocationManager.Properties">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Invocation.IInvocationManager.Result">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.Assemblers.Assembler">
            <summary>
            Assembler base class.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Assemblers.Assembler.AppendToFill">
            <summary>
            Add this item onto the set of items in this filled collection if it is not already in the collection.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Assemblers.Assembler.DoNotExecuteFill">
            <summary>
            Do not execute the fill method for this newly updated or created item. 
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Assemblers.Assembler.ExecuteFill">
            <summary>
            Reexecute the fill method for this newly updated or created item. 
            </summary>
        </member>
        <member name="F:FluorineFx.Data.Assemblers.Assembler.RemoveFromFill">
            <summary>
            Remove this item from the set of items in this filled collection if it is in the collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.#ctor">
            <summary>
            Initializes a new instance of the Assembler class.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.AddItemToFill(System.Collections.IList,System.Int32,System.Collections.Hashtable)">
            <summary>
            Called when a client adds an item to a filled collection.
            </summary>
            <param name="fillParameters">The list of parameters which identify the fill that the client changed.</param>
            <param name="position">The index where a new item was added.</param>
            <param name="identity">The identity of the item added at the specified position.</param>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.AutoRefreshFill(System.Collections.IList)">
            <summary>
            This method can be used to help control how fill methods are refreshed.
            </summary>
            <param name="fillParameters">Client-side parameters to a fill method that created a managed collection still managed by one or more clients.</param>
            <returns>true if the fill identified by the fill parameters should be auto-refreshed or false if auto-refresh is off for this fill.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.Count(System.Collections.IList)">
            <summary>
            Retrieve the number of items for a given query with the supplied parameters.
            </summary>
            <param name="countParameters">A list of parameters to the count method provided by the client invocation.</param>
            <returns>The number of items in the collection specified by the countParameters.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.CreateItem(System.Object)">
            <summary>
            Creates the item. Often, you fill in the identity properties unless those values were supplied by the client. 
            </summary>
            <param name="item">The initial instance of the item to create.</param>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.DeleteItem(System.Object)">
            <summary>
            This is called when the client application removes an item managed by the destination corresponding to this assembler. 
            </summary>
            <param name="previousVersion">The original version of the item on the client which the client intends to remove.</param>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.Fill(System.Collections.IList)">
            <summary>
            This method is called by for any fill methods called by the client which are not configured in the configuration file explicitly using the fill-method tag.
            </summary>
            <param name="list">The list of fill parameters provided to the DataService.fill method on the client. Note that the first parameter - the ArrayCollection is not included in this list.</param>
            <returns>A collection containing a list of items to be managed by the client. This collection should contain instances which all have valid identity properties and should not contain more than one instance with the same identity.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.GetItem(System.Collections.IDictionary)">
            <summary>
            Retrieves an item with the specified identity.
            </summary>
            <param name="identity">A Hashtable which contains key/value pairs for each identity property.</param>
            <returns>The item corresponding to this identity property or null if there is no item for this identity.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.GetItems(System.Collections.IList)">
            <summary>
            Given a list of identities, returns the list of items.
            </summary>
            <param name="identityList">A list of Hashtable objects specifying the list of items.</param>
            <returns>The list of items corresponding to the list of identities specified. If an item is not found, a null value should be placed into the list to indicate that.</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.RefreshFill(System.Collections.IList,System.Object,System.Boolean)">
            <summary>
            If your fill methods are auto-refreshed, this method is called for each item that changes (either created or updated as indicated by the isCreate parameter).
            </summary>
            <param name="fillParameters">The parameters which identify a fill method that is still actively being managed by one or more clients connected to this server.</param>
            <param name="item">The item which is being created or updated in a recently committed transaction.</param>
            <param name="isCreate">true if this item was just created operation, false if it was just updated.</param>
            <returns>Assembler.DoNotExecuteFill - do nothing, Assembler.ExecuteFill - re-run the fill method to get the new list, Assembler.AppendToFill - just add it to the existing list, Assembler.RemoveFromFill - remove it from the sequence</returns>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.RemoveItemFromFill(System.Collections.IList,System.Int32,System.Collections.Hashtable)">
            <summary>
            Called when a client removes an item from a filled collection.
            </summary>
            <param name="fillParameters">The list of parameters which identify the fill that the client changed.</param>
            <param name="position">The index where a new item was removed.</param>
            <param name="identity">The identity of the item removed at the specified position.</param>
        </member>
        <member name="M:FluorineFx.Data.Assemblers.Assembler.UpdateItem(System.Object,System.Object,System.Collections.IList)">
            <summary>
            Updates the item. The newVersion is always going to be present and contains the new version of the item.
            The previousVersion contains any state required for maintaining the integrity of this instance.
            </summary>
            <param name="newVersion">The new version of the item with which to perform the update.</param>
            <param name="previousVersion">The original version of the item before these changes were made (used for conflict detection).</param>
            <param name="changes">The list of changed property names.</param>
        </member>
        <member name="T:FluorineFx.SWX.Writers.SWXArrayWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Silverlight.PolicyConnection._policyRequestString">
            <summary>
            The request that we're expecting from the client
            </summary>
        </member>
        <member name="T:FluorineFx.Silverlight.ConnectEventArgs">
            <summary>
            Event argument for connection events.
            </summary>
        </member>
        <member name="T:FluorineFx.Silverlight.DisconnectEventArgs">
            <summary>
            Event argument for disconnection events.
            </summary>
        </member>
        <member name="T:FluorineFx.Silverlight.PolicyServer">
            <summary>
            Silverlight policy server implementation.
            </summary>
        </member>
        <member name="M:FluorineFx.Silverlight.PolicyServer.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="policyFile">The path of the socket policy file</param>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.SchedulerException"/> class.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.SchedulerException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.SchedulerException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulerException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.SchedulerException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulerException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.SchedulerException"/> class.
            </summary>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.SchedulerException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulerException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.SchedulerException"/> class.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="cause">The cause.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulerException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="P:FluorineFx.Scheduling.SchedulerException.UnderlyingException">
            <summary>
            Return the exception that is the underlying cause of this exception.
            This may be used to find more detail about the cause of the error.
            </summary>
            <returns> The underlying exception, or <see langword="null" /> if there is not
            one.
            </returns>
        </member>
        <member name="P:FluorineFx.Scheduling.SchedulerException.ErrorCode">
            <summary>
            Get the error code associated with this exception.
            This may be used to find more detail about the cause of the error.
            </summary>
            <returns> 
            One of the ERR_XXX constants defined in this class.
            </returns>
        </member>
        <member name="P:FluorineFx.Scheduling.SchedulerException.ClientError">
            <summary>
            Determine if the specified error code is in the <see cref="F:FluorineFx.Scheduling.SchedulerException.ErrorClientError"/>
            category of errors.
            </summary>
        </member>
        <member name="P:FluorineFx.Scheduling.SchedulerException.ConfigurationError">
            <summary>
            Determine if the specified error code is in the <see cref="F:FluorineFx.Scheduling.SchedulerException.ErrorClientError"/>
            category of errors.
            </summary>
        </member>
        <member name="T:FluorineFx.Scheduling.MisfireInstruction">
            <summary>
             Misfire instructions.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.MisfireInstruction.InstructionNotSet">
            <summary>
            Instruction not set (yet).
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.MisfireInstruction.SmartPolicy">
            <summary>
            Use smart policy.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.MisfireInstruction.FireNow">
            <summary> 
            Instructs the <see cref="!:IScheduler"/> that upon a mis-fire
            situation, the <see cref="!:SimpleTrigger"/> wants to be fired
            now by <see cref="!:IScheduler"/>.
            <p>
            <i>NOTE:</i> This instruction should typically only be used for
            'one-shot' (non-repeating) Triggers. If it is used on a trigger with a
            repeat count &gt; 0 then it is equivalent to the instruction 
            <see cref="F:FluorineFx.Scheduling.MisfireInstruction.RescheduleNowWithRemainingRepeatCount"/>.
            </p>
            </summary>		
        </member>
        <member name="F:FluorineFx.Scheduling.MisfireInstruction.RescheduleNowWithExistingRepeatCount">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that upon a mis-fire
            situation, the <see cref="!:SimpleTrigger"/> wants to be
            re-scheduled to 'now' (even if the associated <see cref="!:ICalendar"/>
            excludes 'now') with the repeat count left as-is.   This does obey the
            <see cref="T:FluorineFx.Scheduling.Trigger"/> end-time however, so if 'now' is after the
            end-time the <code>Trigger</code> will not fire again.
            <p>
            <i>NOTE:</i> Use of this instruction causes the trigger to 'forget'
            the start-time and repeat-count that it was originally setup with (this
            is only an issue if you for some reason wanted to be able to tell what
            the original values were at some later time).
            </p>
            
            <p>
            <i>NOTE:</i> This instruction could cause the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            to go to the 'COMPLETE' state after firing 'now', if all the
            repeat-fire-times where missed.
            </p>
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.MisfireInstruction.RescheduleNowWithRemainingRepeatCount">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that upon a mis-fire
            situation, the <see cref="!:SimpleTrigger"/> wants to be
            re-scheduled to 'now' (even if the associated <see cref="!:ICalendar"/>
            excludes 'now') with the repeat count set to what it would be, if it had
            not missed any firings. This does obey the <see cref="T:FluorineFx.Scheduling.Trigger"/> end-time 
            however, so if 'now' is after the end-time the <see cref="T:FluorineFx.Scheduling.Trigger"/> will 
            not fire again.
            
            <p>
            <i>NOTE:</i> Use of this instruction causes the trigger to 'forget'
            the start-time and repeat-count that it was originally setup with (this
            is only an issue if you for some reason wanted to be able to tell what
            the original values were at some later time).
            </p>
            
            <p>
            <i>NOTE:</i> This instruction could cause the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            to go to the 'COMPLETE' state after firing 'now', if all the
            repeat-fire-times where missed.
            </p>
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.MisfireInstruction.RescheduleNextWithRemainingCount">
            <summary> 
            Instructs the <see cref="!:IScheduler"/> that upon a mis-fire
            situation, the <see cref="!:SimpleTrigger"/> wants to be
            re-scheduled to the next scheduled time after 'now' - taking into
            account any associated <see cref="!:ICalendar"/>, and with the
            repeat count set to what it would be, if it had not missed any firings.
            </summary>
            <remarks>
            <i>NOTE/WARNING:</i> This instruction could cause the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            to go directly to the 'COMPLETE' state if all fire-times where missed.
            </remarks>
        </member>
        <member name="F:FluorineFx.Scheduling.MisfireInstruction.RescheduleNextWithExistingCount">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that upon a mis-fire
            situation, the <see cref="!:SimpleTrigger"/> wants to be
            re-scheduled to the next scheduled time after 'now' - taking into
            account any associated <see cref="!:ICalendar"/>, and with the
            repeat count left unchanged.
            <p>
            <i>NOTE:</i> Use of this instruction causes the trigger to 'forget'
            the repeat-count that it was originally setup with (this is only an
            issue if you for some reason wanted to be able to tell what the original
            values were at some later time).
            </p>
            <p>
            <i>NOTE/WARNING:</i> This instruction could cause the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            to go directly to the 'COMPLETE' state if all fire-times where missed.
            </p>
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.DeferredResult">
            <summary>
            Indicates that returning the result of the invoked method will be delayed.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.DeferredResult._channel">
            <summary>
            Weak reference to the used channel
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.DeferredResult._call">
            <summary>
            Pending call object
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.DeferredResult._invokeId">
            <summary>
            Invocation id
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.DeferredResult._resultSent">
            <summary>
            Results sent flag
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.InMemoryPullPullPipe">
            <summary>
            A simple in-memory version of pull-pull pipe.
            It is triggered by an active consumer that pulls messages through it from a pullable provider.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.AbstractPipe">
            <summary>
            Abstract pipe that books providers/consumers and listeners.
            Aim to ease the implementation of concrete pipes. For more
            information on what pipe is, see IPipe interface documentation.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.AddPipeConnectionListener(FluorineFx.Messaging.Api.Messaging.IPipeConnectionListener)">
            <summary>
            Registers pipe connect events listener.
            </summary>
            <param name="listener">Listener.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.RemovePipeConnectionListener(FluorineFx.Messaging.Api.Messaging.IPipeConnectionListener)">
            <summary>
            Removes pipe connection listener.
            </summary>
            <param name="listener">Listener.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.Subscribe(FluorineFx.Messaging.Api.Messaging.IConsumer,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Connect consumer to this pipe. Doesn't allow to connect one consumer twice.
            Does register event listeners if instance of IPipeConnectionListener is given.
            </summary>
            <param name="consumer">Consumer</param>
            <param name="parameterMap">Parameters passed with connection, used in concrete pipe implementations.</param>
            <returns>true if consumer was added, false otherwise</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.Unsubscribe(FluorineFx.Messaging.Api.Messaging.IConsumer)">
            <summary>
            Disconnects consumer from this pipe. Fires pipe connection event.
            </summary>
            <param name="consumer">Consumer that should be removed.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.SendOOBControlMessage(FluorineFx.Messaging.Api.Messaging.IConsumer,FluorineFx.Messaging.Api.Messaging.OOBControlMessage)">
            <summary>
            Sends out-of-band ("special") control message to all providers
            </summary>
            <param name="consumer">Consumer, may be used in concrete implementations.</param>
            <param name="oobCtrlMsg">Out-of-band control message.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.Subscribe(FluorineFx.Messaging.Api.Messaging.IProvider,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Connect provider to this pipe. Doesn't allow to connect one provider twice.
            Does register event listeners if instance of IPipeConnectionListener is given.
            </summary>
            <param name="provider">Provider.</param>
            <param name="parameterMap">Parameters passed with connection, used in concrete pipe implementations.</param>
            <returns>true if provider was added, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.Unsubscribe(FluorineFx.Messaging.Api.Messaging.IProvider)">
            <summary>
            Disconnects provider from this pipe. Fires pipe connection event.
            </summary>
            <param name="provider">Provider that should be removed.</param>
            <returns>true on success, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.SendOOBControlMessage(FluorineFx.Messaging.Api.Messaging.IProvider,FluorineFx.Messaging.Api.Messaging.OOBControlMessage)">
            <summary>
            Sends out-of-band ("special") control message to all consumers.
            </summary>
            <param name="provider">Provider, may be used in concrete implementations.</param>
            <param name="oobCtrlMsg">Out-of-band control message.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.FireConsumerConnectionEvent(FluorineFx.Messaging.Api.Messaging.IConsumer,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Broadcast consumer connection event.
            </summary>
            <param name="consumer">Consumer that has connected.</param>
            <param name="type">Event type.</param>
            <param name="parameterMap">Parameters passed with connection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.FireProviderConnectionEvent(FluorineFx.Messaging.Api.Messaging.IProvider,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Broadcast provider connection event.
            </summary>
            <param name="provider">Provider that has connected.</param>
            <param name="type">Event type.</param>
            <param name="parameterMap">Parameters passed with connection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.AbstractPipe.FirePipeConnectionEvent(FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent)">
            <summary>
            Fire any pipe connection event.
            </summary>
            <param name="evt">Pipe connection event.</param>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptServer.RESPONSE_TARGET_SIZE">
            <summary>
            Try to generate responses that contain at least 32768 bytes data.
            Increasing this value results in better stream performance, but also increases the latency.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.Services.Parameter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.Services.Method">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.Services.Method.TransposeVariableArguments(System.Object[])">
            <summary>
            Takes an array of arguments that are designated for a method and
            transposes them if the target method supports variable arguments (in
            other words, the last parameter is annotated with the JsonRpcParams
            attribute). If the method does not support variable arguments then
            the input array is returned verbatim. 
            </summary>
        </member>
        <member name="P:FluorineFx.Json.Services.Method.HasParamArray">
            <summary>
            Determines if the method accepts variable number of arguments or
            not. A method is designated as accepting variable arguments by
            annotating the last parameter of the method with the JsonRpcParams
            attribute.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpPOWER">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents arithmetic exponent operator.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpLessOrEqual">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.NodeWithArguments">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.NodeWithArguments.InitializeNode">
            <summary>
            Initializes the node. 
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.NodeWithArguments.AssertArgumentCount(System.Int32)">
            <summary>
            Asserts the argument count.
            </summary>
            <param name="requiredCount">The required count.</param>
        </member>
        <member name="M:FluorineFx.Expression.NodeWithArguments.ResolveArguments(FluorineFx.Expression.BaseNode.EvaluationContext)">
            <summary>
            Resolves the arguments.
            </summary>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>An array of argument values</returns>
        </member>
        <member name="M:FluorineFx.Expression.NodeWithArguments.ResolveArgument(System.Int32,FluorineFx.Expression.BaseNode.EvaluationContext)">
            <summary>
            Resolves the argument.
            </summary>
            <param name="position">Argument position.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Resolved argument value.</returns>
        </member>
        <member name="T:FluorineFx.Context.HttpApplicationStateWrapper">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.ReadOnlyCollection">
            <summary>
            Implements a read-only collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a ReadOnlyCollection wrapper for a specific collection.
            </summary>
            <param name="collection">The collection to wrap.</param>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ReadOnlyCollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ReadOnlyCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through an ReadOnlyCollection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:FluorineFx.Collections.ReadOnlyCollection.Count">
            <summary>
            Gets the number of elements contained in the ReadOnlyCollection.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.ReadOnlyCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ReadOnlyCollection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.ReadOnlyCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ReadOnlyCollection.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.Inserter">
            <summary>
            <see cref="T:FluorineFx.Collections.IOutputIterator">Output iterator</see> based on <see cref="M:FluorineFx.Collections.IModifiableCollection.Add(System.Object)">IModifiableCollection.Add.</see>
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.IOutputIterator">
            <summary>
            Write-only forward-only iterator.
            </summary>
            <remarks>
            <p>.NET has built-in abstraction for read-only forward-only iterator, which is
            <c>IEnumerator</c>. Parallel concept in STL is "input iterator".
            Unfortunately, there is no built-in abstraction for	write-only, forward-only behavior,
            a.k.a output iterator.</p>
            <p>Objects are written to the output iterator one by one using <c>Add</c> method.
            There is no way to retrieve added object or undo the addition.</p>
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.IOutputIterator.Add(System.Object)">
            <summary>
            Adds an object to the output.
            </summary>
            <remarks>
            <c>Add()</c> can put an object in the end of a collection, or in the beginning
            of a collection, or output a string representatino of the object to
            a named pipe, etc.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.Inserter.#ctor(FluorineFx.Collections.IModifiableCollection)">
            <summary>
            Creates instance of inserter for given modifiable collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Inserter.Add(System.Object)">
            <summary>
            Adds passed object to the collection.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.Generic.CopyOnWriteArraySet`1">
            <summary>
            A Set that uses CopyOnWriteArray for all of its operations. Thus, it shares the same basic properties:
            It is best suited for applications in which set sizes generally stay small, read-only operations vastly outnumber mutative operations, and you need to prevent interference among threads during traversal.
            It is thread-safe.
            Mutative operations(add, set, remove, etc) are expensive since they usually entail copying the entire underlying array.
            Traversal via enumerators is fast and cannot encounter interference from other threads. Enumerators rely on unchanging snapshots of the array at the time the enumerators were constructed.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArraySet`1.#ctor">
            <summary>
            Creates an empty set.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArraySet`1.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a set containing all of the elements of the specified collection.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArraySet`1.Add(`0)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArraySet`1.Clear">
            <summary>
            Removes all of the elements from this set.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArraySet`1.Contains(`0)">
            <summary>
            Determines whether the CopyOnWriteArraySet contains a specific value.
            </summary>
            <param name="item">The Object to locate in the CopyOnWriteArraySet.</param>
            <returns>true if the Object is found in the CopyOnWriteArraySet; otherwise, false.</returns>        
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArraySet`1.Remove(`0)">
            <summary>
            Removes the specified element from this set if it is present.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:FluorineFx.RoleAttribute">
            <summary>
            Indicates a declarative security check on a service method.
            </summary>
        </member>
        <member name="M:FluorineFx.RoleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RoleAttribute class.
            </summary>
            <param name="roles">Comma-separated list of roles.</param>
        </member>
        <member name="P:FluorineFx.RoleAttribute.Roles">
            <summary>
            Gets the comma-separated list of roles.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.NumberUtils">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.IsInteger(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> is an integer.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="number"/> is an integer.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.IsDecimal(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> is a decimal number.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            <see lang="true"/> if the supplied <paramref name="number"/> is a decimal number.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.IsNumber(System.Object)">
            <summary>
            Determines whether the supplied <paramref name="number"/> is decimal number.
            </summary>
            <param name="number">The object to check.</param>
            <returns>
            	<c>true</c> if the specified object is decimal number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.IsZero(System.Object)">
            <summary>
            Is the supplied <paramref name="number"/> equal to zero (0)?
            </summary>
            <param name="number">The number to check.</param>
            <returns>
            <see lang="true"/> id the supplied <paramref name="number"/> is equal to zero (0).
            </returns>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.Negate(System.Object)">
            <summary>
            Negates the supplied <paramref name="number"/>.
            </summary>
            <param name="number">The number to negate.</param>
            <returns>The supplied <paramref name="number"/> negated.</returns>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="number"/> is not a supported numeric type.
            </exception>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.Add(System.Object,System.Object)">
            <summary>
            Adds the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.Subtract(System.Object,System.Object)">
            <summary>
            Subtracts the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.Multiply(System.Object,System.Object)">
            <summary>
            Multiplies the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.Divide(System.Object,System.Object)">
            <summary>
            Divides the specified numbers.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.Modulus(System.Object,System.Object)">
            <summary>
            Calculates remainder for the specified numbers.
            </summary>
            <param name="m">The first number (dividend).</param>
            <param name="n">The second number (divisor).</param>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.Power(System.Object,System.Object)">
            <summary>
            Raises first number to the power of the second one.
            </summary>
            <param name="m">The first number.</param>
            <param name="n">The second number.</param>
        </member>
        <member name="M:FluorineFx.Util.NumberUtils.CoerceTypes(System.Object@,System.Object@)">
            <summary>
            Coerces the types so they can be compared.
            </summary>
            <param name="m">The right.</param>
            <param name="n">The left.</param>
        </member>
        <member name="T:FluorineFx.Util.NetworkUtils">
            <summary>
            Network utility class.
            </summary>
        </member>
        <member name="T:FluorineFx.ObjectFactory">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.ScopeResolver">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.ScopeResolver.ResolveScope(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Resolves scope from given root using scope resolver.
            </summary>
            <param name="root">Scope to start from.</param>
            <param name="path">Path to resolve.</param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.MessageClient">
            <summary>
            Represents a client-side MessageAgent instance. 
            A server-side MessageClient is only created if its client-side counterpart has subscribed to a destination for pushed data (e.g. Consumer).
            </summary>
            <remarks>
            	<para>Client-side Producers do not result in the creation of corresponding
                server-side MessageClient instances.</para>
            	<para></para>
            	<para>Each MessageClient instance is bound to a client class (session) and when the
                client is invalidated any associated MessageClient instances are invalidated as
                well.</para>
            	<para>MessageClient instances may also be timed out on a per-destination basis and
                based on subscription inactivity. If no messages are pushed to the MessageClient
                within the destination's subscription timeout period the MessageClient will be
                shutdown.</para>
            	<para>Per-destination subscription timeout should be used when inactive
                subscriptions should be shut down opportunistically to preserve server
                resources.</para>
            </remarks>
        </member>
        <member name="M:FluorineFx.Messaging.MessageClient.GetBinaryId">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.MessageClient.AddMessageClientCreatedListener(FluorineFx.Messaging.Api.IMessageClientListener)">
            <summary>
            Adds a MessageClient created listener.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageClient.RemoveMessageClientCreatedListener(FluorineFx.Messaging.Api.IMessageClientListener)">
            <summary>
            Removes a MessageClient created listener.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageClient.AddMessageClientDestroyedListener(FluorineFx.Messaging.Api.IMessageClientListener)">
            <summary>
            Adds a MessageClient destroy listener.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageClient.RemoveMessageClientDestroyedListener(FluorineFx.Messaging.Api.IMessageClientListener)">
            <summary>
            Removes a MessageClient destroyed listener.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageClient.Unsubscribe">
            <summary>
            Timeout -> Unsubscribe
            Client -> Unsubscribe
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageClient.Renew">
            <summary>
            Renews a lease.
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageClient.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageClient.DestinationId">
            <summary>
            Gets the destination identity the MessageClient is subscribed to.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageClient.Endpoint">
            <summary>
            Gets the endpoint identity the MessageClient is subscribed to.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageClient.ClientId">
            <summary>
            Gets the client identity.
            </summary>
            <value>The client identity.</value>
        </member>
        <member name="P:FluorineFx.Messaging.MessageClient.IsDisconnecting">
            <summary>
            Gets whether the connection is being disconnected.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageClient.Subtopic">
            <summary>
            Gets the MessageClient subtopic.
            </summary>
            <value>The MessageClient subtopic.</value>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Service.PendingCall">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_PENDING">
            <summary>
            Pending status constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_SUCCESS_RESULT">
            <summary>
            Success result constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_SUCCESS_NULL">
            <summary>
            Returned value is null constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_SUCCESS_VOID">
            <summary>
            Service returns no value constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_SERVICE_NOT_FOUND">
            <summary>
            Service not found constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_METHOD_NOT_FOUND">
            <summary>
            Service's method not found constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_ACCESS_DENIED">
            <summary>
            Access denied constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_INVOCATION_EXCEPTION">
            <summary>
            Exception on invocation constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_GENERAL_EXCEPTION">
            <summary>
            General exception constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call.STATUS_APP_SHUTTING_DOWN">
            <summary>
            The application for this service is currently shutting down.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call._serviceName">
            <summary>
            Service name.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call._serviceMethodName">
            <summary>
            Service method name.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call._arguments">
            <summary>
            Call arguments.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call._status">
            <summary>
            Call status, initial one is pending.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Service.Call._exception">
            <summary>
            Call exception if any, null by default.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Event.EventType">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0SqlTypesWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0TypedASObjectReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <remarks>
            This reader is used only in case that a requested type is not found and the gateway choose to represent 
            typed objects with ActionScript typed objects.
            </remarks>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0BooleanReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.Lightweight.AMF0ReflectionOptimizer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.HttpCompress.ThresholdFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.ScopeNotFoundException">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.ScopeNotFoundException.#ctor(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Initializes a new instance of the ScopeNotFoundException class.
            </summary>
            <param name="scope"></param>
            <param name="childName"></param>
        </member>
        <member name="T:FluorineFx.ExceptionASO">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.ASObject">
            <summary>
            The ASObject class represents a Flash object.
            </summary>
        </member>
        <member name="M:FluorineFx.ASObject.#ctor">
            <summary>
            Initializes a new instance of the ASObject class.
            </summary>
        </member>
        <member name="M:FluorineFx.ASObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ASObject class.
            </summary>
            <param name="typeName">Typed object type name.</param>
        </member>
        <member name="M:FluorineFx.ASObject.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the ASObject class by copying the elements from the specified dictionary to the new ASObject object.
            </summary>
            <param name="dictionary">The IDictionary object to copy to a new ASObject object.</param>
        </member>
        <member name="M:FluorineFx.ASObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of an ASObject object during deserialization.
            </summary>
            <param name="info">The information needed to serialize an object.</param>
            <param name="context">The source or destination for the serialization stream.</param>
        </member>
        <member name="P:FluorineFx.ASObject.TypeName">
            <summary>
            Gets or sets the type name for a typed object.
            </summary>
        </member>
        <member name="P:FluorineFx.ASObject.IsTypedObject">
            <summary>
            Gets the Boolean value indicating whether the ASObject is typed.
            </summary>
        </member>
        <member name="M:FluorineFx.ExceptionASO.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ExceptionASO class.
            </summary>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:FluorineFx.Data.TransactionState">
            <summary>
            Describes the current state of the DataServiceTransaction
            </summary>
        </member>
        <member name="F:FluorineFx.Data.TransactionState.Active">
            <summary>
            Transactions in this state are waiting to be committed or rolled back.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.TransactionState.Committed">
            <summary>
            Transactions in this state have been committed.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.TransactionState.RolledBack">
            <summary>
            Transactions in this state have been rolled back.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.DataServiceTransaction">
            <summary>
            A DataServiceTransaction instance is created for each operation that modifies the state of 
            objects managed by Data Management Services. You can use this class from server-side code to 
            push changes to managed data stored on clients as long as they have the autoSyncEnabled 
            property set to true.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.Begin(System.String)">
            <summary>
            Starts a DataServiceTransaction that you can use to send changes to clients. Use this method when 
            you want to push changes to clients when you are not in the midst of an adapter/assembler's method.
            If you are being called from within the context of an assembler method (or if you are not 
            sure), you should call the CurrentDataServiceTransaction property. If that returns null, you can then 
            use this method to start one. 
            If you call this method, you must either call commit or rollback to complete the transaction. 
            You should make sure that this commit or rollback occurs no matter what else happens - it almost 
            always must be in a finally block in your code. 
            If you are in an assembler method, you should not commit or rollback the transaction as that 
            happens in the data services code when it completes. Instead, if you want to rollback the 
            transaction, call SetRollbackOnly. 
            </summary>
            <param name="serverId">Identifies the MessageBroker that created the Data Management Services destination you want to manipulate using this api. Typically there is only one MessageBroker for each web application and in this case, you can pass in null.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.Begin">
            <summary>
            This version of the Begin method uses the default MessageBroker.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.SetRollbackOnly">
            <summary>
            Marks the DataServiceTransaction so we rollback the transaction instead of committing it when it completes.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.Commit">
            <summary>
            Clients can call this method to commit the transaction. You should only use this method if 
            you used the begin method to create the DataServiceTransaction. 
            Otherwise, the gateway will commit or rollback the transaction as necessary.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.Rollback">
            <summary>
            Rollsback this transaction. 
            You should only use this method if you created the DataServiceTransaction with the Begin method. 
            </summary>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.UpdateItem(System.String,System.Object,System.Object,System.String[])">
            <summary>
            Send an update event to clients subscribed to this message. Note that this method does not send 
            the change to the adapter/assembler - it assumes that the changes have already been applied 
            or are being applied. It only updates the clients with the new version of this data. 
            
            You must supply a destination parameter and a new version of the object. If you supply a 
            non-null previous version, this object is used to detect conflicts on the client in case 
            the client's version of the data does not match the previous version. You may also supply 
            a list of property names that have changed as a hint to the client to indicate which properties 
            should be checked for conflicts and updated. If you supply null for the changes, all 
            properties on the client are updated. These property names do not accept any kind of dot 
            notation to specify that a property of a property has changed. Only top level property 
            names are allowed.
            </summary>
            <param name="destination">Name of the Data Management Services destination that is managing the item you want to update.</param>
            <param name="newVersion">New version of the item to update. The identity of the item is used to determine which item to update.</param>
            <param name="previousVersion">If not null, this contains a version of the item you intend to update. The client can detect a conflict if its version does not match the previousVersion. If you specify the value as null, a conflict is only detected if the client has pending changes for the item being updated.</param>
            <param name="changes">Array of property names which are to be updated. You can provide a null value to indicate that all property values may have changed.</param>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.CreateItem(System.String,System.Object)">
            <summary>
            You use this method to indicate to to the Data Management Service that a new item has been created. 
            The Data Management Service goes through all sequences currently being managed by clients and 
            determine whether this item belongs in each sequence. Usually it re-evaluates each fill method 
            to make this determination (though you can control how this is done for each fill method). 
            When it finds a sequence that contains this item, it then sends a create message for this 
            item to each client subscribed for that sequence.
            
            Note that this method does not send a create message to the adapter/assembler for this item. 
            It assumes that your backend database has already been updated with the data or is being 
            updated in this transaction. If this transaction is rolled back, no changes are applied. 
            </summary>
            <param name="destination">Name of the destination that is to be managing this newly created item.</param>
            <param name="item">New item to create.</param>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.DeleteItem(System.String,System.Object)">
            <summary>
            Sends a deleteItem method to the clients that are sync'd to sequences that contain this item. 
            It does not send a delete message to the adapter/assembler but instead assumes that this 
            item is already have been deleted from the database or is being deleted in this transaction. 
            If you rollback the transaction, this message is also rolled back.
            
            This version of the delete method causes clients to generate a conflict if they have a version 
            of the item that does not match the version of the item specified. You can use the 
            DeleteItemWithId method to unconditionally delete an item on the client if you do not have 
            the original version. 
            </summary>
            <param name="destination">Name of the destination containing the item to be deleted.</param>
            <param name="item">Version of the item to delete. Clients can detect a conflict if this version of the item does not match the version they are currently managing.</param>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.DeleteItemWithId(System.String,System.Collections.Hashtable)">
            <summary>
            This version of the deleteItem method does not provide for conflict detection if the item has been modified before the delete occurs; it is deleted.
            </summary>
            <param name="destination">Name of the destination containing the item to be deleted.</param>
            <param name="identity">A Hashtable containing entries for each of the id properties for this item (the key is the id property name, the value is its value).</param>
        </member>
        <member name="M:FluorineFx.Data.DataServiceTransaction.RefreshFill(System.String,System.Collections.IList)">
            <summary>
            For a matching list of auto-sync'd fills, re-executes the fill method, compares the identities 
            of the items returned to the those returned the last time we executed it with 
            AutoSyncEnabled=true. It builds an update collection events for any fills that have changed. 
            This contains the items that have been added to or removed from the list but does not look 
            for changes made to the properties of those items. This update collection message is sent to 
            clients along with the other messages in this transaction when you commit. If the transaction 
            is rolled back, the fills are not updated. 
            
            If you want to update the property values of items, you'll need to use updateItem on the individual items that have changed. 
            
            If you provide null for the fill parameters argument, all auto-sync'd fills are refreshed. 
            If you provide a list of fill parameters, we match that list of fill parameters against the 
            list provided by the clients when they executed the fills. If the fill parameters match, that 
            fill is refreshed. The matching algorithm works as follows. If you provide a value for a given 
            fill parameter, the equals method is used on it to compare against the fill parameter value 
            that the client used when it executed the fill. If you provide a null parameter value, 
            it matches that slot for all fills.
            </summary>
            <param name="destination">Destination on which the desired fills were created against.</param>
            <param name="fillParameters">Fill parameter pattern that defines the fills to be refreshed.</param>
        </member>
        <member name="P:FluorineFx.Data.DataServiceTransaction.TransactionState">
            <summary>
            Gets the current state of the DataServiceTransaction.
            </summary>
        </member>
        <member name="P:FluorineFx.Data.DataServiceTransaction.CurrentDataServiceTransaction">
            <summary>
            Gets the current DataServiceTransaction if one has been associated with the current thread.
            When you begin a DataServiceTransaction, it is automatically associated with your thread.
            If you want to add changes while in an adapter/assembler's sync method, you can use this 
            method to get a reference to the existing DataServiceTransaction. 
            In this case, you can call updateItem, createItem, deleteItem, and so forth, but you do not 
            call commit or rollback yourself as this is done by the data services code when the 
            sync method completes.
            </summary>
            <value>The current DataServiceTransaction or null if there is no transaction currently associated with the current thread.</value>
        </member>
        <member name="P:FluorineFx.Data.DataServiceTransaction.SendMessagesToPeers">
            <summary>
            When you call the updateItem, createItem, and the deleteItem methods, normally these messages 
            are sent to other peers in the cluster so they are distributed by those nodes to clients 
            connected to them. If your code is arranging to send these updates from each instance in 
            the cluster, set SendMessagesToPeers=false before you call the updateItem, createItem method, 
            and so forth. 
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.ISeekableProvider">
            <summary>
            Provider that is seekable.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ISeekableProvider.Seek(System.Int32)">
            <summary>
            Seeks the provider to timestamp ts (in milliseconds).
            </summary>
            <param name="ts">Timestamp to seek to.</param>
            <returns>Actual timestamp seeked to.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream.Statistics">
            <summary>
            Gets the statistics about this stream.
            </summary>
        </member>
        <member name="T:FluorineFx.Scheduling.SchedulerInstruction">
            <summary>
            Instructs Scheduler what to do with a trigger and job.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.SchedulerInstruction.NoInstruction">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            has no further instructions.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.SchedulerInstruction.ReExecuteJob">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            wants the <see cref="!:JobDetail"/> to re-Execute
            immediately. If not in a 'RECOVERING' or 'FAILED_OVER' situation, the
            execution context will be re-used (giving the <see cref="!:IJob"/> the
            abilitiy to 'see' anything placed in the context by its last execution).
            </summary>      
        </member>
        <member name="F:FluorineFx.Scheduling.SchedulerInstruction.SetTriggerComplete">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            should be put in the <see cref="!:TriggerState.Complete"/> state.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.SchedulerInstruction.DeleteTrigger">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            wants itself deleted.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.SchedulerInstruction.SetAllJobTriggersComplete">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that all <see cref="T:FluorineFx.Scheduling.Trigger"/>
            s referencing the same <see cref="!:JobDetail"/> as
            this one should be put in the <see cref="!:TriggerState.Complete"/> state.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.SchedulerInstruction.SetAllJobTriggersError">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that all <see cref="T:FluorineFx.Scheduling.Trigger"/>
            s referencing the same <see cref="!:JobDetail"/> as
            this one should be put in the <see cref="!:TriggerState.Error"/> state.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.SchedulerInstruction.SetTriggerError">
            <summary>
            Instructs the <see cref="!:IScheduler"/> that the <see cref="T:FluorineFx.Scheduling.Trigger"/>
            should be put in the <see cref="!:TriggerState.Error"/> state.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IStatisticsBase.CreationTime">
            <summary>
            Gets the timestamp the object was created.
            </summary>
            <value>The timestamp in milliseconds since midnight, January 1, 1970 UTC.</value>
        </member>
        <member name="P:FluorineFx.Messaging.Api.ServiceContainer.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IPullableProvider">
            <summary>
            A provider that supports passive pulling of messages.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.FLV.MetaCue">
            <summary>
            Cue point is metadata marker used to control and accompany video playback with client-side application
            events. Each cue point have at least one attribute, timestamp. Timestamp specifies position of cue point in
            FLV file.
            
            <p>Cue points are usually used as event triggers down video flow or navigation points in a file. Cue points are of two types:
            <ul>
            <li>Embedded into FLV or SWF</li>
            <li>External, or added on fly (e.g. with FLVPlayback component or ActionScript) on both server-side and client-side.</li>
            </ul>
            </p>
            
            <p>To add cue point trigger event listener at client-side in Flex/Flash application, use NetStream.onCuePoint event handler.</p>
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.MetaCue.EVENT">
            <summary>
            Cue point type of event.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.MetaCue.NAVIGATION">
            <summary>
            Cue point type of navigation.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaCue.Name">
            <summary>
            Gets or sets the cue point name.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaCue.Type">
            <summary>
            Gets or sets the type. Type can be "event" or "navigation".
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.MetaCue.Time">
            <summary>
            Gets or sets the time.
            </summary>
        </member>
        <member name="T:FluorineFx.Net.SyncEventArgs">
            <summary>
            Event dispatched when a remote SharedObject instance has been updated by the server.
            </summary>
        </member>
        <member name="P:FluorineFx.Net.SyncEventArgs.ChangeList">
            <summary>
            <para>
            An array of objects; each object contains properties that describe the changed members of a remote shared object.
            The properties of each object are <b>code</b>, <b>name</b>, and <b>oldValue</b>.
            </para>
            <para>
            When you initially connect to a remote shared object that is persistent locally and/or on the server, all the properties of this object are set to empty strings.
            </para>
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.RawBinaryWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Tag">
            <summary>
            A Tag represents the contents or payload of a FLV file
            </summary>
        </member>
        <member name="T:FluorineFx.IO.ITag">
            <summary>
            A Tag represents the contents or payload of a streamable file.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITag.Body">
            <summary>
            Gers or sets body as byte buffer.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITag.BodySize">
            <summary>
            Gets or sets the size of the body.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITag.DataType">
            <summary>
            Gets or sets the data type.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITag.Timestamp">
            <summary>
            Gets or sets timestamp.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ITag.PreviousTagSize">
            <summary>
            Gets or sets the size of the previous tag.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Tag._dataType">
            <summary>
            Tag data type
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Tag._timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Tag._body">
            <summary>
            Tag body as byte buffer
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Tag._bodySize">
            <summary>
            Tag body size
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Tag._previuosTagSize">
            <summary>
            Previous tag size
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Tag._flags">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.VariableNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents parsed variable node.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.DateLiteralNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.RemotingServiceAttribute">
            <summary>
            Indicates whether a type is a remoting service. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FluorineFx.RemotingServiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the RemotingServiceAttribute class.
            </summary>
        </member>
        <member name="M:FluorineFx.RemotingServiceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RemotingServiceAttribute class.
            </summary>
            <param name="serviceName">Specifies a description for the remoting service.</param>
        </member>
        <member name="T:FluorineFx.Threading.WorkItemsQueue">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue._headWaitEntry">
            <summary>
            Waiters queue (implemented as stack).
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue._waitersCount">
            <summary>
            Waiters count
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue._workItems">
            <summary>
            Work items queue
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue._isWorkItemsQueueActive">
            <summary>
            Indicate that work items are allowed to be queued
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue._waitEntry">
            <summary>
            Each thread in the thread pool keeps its own wait entry.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue._isDisposed">
            <summary>
            A flag that indicates if the WorkItemsQueue has been disposed.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.EnqueueWorkItem(FluorineFx.Threading.WorkItem)">
            <summary>
            Enqueue a work item to the queue.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.DequeueWorkItem(System.Int32,System.Threading.WaitHandle)">
            <summary>
            Waits for a work item or exits on timeout or cancel
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds</param>
            <param name="cancelEvent">Cancel wait handle</param>
            <returns>Returns true if the resource was granted</returns>
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.Cleanup">
            <summary>
            Cleanup the work items queue, hence no more work items are allowed to be queued.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.GetThreadWaitEntry">
            <summary>
            Returns the WaitEntry of the current thread
            </summary>
            <returns></returns>
            In order to avoid creation and destuction of WaitEntry
            objects each thread has its own WaitEntry object.
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.PushWaitEntry(FluorineFx.Threading.WorkItemsQueue.WaitEntry)">
            <summary>
            Push a new waiter into the waiter's stack
            </summary>
            <param name="newWaiterEntry">A waiter to put in the stack</param>
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.PopWaiter">
            <summary>
            Pop a waiter from the waiter's stack
            </summary>
            <returns>Returns the first waiter in the stack</returns>
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.RemoveWaiter(FluorineFx.Threading.WorkItemsQueue.WaitEntry,System.Boolean)">
            <summary>
            Remove a waiter from the stack
            </summary>
            <param name="WaitEntry">A waiter entry to remove</param>
            <param name="popDecrement">If true the waiter count is always decremented</param>
        </member>
        <member name="P:FluorineFx.Threading.WorkItemsQueue.Count">
            <summary>
            Returns the current number of work items in the queue.
            </summary>
        </member>
        <member name="P:FluorineFx.Threading.WorkItemsQueue.WaitersCount">
            <summary>
            Returns the current number of waiters
            </summary>
        </member>
        <member name="T:FluorineFx.Threading.WorkItemsQueue.WaitEntry">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue.WaitEntry._waitHandle">
            <summary>
            Event to signal the waiter that it got the work item.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue.WaitEntry._isTimedout">
            <summary>
            Flag to know if this waiter already quited from the queue because of a timeout.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue.WaitEntry._isSignaled">
            <summary>
            Flag to know if the waiter was signaled and got a work item. 
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.WorkItemsQueue.WaitEntry._workItem">
            <summary>
            A work item that passed directly to the waiter without going through the queue.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.WaitEntry.Signal(FluorineFx.Threading.WorkItem)">
            <summary>
            Signal a work item.
            </summary>
            <returns>Return true on success.</returns>
            <remarks>The method fails if Timeout() preceded its call.</remarks>
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.WaitEntry.Timeout">
            <summary>
            Mark the wait entry that it has been timed out.
            The method fails if Signal() preceded this call.
            </summary>
            <returns>Return true on success.</returns>
        </member>
        <member name="M:FluorineFx.Threading.WorkItemsQueue.WaitEntry.Reset">
            <summary>
            Reset the wait entry so it can be used again.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.SharedObjectEvent">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.ISharedObjectEvent">
            <summary>
            One update event for a shared object received through a connection.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.SO.ISharedObjectEvent.Type">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.SO.ISharedObjectEvent.Key">
            <summary>
            Returns the key of the event.
            
            Depending on the type this contains:
            <ul>
            <li>the attribute name to set for SET_ATTRIBUTE</li>
            <li>the attribute name to delete for DELETE_ATTRIBUTE</li>
            <li>the handler name to call for SEND_MESSAGE</li>
            </ul>
            In all other cases the key is <code>null</code>.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.SO.ISharedObjectEvent.Value">
            <summary>
            Returns the value of the event.
            
            Depending on the type this contains:
            <ul>
            <li>the attribute value to set for SET_ATTRIBUTE</li>
            <li>a list of parameters to pass to the handler for SEND_MESSAGE</li>
            </ul>
            In all other cases the value is <code>null</code>.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpServer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpServer.OnConnectionClose(FluorineFx.Messaging.Rtmp.RtmpServerConnection)">
            <summary>
            Begin disconnect the connection
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.ServerErrorEventArgs">
            <summary>
            Base event arguments for connection events.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.WsdlFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.WsdlFilter.#ctor">
            <summary>
            Initializes a new instance of the WsdlFilter class.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.FilterChain">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.FilterChain.#ctor(FluorineFx.Messaging.Endpoints.Filter.IFilter)">
            <summary>
            Initializes a new instance of the FilterChain class.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3XmlDocumentWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3DateTimeWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3ArrayWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0DateTimeWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.Lightweight.EmitHelper">
            <summary>
            A wrapper around the <see cref="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ILGenerator"/> class.
            </summary>
            <seealso cref="T:System.Reflection.Emit.ILGenerator">ILGenerator Class</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.IO.Bytecode.Lightweight.EmitHelper"/> class
            with the specified <see cref="T:System.Reflection.Emit.ILGenerator"/>.
            </summary>
            <param name="ilGenerator">The <see cref="T:System.Reflection.Emit.ILGenerator"/> to use.</param>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.op_Implicit(FluorineFx.IO.Bytecode.Lightweight.EmitHelper)~System.Reflection.Emit.ILGenerator">
            <summary>
            Converts the supplied <see cref="T:FluorineFx.IO.Bytecode.Lightweight.EmitHelper"/> to a <see cref="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ILGenerator"/>.
            </summary>
            <param name="emitHelper">The EmitHelper.</param>
            <returns>An ILGenerator.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.BeginCatchBlock(System.Type)">
            <summary>
            Begins a catch block.
            </summary>
            <param name="exceptionType">The Type object that represents the exception.</param>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">ILGenerator.BeginCatchBlock Method</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.BeginExceptFilterBlock">
            <summary>
            Begins an exception block for a filtered exception.
            </summary>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">ILGenerator.BeginCatchBlock Method</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.BeginExceptionBlock">
            <summary>
            Begins an exception block for a non-filtered exception.
            </summary>
            <returns>The label for the end of the block.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.BeginFaultBlock">
            <summary>
            Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.
            </summary>
            <returns>Current instance of the EmitHelper.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.BeginFinallyBlock">
            <summary>
            Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.
            </summary>
            <returns>Current instance of the EmitHelper.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.BeginScope">
            <summary>
            Begins a lexical scope.
            </summary>
            <returns>Current instance of the EmitHelper.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.DeclareLocal(System.Type)">
            <summary>
            Declares a local variable.
            </summary>
            <param name="localType">The Type of the local variable.</param>
            <returns>The declared local variable.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.DefineLabel">
            <summary>
            Declares a new label.
            </summary>
            <returns>Returns a new label that can be used as a token for branching.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.EndExceptionBlock">
            <summary>
            Ends an exception block.
            </summary>
            <returns>Current instance of the EmitHelper.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.EndScope">
            <summary>
            Ends a lexical scope.
            </summary>
            <returns>Current instance of the EmitHelper.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.MarkLabel(System.Reflection.Emit.Label)">
            <summary>
            Marks the Microsoft intermediate language (MSIL) stream's current position 
            with the given label.
            </summary>
            <param name="loc">The label for which to set an index.</param>
            <returns>Current instance of the EmitHelper.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks a sequence point in the Microsoft intermediate language (MSIL) stream.
            </summary>
            <param name="document">The document for which the sequence point is being defined.</param>
            <param name="startLine">The line where the sequence point begins.</param>
            <param name="startColumn">The column in the line where the sequence point begins.</param>
            <param name="endLine">The line where the sequence point ends.</param>
            <param name="endColumn">The column in the line where the sequence point ends.</param>
            <returns>Current instance of the EmitHelper.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ThrowException(System.Type)">
            <summary>
            Emits an instruction to throw an exception.
            </summary>
            <param name="exceptionType">The class of the type of exception to throw.</param>
            <returns>Current instance of the EmitHelper.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.UsingNamespace(System.String)">
            <summary>
            Specifies the namespace to be used in evaluating locals and watches for 
            the current active lexical scope.
            </summary>
            <param name="namespaceName">The namespace to be used in evaluating locals and watches for the current active lexical scope.</param>
            <returns>Current instance of the EmitHelper.</returns>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.beq(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq"/>, label) that
            transfers control to a target instruction if two values are equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq">OpCodes.Beq</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.beq_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Beq_S"/>, label) that
            transfers control to a target instruction (short form) if two values are equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Beq_S">OpCodes.Beq_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bge(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge"/>, label) that
            transfers control to a target instruction if the first value is greater than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge">OpCodes.Bge</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bge_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_S"/>, label) that
            transfers control to a target instruction (short form) 
            if the first value is greater than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_S">OpCodes.Bge_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bge_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un"/>, label) that
            transfers control to a target instruction if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un">OpCodes.Bge_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bge_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S"/>, label) that
            transfers control to a target instruction (short form) if if the the first value is greather than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bge_Un_S">OpCodes.Bge_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bgt(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt"/>, label) that
            transfers control to a target instruction if the first value is greater than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt">OpCodes.Bgt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bgt_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is greater than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_S">OpCodes.Bgt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bgt_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un"/>, label) that
            transfers control to a target instruction if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un">OpCodes.Bgt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bgt_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is greater than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">OpCodes.Bgt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ble(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble"/>, label) that
            transfers control to a target instruction if the first value is less than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble">OpCodes.Ble</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ble_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than or equal to the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_S">OpCodes.Ble_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ble_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un"/>, label) that
            transfers control to a target instruction if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un">OpCodes.Ble_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ble_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than or equal to the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ble_Un_S">OpCodes.Ble_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.blt(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt"/>, label) that
            transfers control to a target instruction if the first value is less than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt">OpCodes.Blt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.blt_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than the second value.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_S">OpCodes.Blt_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.blt_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un"/>, label) that
            transfers control to a target instruction if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un">OpCodes.Blt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.blt_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S"/>, label) that
            transfers control to a target instruction (short form) if the first value is less than the second value,
            when comparing unsigned integer values or unordered float values.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Blt_Un_S">OpCodes.Blt_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bne_un(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un"/>, label) that
            transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un">OpCodes.Bne_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.bne_un_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S"/>, label) that
            transfers control to a target instruction (short form) 
            when two unsigned integer values or unordered float values are not equal.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Bne_Un_S">OpCodes.Bne_Un_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.box(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Box"/>, type) that
            converts a value type to an object reference.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Box">OpCodes.Box</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.boxIfValueType(System.Type)">
            <summary>
            Converts a value type to an object reference if the value is a value type.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Box">OpCodes.Box</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.br(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br"/>, label) that
            unconditionally transfers control to a target instruction. 
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br">OpCodes.Br</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.brfalse(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse"/>, label) that
            transfers control to a target instruction if value is false, a null reference (Nothing in Visual Basic), or zero.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse">OpCodes.Brfalse</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.brfalse_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brfalse_S"/>, label) that
            transfers control to a target instruction if value is false, a null reference, or zero. 
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brfalse_S">OpCodes.Brfalse_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.brtrue(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue"/>, label) that
            transfers control to a target instruction if value is true, not null, or non-zero.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue">OpCodes.Brtrue</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.brtrue_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Brtrue_S"/>, label) that
            transfers control to a target instruction (short form) if value is true, not null, or non-zero.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Brtrue_S">OpCodes.Brtrue_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.br_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Br_S"/>, label) that
            unconditionally transfers control to a target instruction (short form).
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Br_S">OpCodes.Br_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.call(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.call(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Call"/>, methodInfo, optionalParameterTypes) that
            calls the method indicated by the passed method descriptor.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call">OpCodes.Call</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.calli(System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCalli(<see cref="F:System.Reflection.Emit.OpCodes.Calli"/>, CallingConvention, Type, Type[]) that
            calls the method indicated on the evaluation stack (as a pointer to an entry point) 
            with arguments described by a calling convention using an unmanaged calling convention.
            </summary>
            <param name="unmanagedCallConv">The unmanaged calling convention to be used.</param>
            <param name="returnType">The Type of the result.</param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Calli">OpCodes.Calli</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])">ILGenerator.EmitCalli</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.calli(System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
            <summary>
            Calls ILGenerator.EmitCalli(<see cref="F:System.Reflection.Emit.OpCodes.Calli"/>, CallingConventions, Type, Type[], Type[]) that
            calls the method indicated on the evaluation stack (as a pointer to an entry point)
            with arguments described by a calling convention using a managed calling convention.
            </summary>
            <param name="callingConvention">The managed calling convention to be used.</param>
            <param name="returnType">The Type of the result.</param>
            <param name="parameterTypes">The types of the required arguments to the instruction.</param>
            <param name="optionalParameterTypes">The types of the optional arguments for vararg calls.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Calli">OpCodes.Calli</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">ILGenerator.EmitCalli</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.callvirt(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.callvirt(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <param name="optionalParameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.callvirt(System.Type,System.String,System.Type[])">
            <summary>
            Calls ILGenerator.EmitCall(<see cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>, methodInfo, optionalParameterTypes) that
            calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <param name="methodName">The method to be called.</param>
            <param name="type">The declaring type of the method.</param>
            <param name="parameterTypes">The types of the optional arguments if the method is a varargs method.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt">OpCodes.Callvirt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">ILGenerator.EmitCall</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.castclass(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Castclass"/>, type) that
            attempts to cast an object passed by reference to the specified class.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Castclass">OpCodes.Castclass</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.castType(System.Type)">
            <summary>
            Attempts to cast an object passed by reference to the specified class 
            or to unbox if the type is a value type.
            </summary>
            <param name="type">A Type</param>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.cpobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cpobj"/>, type) that
            copies the value type located at the address of an object (type &amp;, * or natural int) 
            to the address of the destination object (type &amp;, * or natural int).
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cpobj">OpCodes.Cpobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.initobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Initobj"/>, type) that
            initializes all the fields of the object at a specific address to a null reference or 
            a 0 of the appropriate primitive type.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Initobj">OpCodes.Initobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.isinst(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Isinst"/>, type) that
            tests whether an object reference (type O) is an instance of a particular class.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Isinst">OpCodes.Isinst</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.jmp(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Jmp"/>, methodInfo) that
            exits current method and jumps to specified method.
            </summary>
            <param name="methodInfo">The method to be jumped.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Jmp">OpCodes.Jmp</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarg(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>, short) that
            loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="index">Index of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg">OpCodes.Ldarg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarg(System.Int32)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg"/>, short) or 
            ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_S"/>, byte) that
            loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <param name="index">Index of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg">OpCodes.Ldarg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarga(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarga"/>, short) that
            load an argument address onto the evaluation stack.
            </summary>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarga">OpCodes.Ldarga</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarga_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarga_S"/>, byte) that
            load an argument address, in short form, onto the evaluation stack.
            </summary>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarga_S">OpCodes.Ldarga_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarga(System.Int32)">
            <summary>
            Load an argument address onto the evaluation stack.
            </summary>
            <param name="index">Index of the address addr of the argument that is pushed onto the stack.</param>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarg_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_S"/>, byte) that
            loads the argument (referenced by a specified short form index) onto the evaluation stack.
            </summary>
            <param name="index">Index of the argument value that is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_S">OpCodes.Ldarg_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4(System.Int32)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4"/>, int) that
            pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4">OpCodes.Ldc_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_S"/>, byte) that
            pushes the supplied int8 value onto the evaluation stack as an int32, short form.
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">OpCodes.Ldc_I4_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i8(System.Int64)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I8"/>, long) that
            pushes a supplied value of type int64 onto the evaluation stack as an int64.
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I8">OpCodes.Ldc_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_r4(System.Single)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_R4"/>, float) that
            pushes a supplied value of type float32 onto the evaluation stack as type F (float).
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_R4">OpCodes.Ldc_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_r8(System.Double)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_R8"/>, double) that
            pushes a supplied value of type float64 onto the evaluation stack as type F (float).
            </summary>
            <param name="num">The value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_R8">OpCodes.Ldc_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelema(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelema"/>, type) that
            loads the address of the array element at a specified array index onto the top of the evaluation stack 
            as type &amp; (managed pointer).
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelema">OpCodes.Ldelema</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldfld"/>, fieldInfo) that
            finds the value of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <param name="fieldInfo">A FieldInfo representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldfld">OpCodes.Ldfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldflda(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldflda"/>, fieldInfo) that
            finds the address of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <param name="fieldInfo">A FieldInfo representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldflda">OpCodes.Ldflda</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldftn(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldftn"/>, methodInfo) that
            pushes an unmanaged pointer (type natural int) to the native code implementing a specific method 
            onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldftn">OpCodes.Ldftn</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind(System.Type)">
            <summary>
            Loads a value of the type from a supplied address.
            </summary>
            <param name="type">A Type.</param>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloc(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>, short) that
            load an argument address onto the evaluation stack.
            </summary>
            <param name="index">Index of the local variable value pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc">OpCodes.Ldloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc"/>, LocalBuilder) that
            load an argument address onto the evaluation stack.
            </summary>
            <param name="localBuilder">Local variable builder.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc">OpCodes.Ldloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloca(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca"/>, short) that
            loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca">OpCodes.Ldloca</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloca_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca_S"/>, byte) that
            loads the address of the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca_S">OpCodes.Ldloca_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloca(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloca"/>, LocalBuilder) that
            loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <param name="local">A <see cref="T:System.Reflection.Emit.LocalBuilder"/> representing the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloca">OpCodes.Ldloca</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloc_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_S"/>, byte) that
            loads the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <param name="index">Index of the local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_S">OpCodes.Ldloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldobj"/>, type) that
            copies the value type object pointed to by an address to the top of the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldobj">OpCodes.Ldobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldsfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldsfld"/>, fieldInfo) that
            pushes the value of a static field onto the evaluation stack.
            </summary>
            <param name="fieldInfo">A FieldInfo representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldsfld">OpCodes.Ldsfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldsflda(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldsflda"/>, fieldInfo) that
            pushes the address of a static field onto the evaluation stack.
            </summary>
            <param name="fieldInfo">A FieldInfo representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldsflda">OpCodes.Ldsflda</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldstr(System.String)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldstr"/>, string) that
            pushes a new object reference to a string literal stored in the metadata.
            </summary>
            <param name="str">The String to be emitted.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldstr">OpCodes.Ldstr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldtoken(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, methodInfo) that
            converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldtoken(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, fieldInfo) that
            converts a metadata token to its runtime representation, 
            pushing it onto the evaluation stack.
            </summary>
            <param name="fieldInfo">A FieldInfo representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldtoken(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken"/>, type) that
            converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldtoken">OpCodes.Ldtoken</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldvirtftn(System.Reflection.MethodInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldvirtftn"/>, methodInfo) that
            pushes an unmanaged pointer (type natural int) to the native code implementing a particular virtual method 
            associated with a specified object onto the evaluation stack.
            </summary>
            <param name="methodInfo">The method to be called.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldvirtftn">OpCodes.Ldvirtftn</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.leave(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave"/>, label) that
            exits a protected region of code, unconditionally tranferring control to a specific target instruction.
            </summary>
            <param name="label">The label.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave">OpCodes.Leave</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.leave_s(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Leave_S"/>, label) that
            exits a protected region of code, unconditionally tranferring control to a target instruction (short form).
            </summary>
            <param name="label">The label.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Leave_S">OpCodes.Leave_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.mkrefany(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mkrefany"/>, type) that
            pushes a typed reference to an instance of a specific type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mkrefany">OpCodes.Mkrefany</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.newarr(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newarr"/>, type) that
            pushes an object reference to a new zero-based, one-dimensional array whose elements 
            are of a specific type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Newarr">OpCodes.Newarr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.newobj(System.Reflection.ConstructorInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Newobj"/>, ConstructorInfo) that
            creates a new object or a new instance of a value type,
            pushing an object reference (type O) onto the evaluation stack.
            </summary>
            <param name="constructorInfo">A ConstructorInfo representing a constructor.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Newobj">OpCodes.Newobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.refanyval(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanyval"/>, type) that
            retrieves the address (type &amp;) embedded in a typed reference.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanyval">OpCodes.Refanyval</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ret">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ret"/>) that
            returns from the current method, pushing a return value (if present) 
            from the caller's evaluation stack onto the callee's evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ret">OpCodes.Ret</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.sizeof(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sizeof"/>, type) that
            pushes the size, in bytes, of a supplied value type onto the evaluation stack.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sizeof">OpCodes.Sizeof</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.starg(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Starg"/>, short) that
            stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg">OpCodes.Starg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.starg_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Starg_S"/>, byte) that
            stores the value on top of the evaluation stack in the argument slot at a specified index,
            short form.
            </summary>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg_S">OpCodes.Starg_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.starg(System.Int32)">
            <summary>
            Stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <param name="index">Slot index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Starg">OpCodes.Starg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stfld"/>, FieldInfo) that
            replaces the value stored in the field of an object reference or pointer with a new value.
            </summary>
            <param name="fieldInfo">A FieldInfo representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stfld">OpCodes.Stfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stind(System.Type)">
            <summary>
            Stores a value of the type at a supplied address.
            </summary>
            <param name="type">A Type.</param>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stloc(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>, LocalBuilder) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at a specified index.
            </summary>
            <param name="local">A local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc">OpCodes.Stloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stloc(System.Int16)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc"/>, short) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at a specified index.
            </summary>
            <param name="index">A local variable index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc">OpCodes.Stloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stloc_s(System.Reflection.Emit.LocalBuilder)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_S"/>, LocalBuilder) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index (short form).
            </summary>
            <param name="local">A local variable.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_S">OpCodes.Stloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stloc_s(System.Byte)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_S"/>, byte) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index (short form).
            </summary>
            <param name="index">A local variable index.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_S">OpCodes.Stloc_S</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stobj(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stobj"/>, type) that
            copies a value of a specified type from the evaluation stack into a supplied memory address.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stobj">OpCodes.Stobj</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stsfld(System.Reflection.FieldInfo)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stsfld"/>, fieldInfo) that
            replaces the value of a static field with a value from the evaluation stack.
            </summary>
            <param name="fieldInfo">A FieldInfo representing a field.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stsfld">OpCodes.Stsfld</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.switch(System.Reflection.Emit.Label[])">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Switch"/>, label[]) that
            implements a jump table.
            </summary>
            <param name="labels">The array of label objects to which to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Switch">OpCodes.Switch</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.unaligned(System.Reflection.Emit.Label)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>, label) that
            indicates that an address currently atop the evaluation stack might not be aligned 
            to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, 
            initblk, or cpblk instruction.
            </summary>
            <param name="label">The label to branch from this location.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unaligned">OpCodes.Unaligned</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.unaligned(System.Int64)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unaligned"/>, long) that
            indicates that an address currently atop the evaluation stack might not be aligned 
            to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, 
            initblk, or cpblk instruction.
            </summary>
            <param name="addr">An address is pushed onto the stack.</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unaligned">OpCodes.Unaligned</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.unbox(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unbox"/>, type) that
            converts the boxed representation of a value type to its unboxed form.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox">OpCodes.Unbox</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.unbox_any(System.Type)">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Unbox_Any"/>, type) that
            converts the boxed representation of a value type to its unboxed form.
            </summary>
            <param name="type">A Type</param>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Unbox_Any">OpCodes.Unbox_Any</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">ILGenerator.Emit</seealso>
        </member>
        <member name="M:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.end">
            <summary>
            Ends sequence of property calls.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ILGenerator">
            <summary>
            Gets MSIL generator.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.add">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add"/>) that
            adds two values and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add">OpCodes.Add</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.add_ovf">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf"/>) that
            adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add_Ovf">OpCodes.Add_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.add_ovf_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un"/>) that
            adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">OpCodes.Add_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.and">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.And"/>) that
            computes the bitwise AND of two values and pushes the result onto the evalution stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.And">OpCodes.And</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.arglist">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Arglist"/>) that
            returns an unmanaged pointer to the argument list of the current method.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Arglist">OpCodes.Arglist</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.break">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Break"/>) that
            signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Break">OpCodes.Break</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ceq">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ceq"/>) that
            compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ceq">OpCodes.Ceq</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.cgt">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cgt"/>) that
            compares two values. If the first value is greater than the second,
            the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt">OpCodes.Cgt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.cgt_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cgt_Un"/>) that
            compares two unsigned or unordered values.
            If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cgt_Un">OpCodes.Cgt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ckfinite">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ckfinite"/>) that
            throws ArithmeticException if value is not a finite number.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ckfinite">OpCodes.Ckfinite</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.clt">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Clt"/>) that
            compares two values. If the first value is less than the second,
            the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Clt">OpCodes.Clt</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.clt_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Clt_Un"/>) that
            compares the unsigned or unordered values value1 and value2.
            If value1 is less than value2, then the integer value 1 (int32) is pushed onto the evaluation stack;
            otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Clt_Un">OpCodes.Clt_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I"/>) that
            converts the value on top of the evaluation stack to natural int.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I">OpCodes.Conv_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I1"/>) that
            converts the value on top of the evaluation stack to int8, then extends (pads) it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I1">OpCodes.Conv_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I2"/>) that
            converts the value on top of the evaluation stack to int16, then extends (pads) it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I2">OpCodes.Conv_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I4"/>) that
            converts the value on top of the evaluation stack to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I4">OpCodes.Conv_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_I8"/>) that
            converts the value on top of the evaluation stack to int64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_I8">OpCodes.Conv_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I"/>) that
            converts the signed value on top of the evaluation stack to signed natural int,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">OpCodes.Conv_Ovf_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1"/>) that
            converts the signed value on top of the evaluation stack to signed int8 and extends it to int32,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">OpCodes.Conv_Ovf_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i1_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int8 and extends it to int32,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">OpCodes.Conv_Ovf_I1_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2"/>) that
            converts the signed value on top of the evaluation stack to signed int16 and extending it to int32,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">OpCodes.Conv_Ovf_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i2_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int16 and extends it to int32,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">OpCodes.Conv_Ovf_I2_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4"/>) that
            converts the signed value on top of the evaluation tack to signed int32, throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">OpCodes.Conv_Ovf_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i4_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int32, throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">OpCodes.Conv_Ovf_I4_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8"/>) that
            converts the signed value on top of the evaluation stack to signed int64, throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">OpCodes.Conv_Ovf_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i8_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed int64, throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">OpCodes.Conv_Ovf_I8_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_i_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un"/>) that
            converts the unsigned value on top of the evaluation stack to signed natural int,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">OpCodes.Conv_Ovf_I_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U"/>) that
            converts the signed value on top of the evaluation stack to unsigned natural int,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">OpCodes.Conv_Ovf_U</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1"/>) that
            converts the signed value on top of the evaluation stack to unsigned int8 and extends it to int32,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">OpCodes.Conv_Ovf_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u1_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int8 and extends it to int32,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">OpCodes.Conv_Ovf_U1_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2"/>) that
            converts the signed value on top of the evaluation stack to unsigned int16 and extends it to int32,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">OpCodes.Conv_Ovf_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u2_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int16 and extends it to int32,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">OpCodes.Conv_Ovf_U2_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4"/>) that
            Converts the signed value on top of the evaluation stack to unsigned int32, throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">OpCodes.Conv_Ovf_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u4_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int32, throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">OpCodes.Conv_Ovf_U4_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8"/>) that
            converts the signed value on top of the evaluation stack to unsigned int64, throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">OpCodes.Conv_Ovf_U8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u8_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned int64, throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">OpCodes.Conv_Ovf_U8_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_ovf_u_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un"/>) that
            converts the unsigned value on top of the evaluation stack to unsigned natural int,
            throwing OverflowException on overflow.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">OpCodes.Conv_Ovf_U_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R4"/>) that
            converts the value on top of the evaluation stack to float32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R4">OpCodes.Conv_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R8"/>) that
            converts the value on top of the evaluation stack to float64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R8">OpCodes.Conv_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_r_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_R_Un"/>) that
            converts the unsigned integer value on top of the evaluation stack to float32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_R_Un">OpCodes.Conv_R_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_u">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U"/>) that
            converts the value on top of the evaluation stack to unsigned natural int, and extends it to natural int.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U">OpCodes.Conv_U</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U1"/>) that
            converts the value on top of the evaluation stack to unsigned int8, and extends it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U1">OpCodes.Conv_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U2"/>) that
            converts the value on top of the evaluation stack to unsigned int16, and extends it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U2">OpCodes.Conv_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U4"/>) that
            converts the value on top of the evaluation stack to unsigned int32, and extends it to int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U4">OpCodes.Conv_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.conv_u8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Conv_U8"/>) that
            converts the value on top of the evaluation stack to unsigned int64, and extends it to int64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Conv_U8">OpCodes.Conv_U8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.cpblk">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Cpblk"/>) that
            copies a specified number bytes from a source address to a destination address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Cpblk">OpCodes.Cpblk</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.div">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Div"/>) that
            divides two values and pushes the result as a floating-point (type F) or
            quotient (type int32) onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Div">OpCodes.Div</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.div_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Div_Un"/>) that
            divides two unsigned integer values and pushes the result (int32) onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Div_Un">OpCodes.Div_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.dup">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Dup"/>) that
            copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Dup">OpCodes.Dup</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.endfilter">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Endfilter"/>) that
            transfers control from the filter clause of an exception back to
            the Common Language Infrastructure (CLI) exception handler.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Endfilter">OpCodes.Endfilter</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.endfinally">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Endfinally"/>) that
            transfers control from the fault or finally clause of an exception block back to
            the Common Language Infrastructure (CLI) exception handler.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Endfinally">OpCodes.Endfinally</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.initblk">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Initblk"/>) that
            initializes a specified block of memory at a specific address to a given size and initial value.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Initblk">OpCodes.Initblk</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarg_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_0"/>) that
            loads the argument at index 0 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_0">OpCodes.Ldarg_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarg_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_1"/>) that
            loads the argument at index 1 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_1">OpCodes.Ldarg_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarg_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_2"/>) that
            loads the argument at index 2 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_2">OpCodes.Ldarg_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldarg_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldarg_3"/>) that
            loads the argument at index 3 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldarg_3">OpCodes.Ldarg_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0"/>) that
            pushes the integer value of 0 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1"/>) that
            pushes the integer value of 1 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">OpCodes.Ldc_I4_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2"/>) that
            pushes the integer value of 2 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">OpCodes.Ldc_I4_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3"/>) that
            pushes the integer value of 3 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">OpCodes.Ldc_I4_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4"/>) that
            pushes the integer value of 4 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">OpCodes.Ldc_I4_4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_5">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5"/>) that
            pushes the integer value of 5 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">OpCodes.Ldc_I4_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_6">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6"/>) that
            pushes the integer value of 6 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">OpCodes.Ldc_I4_6</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_7">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7"/>) that
            pushes the integer value of 7 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">OpCodes.Ldc_I4_7</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8"/>) that
            pushes the integer value of 8 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">OpCodes.Ldc_I4_8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldc_i4_m1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1"/>) that
            pushes the integer value of -1 onto the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">OpCodes.Ldc_I4_M1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I"/>) that
            loads the element with type natural int at a specified array index onto the top of the evaluation stack 
            as a natural int.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I">OpCodes.Ldelem_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1"/>) that
            loads the element with type int8 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I1">OpCodes.Ldelem_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2"/>) that
            loads the element with type int16 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I2">OpCodes.Ldelem_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4"/>) that
            loads the element with type int32 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I4">OpCodes.Ldelem_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8"/>) that
            loads the element with type int64 at a specified array index onto the top of the evaluation stack as an int64.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_I8">OpCodes.Ldelem_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4"/>) that
            loads the element with type float32 at a specified array index onto the top of the evaluation stack as type F (float).
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_R4">OpCodes.Ldelem_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8"/>) that
            loads the element with type float64 at a specified array index onto the top of the evaluation stack as type F (float).
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_R8">OpCodes.Ldelem_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref"/>) that
            loads the element containing an object reference at a specified array index 
            onto the top of the evaluation stack as type O (object reference).
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">OpCodes.Ldelem_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1"/>) that
            loads the element with type unsigned int8 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U1">OpCodes.Ldelem_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U2"/>) that
            loads the element with type unsigned int16 at a specified array index 
            onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U2">OpCodes.Ldelem_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldelem_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4"/>) that
            loads the element with type unsigned int32 at a specified array index 
            onto the top of the evaluation stack as an int32.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldelem_U4">OpCodes.Ldelem_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I"/>) that
            loads a value of type natural int as a natural int onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I">OpCodes.Ldind_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I1"/>) that
            loads a value of type int8 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I1">OpCodes.Ldind_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I2"/>) that
            loads a value of type int16 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I2">OpCodes.Ldind_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I4"/>) that
            loads a value of type int32 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I4">OpCodes.Ldind_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_I8"/>) that
            loads a value of type int64 as an int64 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_I8">OpCodes.Ldind_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_R4"/>) that
            loads a value of type float32 as a type F (float) onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_R4">OpCodes.Ldind_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_R8"/>) that
            loads a value of type float64 as a type F (float) onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_R8">OpCodes.Ldind_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref"/>) that
            loads an object reference as a type O (object reference) onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_Ref">OpCodes.Ldind_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_u1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U1"/>) that
            loads a value of type unsigned int8 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U1">OpCodes.Ldind_U1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_u2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U2"/>) that
            loads a value of type unsigned int16 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U2">OpCodes.Ldind_U2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldind_u4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldind_U4"/>) that
            loads a value of type unsigned int32 as an int32 onto the evaluation stack indirectly.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldind_U4">OpCodes.Ldind_U4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldlen">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldlen"/>) that
            pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldlen">OpCodes.Ldlen</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloc_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_0"/>) that
            loads the local variable at index 0 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_0">OpCodes.Ldloc_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloc_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_1"/>) that
            loads the local variable at index 1 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_1">OpCodes.Ldloc_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloc_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_2"/>) that
            loads the local variable at index 2 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_2">OpCodes.Ldloc_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldloc_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldloc_3"/>) that
            loads the local variable at index 3 onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldloc_3">OpCodes.Ldloc_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.ldnull">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Ldnull"/>) that
            pushes a null reference (type O) onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Ldnull">OpCodes.Ldnull</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.localloc">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Localloc"/>) that
            allocates a certain number of bytes from the local dynamic memory pool and pushes the address 
            (a transient pointer, type *) of the first allocated byte onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Localloc">OpCodes.Localloc</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.mul">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul"/>) that
            multiplies two values and pushes the result on the evaluation stack.
            (a transient pointer, type *) of the first allocated byte onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul">OpCodes.Mul</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.mul_ovf">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf"/>) that
            multiplies two integer values, performs an overflow check, 
            and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf">OpCodes.Mul_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.mul_ovf_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un"/>) that
            multiplies two unsigned integer values, performs an overflow check, 
            and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">OpCodes.Mul_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.neg">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Neg"/>) that
            negates a value and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Neg">OpCodes.Neg</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.nop">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Nop"/>) that
            fills space if opcodes are patched. No meaningful operation is performed although 
            a processing cycle can be consumed.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Nop">OpCodes.Nop</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.not">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Not"/>) that
            computes the bitwise complement of the integer value on top of the stack 
            and pushes the result onto the evaluation stack as the same type.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Not">OpCodes.Not</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.or">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Or"/>) that
            compute the bitwise complement of the two integer values on top of the stack and 
            pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Or">OpCodes.Or</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.pop">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Pop"/>) that
            removes the value currently on top of the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Pop">OpCodes.Pop</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.refanytype">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Refanytype"/>) that
            retrieves the type token embedded in a typed reference.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Refanytype">OpCodes.Refanytype</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.rem">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rem"/>) that
            divides two values and pushes the remainder onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rem">OpCodes.Rem</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.rem_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rem_Un"/>) that
            divides two unsigned values and pushes the remainder onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rem_Un">OpCodes.Rem_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.rethrow">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Rethrow"/>) that
            rethrows the current exception.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Rethrow">OpCodes.Rethrow</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.shl">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shl"/>) that
            shifts an integer value to the left (in zeroes) by a specified number of bits,
            pushing the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shl">OpCodes.Shl</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.shr">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shr"/>) that
            shifts an integer value (in sign) to the right by a specified number of bits,
            pushing the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shr">OpCodes.Shr</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.shr_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Shr_Un"/>) that
            shifts an unsigned integer value (in zeroes) to the right by a specified number of bits,
            pushing the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Shr_Un">OpCodes.Shr_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stelem_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I"/>) that
            replaces the array element at a given index with the natural int value 
            on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I">OpCodes.Stelem_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stelem_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I1"/>) that
            replaces the array element at a given index with the int8 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I1">OpCodes.Stelem_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stelem_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I2"/>) that
            replaces the array element at a given index with the int16 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I2">OpCodes.Stelem_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stelem_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I4"/>) that
            replaces the array element at a given index with the int32 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I4">OpCodes.Stelem_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stelem_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_I8"/>) that
            replaces the array element at a given index with the int64 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_I8">OpCodes.Stelem_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stelem_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_R4"/>) that
            replaces the array element at a given index with the float32 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_R4">OpCodes.Stelem_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stelem_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_R8"/>) that
            replaces the array element at a given index with the float64 value on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_R8">OpCodes.Stelem_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stelem_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref"/>) that
            replaces the array element at a given index with the object ref value (type O)
            on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stelem_Ref">OpCodes.Stelem_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stind_i">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I"/>) that
            stores a value of type natural int at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I">OpCodes.Stind_I</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stind_i1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I1"/>) that
            stores a value of type int8 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I1">OpCodes.Stind_I1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stind_i2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I2"/>) that
            stores a value of type int16 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I2">OpCodes.Stind_I2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stind_i4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I4"/>) that
            stores a value of type int32 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I4">OpCodes.Stind_I4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stind_i8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_I8"/>) that
            stores a value of type int64 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_I8">OpCodes.Stind_I8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stind_r4">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_R4"/>) that
            stores a value of type float32 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_R4">OpCodes.Stind_R4</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stind_r8">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_R8"/>) that
            stores a value of type float64 at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_R8">OpCodes.Stind_R8</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stind_ref">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stind_Ref"/>) that
            stores an object reference value at a supplied address.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stind_Ref">OpCodes.Stind_Ref</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stloc_0">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_0"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 0.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_0">OpCodes.Stloc_0</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stloc_1">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_1"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 1.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_1">OpCodes.Stloc_1</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stloc_2">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_2"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 2.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_2">OpCodes.Stloc_2</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.stloc_3">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Stloc_3"/>) that
            pops the current value from the top of the evaluation stack and stores it 
            in the local variable list at index 3.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Stloc_3">OpCodes.Stloc_3</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.sub">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub"/>) that
            subtracts one value from another and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub">OpCodes.Sub</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.sub_ovf">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf"/>) that
            subtracts one integer value from another, performs an overflow check,
            and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf">OpCodes.Sub_Ovf</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.sub_ovf_un">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un"/>) that
            subtracts one unsigned integer value from another, performs an overflow check,
            and pushes the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">OpCodes.Sub_Ovf_Un</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.tailcall">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Tailcall"/>) that
            performs a postfixed method call instruction such that the current method's stack frame 
            is removed before the actual call instruction is executed.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Tailcall">OpCodes.Tailcall</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.throw">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Throw"/>) that
            throws the exception object currently on the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Throw">OpCodes.Throw</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.volatile">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Volatile"/>) that
            specifies that an address currently atop the evaluation stack might be volatile, 
            and the results of reading that location cannot be cached or that multiple stores 
            to that location cannot be suppressed.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Volatile">OpCodes.Volatile</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="P:FluorineFx.IO.Bytecode.Lightweight.EmitHelper.xor">
            <summary>
            Calls ILGenerator.Emit(<see cref="F:System.Reflection.Emit.OpCodes.Xor"/>) that
            computes the bitwise XOR of the top two values on the evaluation stack, 
            pushing the result onto the evaluation stack.
            </summary>
            <seealso cref="F:System.Reflection.Emit.OpCodes.Xor">OpCodes.Xor</seealso>
            <seealso cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">ILGenerator.Emit</seealso>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.Lightweight.BytecodeProvider">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.Sequence">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider">
            <summary>
            Pullable provider for files.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IPassive">
            <summary>
            Marker interface for a provider/consumer never actively providers/consumers messages.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.IStreamTypeAwareProvider">
            <summary>
            Interface for providers that know if they contain video frames.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IStreamTypeAwareProvider.HasVideo">
            <summary>
            Checks if the provider contains video tags.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider._scope">
            <summary>
            Provider scope.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider._file">
            <summary>
            Source file.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider._pipe">
            <summary>
            Consumer pipe.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider._reader">
            <summary>
            Tag reader.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider._keyFrameMeta">
            <summary>
            Keyframe metadata.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider._start">
            <summary>
            Position at start.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider.#ctor(FluorineFx.Messaging.Api.IScope,System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the FileProvider class for specific file and scope.
            </summary>
            <param name="scope">Scope.</param>
            <param name="file">File.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider.Init">
            <summary>
            Initializes file provider. Creates streamable file factory and service, seeks to start position.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider.Uninit">
            <summary>
            Reset.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.Provider.FileProvider.Start">
            <summary>
            Gets or sets the start position.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.DefaultStreamFilenameGenerator">
            <summary>
            Default filename generator for streams. The files will be stored in a
            directory "streams" in the application folder.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.DefaultStreamFilenameGenerator.GetStreamDirectory(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Generate stream directory based on relative scope path. The base directory is
            <code>streams</code>, e.g. a scope <code>/application/one/two</code> will
            generate a directory <code>/streams/one/two</code> inside the application.
            </summary>
            <param name="scope">Scope.</param>
            <returns>Directory based on relative scope path.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.DefaultStreamFilenameGenerator.ResolvesToAbsolutePath">
            <summary>
            The default filenames are relative to the scope path, so always return <code>false</code>.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamCodecInfo">
            <summary>
            Stream codec information.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStreamCodecInfo.HasAudio">
            <summary>
            Gets whether stream codec has audio support.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStreamCodecInfo.HasVideo">
            <summary>
            Gets whether stream codec has video support.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStreamCodecInfo.AudioCodecName">
            <summary>
            Gets audio codec name.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStreamCodecInfo.VideoCodecName">
            <summary>
            Gets video codec name.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStreamCodecInfo.VideoCodec">
            <summary>
            Gets video codec used by stream codec.
            </summary>
        </member>
        <member name="T:FluorineFx.Scheduling.ScheduledJobContext">
            <summary>
            A context bundle containing handles to various environment information, that
            is given to a <see cref="!:ScheduledJobDetail"/> instance as it is
            executed, and to a <see cref="T:FluorineFx.Scheduling.Trigger"/> instance after the
            execution completes.
            </summary>
        </member>
        <member name="T:FluorineFx.RtmptHandler">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:FluorineFx.Messaging.ClientManager">
            <summary>
            ClientManager manages clients connected to the FluorineFx server.
            </summary>
            <example>
            	<para><font color="blue" size="2"><font color="blue" size="2">class</font></font><font size="2">ChatAdapter : MessagingAdapter,
                ISessionListener</font></para>
            	<para><font size="2">{</font></para>
            	<para><font size="2"><font color="blue" size="2"><font color="blue" size="2"><font color="blue" size="2"><font color="blue" size="2">private</font></font>
            					<font color="#2B91AF" size="2"><font color="#2B91AF" size="2">Hashtable</font></font>
            					<font size="2">_clients;</font></font></font></font></para>
            	<para></para>
            	<para><font size="2"><font size="2"><font color="blue" size="2"><font color="blue" size="2">public</font></font>
            				<font size="2">ChatAdapter()</font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2">{</font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2">_clients =</font>
            				<font color="blue" size="2"><font color="blue" size="2">new</font></font>
            				<font color="#2B91AF" size="2"><font color="#2B91AF" size="2">Hashtable</font></font><font size="2">();</font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2">ClientManager.AddSessionCreatedListener(</font><font color="blue" size="2"><font color="blue" size="2">this</font></font><font size="2">);</font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2">}</font></font></font></para>
            	<para></para>
            	<para><font size="2"><font size="2"><font size="2"><font color="blue" size="2"><font color="blue" size="2">public</font></font>
            					<font color="blue" size="2"><font color="blue" size="2">void</font></font>
            					<font size="2">SessionCreated(IClient client)</font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2">{</font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font color="blue" size="2"><font color="blue" size="2">lock</font></font>
            						<font size="2">(_clients.SyncRoot)</font></font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font size="2">{</font></font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2">_clients.Add(client.Id, client);</font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font size="2">}</font></font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2">client.AddSessionDestroyedListener(</font><font color="blue" size="2"><font color="blue" size="2">this</font></font><font size="2">);</font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2">}</font></font></font></font></para>
            	<para></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font color="blue" size="2"><font color="blue" size="2">public</font></font>
            						<font color="blue" size="2"><font color="blue" size="2">void</font></font>
            						<font size="2">SessionDestroyed(IClient client)</font></font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font size="2">{</font></font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font size="2">lock <font size="2">(_clients.SyncRoot)</font></font></font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font size="2">{</font></font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font size="2"><font size="2">_clients.Remove(client.Id);</font></font></font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font size="2"><font size="2">}</font></font></font></font></font></font></para>
            	<para><font size="2"><font size="2"><font size="2"><font size="2"><font size="2"><font size="2">}</font></font></font></font></font></font></para>
            	<para></para>
            	<para><font size="2">}</font></para>
            </example>
        </member>
        <member name="T:FluorineFx.Messaging.Api.IClientRegistry">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClientRegistry.HasClient(System.String)">
            <summary>
            Check if a client with a given id exists.
            </summary>
            <param name="id">The identity of the client to check for.</param>
            <returns><c>true</c> if the client exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClientRegistry.LookupClient(System.String)">
            <summary>
            Returns an existing client from a client id.
            </summary>
            <param name="id">The identity of the client to return.</param>
            <returns>The client object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClientRegistry.GetClient(System.String)">
            <summary>
            Returns an existing client from a client id or creates a new one if not found.
            </summary>
            <param name="id">The identity of the client to return.</param>
            <returns>The client object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.IClientRegistry.GetClient(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Returns an existing client from the message header transporting the global FlexClient Id value or creates a new one if not found.
            </summary>
            <param name="message">Message sent from client.</param>
            <returns>The client object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.ClientManager.AddSessionCreatedListener(FluorineFx.Context.ISessionListener)">
            <summary>
            Adds a session create listener that will be notified when the session is created.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.ClientManager.RemoveSessionCreatedListener(FluorineFx.Context.ISessionListener)">
            <summary>
            Removes a session create listener.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.ClientManager.NotifyCreated(FluorineFx.Messaging.Api.IClient)">
            <summary>
            Notifies session listeners.
            </summary>
            <param name="client">The client(sesion) created.</param>
        </member>
        <member name="M:FluorineFx.Messaging.ClientManager.GetClient(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Returns an existing client from the message header transporting the global FlexClient Id value or creates a new one if not found.
            </summary>
            <param name="message">Message sent from client.</param>
            <returns>The client object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.ClientManager.GetClient(System.String)">
            <summary>
            Returns an existing client from a client id or creates a new one if not found.
            </summary>
            <param name="id">The identity of the client to return.</param>
            <returns>The client object.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.ClientManager.HasClient(System.String)">
            <summary>
            Check if a client with a given id exists.
            </summary>
            <param name="id">The identity of the client to check for.</param>
            <returns><c>true</c> if the client exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.ClientManager.LookupClient(System.String)">
            <summary>
            Returns an existing client from a client id.
            </summary>
            <param name="id">The identity of the client to return.</param>
            <returns>The client object if exists, null otherwise.</returns>
        </member>
        <member name="T:FluorineFx.Expression.OpGreaterOrEqual">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpBetween">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.Expression">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.FluorineSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.FluorineSettings.#ctor">
            <summary>
            Initializes a new instance of the FluorineSettings class.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.ClassMappings">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.Nullables">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.Services">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.HttpCompressSettings">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.WsdlGenerateProxyClasses">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.WsdlProxyNamespace">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.LoginCommands">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.Cache">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.ImportNamespaces">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.StreamableFileFactory">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.BWControlService">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.SchedulingService">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.PlaylistSubscriberStream">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.RtmpServer">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.SwxSettings">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.JSonSettings">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.Silverlight">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.TimezoneCompensation">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.AcceptNullValueTypes">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.RemotingServiceAttribute">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.Optimizer">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.FluorineSettings.Runtime">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.LoginCommandCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.LoginCommandCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.LoginCommandCollection.GetLoginCommand(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Configuration.LoginCommandSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.LoginCommandSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.LoginCommandSettings.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.LoginCommandSettings.Server">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ClassMappingCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ClassMappingCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ClassMappingCollection.Add(System.String,System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <param name="customClass"></param>
        </member>
        <member name="M:FluorineFx.Configuration.ClassMappingCollection.Add(FluorineFx.Configuration.ClassMapping)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.ClassMappingCollection.Remove(FluorineFx.Configuration.ClassMapping)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.ClassMappingCollection.GetCustomClass(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.ClassMappingCollection.GetType(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="customClass"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Configuration.ClassMapping">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ClassMapping.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ClassMapping.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ClassMapping.CustomClass">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ServiceCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceCollection.Add(FluorineFx.Configuration.ServiceConfiguration)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceCollection.Insert(System.Int32,FluorineFx.Configuration.ServiceConfiguration)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceCollection.Remove(FluorineFx.Configuration.ServiceConfiguration)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceCollection.Contains(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceCollection.GetServiceLocation(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceCollection.GetServiceName(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="serviceLocation"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceCollection.GetMethod(System.String,System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="serviceName"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceCollection.GetMethodName(System.String,System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="serviceLocation"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Configuration.ServiceConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ServiceConfiguration.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ServiceConfiguration.Name">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ServiceConfiguration.ServiceLocation">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ServiceConfiguration.Methods">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.RemoteMethodCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.RemoteMethodCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.RemoteMethodCollection.Add(FluorineFx.Configuration.RemoteMethod)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.RemoteMethodCollection.Insert(System.Int32,FluorineFx.Configuration.RemoteMethod)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.RemoteMethodCollection.GetMethod(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.RemoteMethodCollection.GetMethodName(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Configuration.RemoteMethod">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RemoteMethod.Name">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RemoteMethod.Method">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.NullableTypeCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.NullableTypeCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.NullableTypeCollection.Add(FluorineFx.Configuration.NullableType)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.NullableTypeCollection.Insert(System.Int32,FluorineFx.Configuration.NullableType)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.NullableTypeCollection.Remove(FluorineFx.Configuration.NullableType)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.NullableTypeCollection.ContainsKey(System.Type)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Configuration.NullableTypeCollection.Item(System.Type)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Configuration.NullableType">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.NullableType.Init">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.NullableType.TypeName">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.NullableType.Value">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.NullableType.NullValue">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.CacheCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.CacheCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.CachedService">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.CachedService.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.CachedService.Timeout">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.CachedService.SlidingExpiration">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.CachedService.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ImportNamespaceCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ImportNamespaceCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ImportNamespace">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ImportNamespace.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ImportNamespace.Namespace">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ImportNamespace.Assembly">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.StreamableFileFactorySettings">
            <summary>
            StreamableFileFactory settings.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.StreamableFileFactorySettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.StreamableFileFactorySettings.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.BWControlServiceSettings">
            <summary>
            BWControlServiceSettings settings.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.BWControlServiceSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.BWControlServiceSettings.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.BWControlServiceSettings.Interval">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.BWControlServiceSettings.DefaultCapacity">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.SchedulingServiceSettings">
            <summary>
            SchedulingServiceSettings settings.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.SchedulingServiceSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.SchedulingServiceSettings.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.PlaylistSubscriberStreamSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.PlaylistSubscriberStreamSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.PlaylistSubscriberStreamSettings.UnderrunTrigger">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.PlaylistSubscriberStreamSettings.BufferCheckInterval">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.HttpCompressSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.HttpCompressSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.HttpCompressSettings.IsExcludedMimeType(System.String)">
            <summary>
            Checks a given mime type to determine if it has been excluded from compression
            </summary>
            <param name="mimetype">The MimeType to check.  Can include wildcards like image/* or */xml.</param>
            <returns>true if the mime type passed in is excluded from compression, false otherwise</returns>
        </member>
        <member name="M:FluorineFx.Configuration.HttpCompressSettings.IsExcludedPath(System.String)">
            <summary>
            Looks for a given path in the list of paths excluded from compression.
            </summary>
            <param name="relUrl">the relative url to check</param>
            <returns>true if excluded, false if not</returns>
        </member>
        <member name="P:FluorineFx.Configuration.HttpCompressSettings.Default">
            <summary>
            The default settings.  Deflate + normal.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.HttpCompressSettings.HandleRequest">
            <summary>
            Request type to handle.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.HttpCompressSettings.PreferredAlgorithm">
            <summary>
            The preferred algorithm to use for compression.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.HttpCompressSettings.Threshold">
            <summary>
            Compress responses larger then threshold bytes.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.HttpCompressSettings.CompressionLevel">
            <summary>
            The preferred compression level.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.MimeTypeEntryCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.MimeTypeEntryCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.MimeTypeEntryCollection.Add(FluorineFx.Configuration.MimeTypeEntry)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.MimeTypeEntryCollection.Insert(System.Int32,FluorineFx.Configuration.MimeTypeEntry)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.MimeTypeEntryCollection.Remove(FluorineFx.Configuration.MimeTypeEntry)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.MimeTypeEntryCollection.Contains(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Configuration.PathEntryCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.PathEntryCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.PathEntryCollection.Add(FluorineFx.Configuration.PathEntry)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.PathEntryCollection.Insert(System.Int32,FluorineFx.Configuration.PathEntry)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.PathEntryCollection.Remove(FluorineFx.Configuration.PathEntry)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.PathEntryCollection.Contains(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Configuration.MimeTypeEntry">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.MimeTypeEntry.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.PathEntry">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.PathEntry.Path">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.RtmpServerSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.RtmpServerSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpServerSettings.ThreadPoolSettings">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpServerSettings.RtmpConnectionSettings">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpServerSettings.RtmptConnectionSettings">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpServerSettings.RtmpTransportSettings">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ThreadPoolSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ThreadPoolSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ThreadPoolSettings.MinWorkerThreads">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ThreadPoolSettings.MaxWorkerThreads">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ThreadPoolSettings.IdleTimeout">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.RtmpConnectionSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.RtmpConnectionSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpConnectionSettings.PingInterval">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpConnectionSettings.MaxInactivity">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpConnectionSettings.MaxHandshakeTimeout">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.RtmptConnectionSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.RtmptConnectionSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmptConnectionSettings.PingInterval">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmptConnectionSettings.MaxInactivity">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmptConnectionSettings.MaxHandshakeTimeout">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.RtmpTransportSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.RtmpTransportSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpTransportSettings.ReceiveBufferSize">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpTransportSettings.SendBufferSize">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RtmpTransportSettings.TcpNoDelay">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.OptimizerSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.OptimizerSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.OptimizerSettings.Provider">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.OptimizerSettings.Debug">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.OptimizerSettings.TypeCheck">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.SwxSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.SwxSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.SwxSettings.AllowDomain">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.JSonSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.JSonSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.JSonSettings.JsonRpcGenerators">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.JsonRpcGeneratorCollection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.JsonRpcGeneratorCollection.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.JsonRpcGeneratorCollection.Add(FluorineFx.Configuration.JsonRpcGenerator)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Configuration.JsonRpcGeneratorCollection.Insert(System.Int32,FluorineFx.Configuration.JsonRpcGenerator)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.JsonRpcGeneratorCollection.Remove(FluorineFx.Configuration.JsonRpcGenerator)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Configuration.JsonRpcGeneratorCollection.Contains(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Configuration.JsonRpcGeneratorCollection.Item(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Configuration.JsonRpcGenerator">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.JsonRpcGenerator.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.JsonRpcGenerator.Name">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.JsonRpcGenerator.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.RuntimeSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.RuntimeSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RuntimeSettings.MinWorkerThreads">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RuntimeSettings.MaxWorkerThreads">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.RuntimeSettings.AsyncHandler">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.SilverlightSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.SilverlightSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.SilverlightSettings.PolicyServerSettings">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.PolicyServerSettings">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.PolicyServerSettings.#ctor">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.PolicyServerSettings.Enable">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.PolicyServerSettings.PolicyFile">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.AMF3.ClassDefinition">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ClassDefinition.ClassName">
            <summary>
            Gets the class name.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ClassDefinition.MemberCount">
            <summary>
            Gets the class member count.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ClassDefinition.Members">
            <summary>
            Gets the array of class members.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ClassDefinition.IsExternalizable">
            <summary>
            Indicates whether the class is externalizable.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ClassDefinition.IsDynamic">
            <summary>
            Indicates whether the class is dynamic.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ClassDefinition.IsTypedObject">
            <summary>
            Indicates whether the class is typed (not anonymous).
            </summary>
        </member>
        <member name="T:FluorineFx.AMF3.ClassMember">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ClassMember.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ClassMember.BindingFlags">
            <summary>
            Gets the member binding flags.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ClassMember.MemberType">
            <summary>
            Gets the member type.
            </summary>
        </member>
        <member name="T:FluorineFx.AMF3.ByteArrayConverter">
            <summary>
            Provides a type converter to convert ByteArray objects to and from various other representations.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArrayConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overloaded. Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:FluorineFx.AMF3.ByteArray">
            <summary>
            Flex ByteArray. The ByteArray class provides methods and properties to optimize reading, writing, and working with binary data.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.#ctor">
            <summary>
            Initializes a new instance of the ByteArray class.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the ByteArray class.
            </summary>
            <param name="ms">The MemoryStream from which to create the current ByteArray.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ByteArray class.
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create the current ByteArray.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.GetBuffer">
            <summary>
            Returns the array of unsigned bytes from which this ByteArray was created.
            </summary>
            <returns>The byte array from which this ByteArray was created, or the underlying array if a byte array was not provided to the ByteArray constructor during construction of the current instance.</returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadBoolean">
            <summary>
            Reads a Boolean from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadByte">
            <summary>
            Reads a signed byte from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadBytes(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Reads length bytes of data from the byte stream or byte array. 
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadDouble">
            <summary>
            Reads an IEEE 754 double-precision floating point number from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadFloat">
            <summary>
            Reads an IEEE 754 single-precision floating point number from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadInt">
            <summary>
            Reads a signed 32-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadObject">
            <summary>
            Reads an object from the byte stream or byte array, encoded in AMF serialized format. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadShort">
            <summary>
            Reads a signed 16-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadUnsignedByte">
            <summary>
            Reads an unsigned byte from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadUnsignedInt">
            <summary>
            Reads an unsigned 32-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadUnsignedShort">
            <summary>
            Reads an unsigned 16-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadUTF">
            <summary>
            Reads a UTF-8 string from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.ReadUTFBytes(System.UInt32)">
            <summary>
            Reads a sequence of length UTF-8 bytes from the byte stream or byte array, and returns a string. 
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteBoolean(System.Boolean)">
            <summary>
            Writes a Boolean value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteByte(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of length bytes from the specified byte array, bytes, starting offset(zero-based index) bytes into the byte stream.
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteDouble(System.Double)">
            <summary>
            Writes an IEEE 754 double-precision (64-bit) floating point number.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteFloat(System.Single)">
            <summary>
            Writes an IEEE 754 single-precision (32-bit) floating point number.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteInt(System.Int32)">
            <summary>
            Writes a 32-bit signed integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteObject(System.Object)">
            <summary>
            Writes an object to the byte stream or byte array in AMF serialized format.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteShort(System.Int16)">
            <summary>
            Writes a 16-bit integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteUnsignedInt(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteUTF(System.String)">
            <summary>
            Writes a UTF-8 string to the byte stream. 
            The length of the UTF-8 string in bytes is written first, as a 16-bit integer, followed by 
            the bytes representing the characters of the string.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.WriteUTFBytes(System.String)">
            <summary>
            Writes a UTF-8 string. Similar to writeUTF, but does not prefix the string with a 16-bit length word.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.Compress">
            <summary>
            Compresses the byte array using zlib compression. The entire byte array is compressed.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.ByteArray.Uncompress">
            <summary>
            Decompresses the byte array. The byte array must have been previously compressed with the Compress() method.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ByteArray.Length">
            <summary>
            Gets the length of the ByteArray object, in bytes.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ByteArray.Position">
            <summary>
            Gets or sets the current position, in bytes, of the file pointer into the ByteArray object.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ByteArray.ObjectEncoding">
            <summary>
            Gets or sets the object encoding used in the ByteArray.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ByteArray.MemoryStream">
            <summary>
            Gets the MemoryStream from which this ByteArray was created.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.ReadOnlyList">
            <summary>
            Implements a read-only collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.#ctor(System.Collections.IList)">
            <summary>
            Creates a ReadOnlyList wrapper for a specific IList.
            </summary>
            <param name="list">The IList to wrap.</param>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.Add(System.Object)">
            <summary>
            Not supported. Throws NotSupportedException.
            </summary>
            <param name="value">The Object to add to the ReadOnlyCollection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.Clear">
            <summary>
            Not supported. Throws NotSupportedException.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.Contains(System.Object)">
            <summary>
            Determines whether the ReadOnlyCollection contains a specific value.
            </summary>
            <param name="value">The Object to locate in the ReadOnlyCollection.</param>
            <returns>true if the Object is found in the ReadOnlyCollection; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the ReadOnlyCollection. 
            </summary>
            <param name="value">The Object to locate in the ReadOnlyCollection.</param>
            <returns>The index of value if found in the ReadOnlyCollection; otherwise, -1.</returns>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.Insert(System.Int32,System.Object)">
            <summary>
            Not supported. Throws NotSupportedException.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The Object to insert into the ReadOnlyCollection.</param>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.Remove(System.Object)">
            <summary>
            Not supported. Throws NotSupportedException.
            </summary>
            <param name="value">The Object to remove from the ReadOnlyCollection.</param>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.RemoveAt(System.Int32)">
            <summary>
            Not supported. Throws NotSupportedException.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ReadOnlyCollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ReadOnlyCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:FluorineFx.Collections.ReadOnlyList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through an ReadOnlyCollection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:FluorineFx.Collections.ReadOnlyList.IsFixedSize">
            <summary>
            Gets a value indicating whether the ReadOnlyCollection has a fixed size. Always return <b>true</b>.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.ReadOnlyList.IsReadOnly">
            <summary>
            Gets a value indicating whether the ReadOnlyCollection is read-only. Always return <b>true</b>.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.ReadOnlyList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            Setting this property is not supported. Throws NotSupportedException.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:FluorineFx.Collections.ReadOnlyList.Count">
            <summary>
            Gets the number of elements contained in the ReadOnlyCollection.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.ReadOnlyList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ReadOnlyCollection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.ReadOnlyList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ReadOnlyCollection.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.InvariantStringArray">
            <summary> 
            Helper methods for array containing culturally-invariant strings.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Services.Messaging.SubscriptionManager">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Service.IServiceResolver">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Service.IServiceResolver.ResolveService(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Search for a service with the given name in the scope.
            </summary>
            <param name="scope">The scope to search in.</param>
            <param name="serviceName">The name of the service.</param>
            <returns>The object implemening the service or <code>null</code> if service doesn't exist.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.DescribeServiceFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.DescribeServiceFilter.#ctor">
            <summary>
            Initializes a new instance of the DescribeServiceFilter class.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.ServiceSettings">
            <summary>
            Contains the properties for configuring services.
            This is the <b>service</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceSettings.Id">
            <summary>
            Gets the service identity.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceSettings.Class">
            <summary>
            Gets the service type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceSettings.SupportedMessageTypes">
            <summary>
            Gets a dictionary of supported message types.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceSettings.DestinationSettings">
            <summary>
            Gets the collection of destination settings.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceSettings.AdapterSettings">
            <summary>
            Gets the collection of adapter settings.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceSettings.DefaultAdapter">
            <summary>
            Gets or sets the default adapter.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceSettings.ServiceConfigSettings">
            <summary>
            Gets the ServiceConfigSettings reference.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.ServiceSettingsCollection">
            <summary>
            Strongly typed ServiceSettings collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ServiceSettingsCollection.#ctor">
            <summary>
            Initializes a new instance of the ServiceSettingsCollection class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ServiceSettingsCollection.Add(FluorineFx.Messaging.Config.ServiceSettings)">
            <summary>
            Adds a ServiceSettings to the collection.
            </summary>
            <param name="value">The ServiceSettings to add to the collection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ServiceSettingsCollection.IndexOf(FluorineFx.Messaging.Config.ServiceSettings)">
            <summary>
            Determines the index of a specific item in the collection. 
            </summary>
            <param name="value">The ServiceSettings to locate in the collection.</param>
            <returns>The index of value if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ServiceSettingsCollection.Insert(System.Int32,FluorineFx.Messaging.Config.ServiceSettings)">
            <summary>
            Inserts a ServiceSettings item to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The ServiceSettings to insert into the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ServiceSettingsCollection.Remove(FluorineFx.Messaging.Config.ServiceSettings)">
            <summary>
            Removes the first occurrence of a specific ServiceSettings from the collection.
            </summary>
            <param name="value">The ServiceSettings to remove from the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ServiceSettingsCollection.Contains(FluorineFx.Messaging.Config.ServiceSettings)">
            <summary>
            Determines whether the collection contains a specific ServiceSettings value.
            </summary>
            <param name="value">The ServiceSettings to locate in the collection.</param>
            <returns>true if the ServiceSettings is found in the collection; otherwise, false.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceSettingsCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ServiceSettings element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ServiceSettingsCollection.Item(System.String)">
            <summary>
            Gets or sets the ServiceSettings element with the specified key.
            </summary>
            <param name="key">The id of the ServiceSettings element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Config.AdapterSettings">
            <summary>
            Contains the properties for configuring service adapters.
            This is the <b>adapter</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.AdapterSettings.Id">
            <summary>
            Gets the identity of the adapter.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.AdapterSettings.Class">
            <summary>
            Gets the adapter type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.AdapterSettings.Default">
            <summary>
            Gets whether the adapter is configured as the default adapter.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.AdapterSettingsCollection">
            <summary>
            Strongly typed AdapterSettings collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.AdapterSettingsCollection.#ctor">
            <summary>
            Initializes a new instance of the AdapterSettingsCollection class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.AdapterSettingsCollection.Add(FluorineFx.Messaging.Config.AdapterSettings)">
            <summary>
            Adds a AdapterSettings to the collection.
            </summary>
            <param name="value">The AdapterSettings to add to the collection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.AdapterSettingsCollection.IndexOf(FluorineFx.Messaging.Config.AdapterSettings)">
            <summary>
            Determines the index of a specific item in the collection. 
            </summary>
            <param name="value">The AdapterSettings to locate in the collection.</param>
            <returns>The index of value if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.AdapterSettingsCollection.Insert(System.Int32,FluorineFx.Messaging.Config.AdapterSettings)">
            <summary>
            Inserts a AdapterSettings item to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The AdapterSettings to insert into the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.AdapterSettingsCollection.Remove(FluorineFx.Messaging.Config.AdapterSettings)">
            <summary>
            Removes the first occurrence of a specific AdapterSettings from the collection.
            </summary>
            <param name="value">The AdapterSettings to remove from the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.AdapterSettingsCollection.Contains(FluorineFx.Messaging.Config.AdapterSettings)">
            <summary>
            Determines whether the collection contains a specific AdapterSettings value.
            </summary>
            <param name="value">The AdapterSettings to locate in the collection.</param>
            <returns>true if the AdapterSettings is found in the collection; otherwise, false.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.AdapterSettingsCollection.Item(System.Int32)">
            <summary>
            Gets or sets the AdapterSettings element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.AdapterSettingsCollection.Item(System.String)">
            <summary>
            Gets or sets the AdapterSettings element with the specified key.
            </summary>
            <param name="key">The id of the AdapterSettings element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3DoubleWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0XmlDocumentWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.ErrorResponseBody">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.ResponseBody">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.AMFBody">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody.Recordset">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody.OnResult">
            <summary>
            Suffix to denote a success.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody.OnStatus">
            <summary>
            Suffix to denote a failure.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody.OnDebugEvents">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody._content">
            <summary>
            The actual data associated with the operation.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody._response">
            <summary>
            Response URI which specifies a unique operation name that will be used to match the response to the client invocation.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody._target">
            <summary>
            Target URI describes which operation, function, or method is to be remotely invoked.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody._ignoreResults">
            <summary>
            IgnoreResults is a flag to tell the serializer to ignore the results of the body message.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody._isAuthenticationAction">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody._isDebug">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.AMFBody._isDescribeService">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFBody.#ctor">
            <summary>
            Initializes a new instance of the AMFBody class.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFBody.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the AMFBody class.
            </summary>
            <param name="target"></param>
            <param name="response"></param>
            <param name="content"></param>
        </member>
        <member name="M:FluorineFx.IO.AMFBody.GetRecordsetArgs">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFBody.GetSignature">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFBody.GetParameterList">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.AMFBody.WriteBodyData(FluorineFx.ObjectEncoding,FluorineFx.IO.AMFWriter)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.Target">
            <summary>
            Gets or set the target URI.
            The target URI describes which operation, function, or method is to be remotely invoked.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.IsEmptyTarget">
            <summary>
            Indicates an empty target.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.Response">
            <summary>
            Gets or sets the response URI.
            Response URI which specifies a unique operation name that will be used to match the response to the client invocation.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.Content">
            <summary>
            Gets or sets the actual data associated with the operation.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.IsAuthenticationAction">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.IgnoreResults">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.IsDebug">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.IsDescribeService">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.IsWebService">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.IsRecordsetDelivery">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.TypeName">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.Method">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.AMFBody.Call">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.ResponseBody.#ctor">
            <summary>
            Initializes a new instance of the ResponseBody class.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.ResponseBody.#ctor(FluorineFx.IO.AMFBody)">
            <summary>
            Initializes a new instance of the ResponseBody class.
            </summary>
            <param name="requestBody"></param>
        </member>
        <member name="M:FluorineFx.IO.ResponseBody.#ctor(FluorineFx.IO.AMFBody,System.Object)">
            <summary>
            Initializes a new instance of the ResponseBody class.
            </summary>
            <param name="requestBody"></param>
            <param name="content"></param>
        </member>
        <member name="M:FluorineFx.IO.ResponseBody.GetParameterList">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.IO.ResponseBody.RequestBody">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.ErrorResponseBody.#ctor">
            <summary>
            Initializes a new instance of the ErrorResponseBody class.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.ErrorResponseBody.#ctor(FluorineFx.IO.AMFBody,System.String)">
            <summary>
            Initializes a new instance of the ErrorResponseBody class.
            </summary>
            <param name="requestBody"></param>
            <param name="error"></param>
        </member>
        <member name="M:FluorineFx.IO.ErrorResponseBody.#ctor(FluorineFx.IO.AMFBody,System.Exception)">
            <summary>
            Initializes a new instance of the ErrorResponseBody class.
            </summary>
            <param name="requestBody"></param>
            <param name="exception"></param>
        </member>
        <member name="M:FluorineFx.IO.ErrorResponseBody.#ctor(FluorineFx.IO.AMFBody,FluorineFx.Messaging.Messages.IMessage,System.Exception)">
            <summary>
            Initializes a new instance of the ErrorResponseBody class.
            </summary>
            <param name="requestBody"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:FluorineFx.IO.ErrorResponseBody.#ctor(FluorineFx.IO.AMFBody,FluorineFx.Messaging.Messages.IMessage,FluorineFx.Messaging.Messages.ErrorMessage)">
            <summary>
            Initializes a new instance of the ErrorResponseBody class.
            </summary>
            <param name="requestBody"></param>
            <param name="message"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="T:FluorineFx.Diagnostic.HttpHeader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.Messages.SequencedMessage">
            <summary>
            Clients receive this message in response to DataService.fill() request. 
            The body of the message is an Array of items that were returned from 
            the remote destination based on the fill parameters.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.Messages.SequencedMessage.#ctor">
            <summary>
            Initializes a new instance of the SequencedMessage class.
            </summary>
        </member>
        <member name="P:FluorineFx.Data.Messages.SequencedMessage.sequenceId">
            <summary>
            Provides access to the sequence id for this message. 
            The sequence id is a unique identifier for a sequence within a remote destination. 
            This value is only unique for the endpoint and destination contacted. 
            </summary>
        </member>
        <member name="P:FluorineFx.Data.Messages.SequencedMessage.sequenceSize">
            <summary>
            Provides access to the sequence size for this message.
            The sequence size indicates how many items reside in the remote sequence. 
            </summary>
        </member>
        <member name="T:FluorineFx.SWX.Writers.SWXObjectWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Scheduling.TriggerFiredBundle">
            <summary>
            A simple class used for returning execution-time data from the JobStore to the <see cref="!:SchedulerThread"/>.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.TriggerFiredBundle.#ctor(FluorineFx.Scheduling.IScheduledJob,FluorineFx.Scheduling.Trigger,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.TriggerFiredBundle"/> class.
            </summary>
            <param name="job">The job.</param>
            <param name="trigger">The trigger.</param>
            <param name="jobIsRecovering">if set to <c>true</c> [job is recovering].</param>
            <param name="fireTimeUtc">The fire time.</param>
            <param name="scheduledFireTimeUtc">The scheduled fire time.</param>
            <param name="prevFireTimeUtc">The previous fire time.</param>
            <param name="nextFireTimeUtc">The next fire time.</param>
        </member>
        <member name="P:FluorineFx.Scheduling.TriggerFiredBundle.Job">
            <summary>
            Gets the job detail.
            </summary>
            <value>The job detail.</value>
        </member>
        <member name="P:FluorineFx.Scheduling.TriggerFiredBundle.Trigger">
            <summary>
            Gets the trigger.
            </summary>
            <value>The trigger.</value>
        </member>
        <member name="P:FluorineFx.Scheduling.TriggerFiredBundle.Recovering">
            <summary>
            Gets a value indicating whether this <see cref="T:FluorineFx.Scheduling.TriggerFiredBundle"/> is recovering.
            </summary>
            <value><c>true</c> if recovering; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:FluorineFx.Scheduling.TriggerFiredBundle.FireTimeUtc">
            <returns> 
            Returns the UTC fire time.
            </returns>
        </member>
        <member name="P:FluorineFx.Scheduling.TriggerFiredBundle.NextFireTimeUtc">
            <summary>
            Gets the next UTC fire time.
            </summary>
            <value>The next fire time.</value>
            <returns> Returns the nextFireTimeUtc.</returns>
        </member>
        <member name="P:FluorineFx.Scheduling.TriggerFiredBundle.PrevFireTimeUtc">
            <summary>
            Gets the previous UTC fire time.
            </summary>
            <value>The previous fire time.</value>
            <returns> Returns the previous fire time. </returns>
        </member>
        <member name="P:FluorineFx.Scheduling.TriggerFiredBundle.ScheduledFireTimeUtc">
            <returns> 
            Returns the scheduled UTC fire time.
            </returns>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Codec.StreamCodecInfo._audio">
            <summary>
            Audio support flag.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Codec.StreamCodecInfo._video">
            <summary>
            Video support flag.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Codec.StreamCodecInfo._videoCodec">
            <summary>
            Video codec.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream">
            <summary>
            Abstract base for client streams.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.AbstractStream">
            <summary>
            Abstract base implementation of IStream. Contains codec information, stream name, scope, event handling
            and provides stream start and stop operations.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.AbstractStream._name">
            <summary>
            Stream name.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.AbstractStream._scope">
            <summary>
            Stream scope.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.AbstractStream._codecInfo">
            <summary>
            Stream audio and video codecs information.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.AbstractStream.Start">
            <summary>
            Starts the stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.AbstractStream.Stop">
            <summary>
            Stops the stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.AbstractStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.AbstractStream.GetStreamAwareHandler">
            <summary>
            Returns stream aware scope handler or null if scope is null.
            </summary>
            <returns>IStreamAwareScopeHandler implementation.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.AbstractStream.CodecInfo">
            <summary>
            Gets or sets codec information.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.AbstractStream.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.AbstractStream.Name">
            <summary>
            Gets or sets stream name.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.AbstractStream.Scope">
            <summary>
            Gets or sets stream scope.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream._streamId">
            <summary>
            Stream identifier. Unique across server.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream._streamCapableConnection">
            <summary>
            Connection that works with streams.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream._bwConfig">
            <summary>
            Bandwidth configuration.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream._clientBufferDuration">
            <summary>
            Buffer duration in ms as requested by the client.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream.SetClientBufferDuration(System.Int32)">
            <summary>
            Set the buffer duration for this stream as requested by the client.
            </summary>
            <param name="bufferTime">Duration in ms the client wants to buffer.</param>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream.ClientBufferDuration">
            <summary>
            Gets duration in ms as requested by the client.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream.StreamId">
            <summary>
            Gets stream id.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream.Connection">
            <summary>
            Gets connection associated with stream.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.AbstractClientStream.BandwidthConfiguration">
            <summary>
            Gets or sets stream bandwidth configuration.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.SO.ISharedObjectSecurity">
            <summary>
            Interface for handlers that control access to shared objects.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectSecurity.IsCreationAllowed(FluorineFx.Messaging.Api.IScope,System.String,System.Boolean)">
            <summary>
            Checks if the a shared object may be created in the given scope.
            </summary>
            <param name="scope">The scope object.</param>
            <param name="name">The shared object name.</param>
            <param name="persistent">Is persistent shared object.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectSecurity.IsConnectionAllowed(FluorineFx.Messaging.Api.SO.ISharedObject)">
            <summary>
            Checks if a connection to the given existing shared object is allowed.
            </summary>
            <param name="so">The shared object.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectSecurity.IsWriteAllowed(FluorineFx.Messaging.Api.SO.ISharedObject,System.String,System.Object)">
            <summary>
            Checks if a modification is allowed on the given shared object.
            </summary>
            <param name="so">The shared object.</param>
            <param name="key">The property.</param>
            <param name="value">The value.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectSecurity.IsDeleteAllowed(FluorineFx.Messaging.Api.SO.ISharedObject,System.String)">
            <summary>
            Checks if the deletion of a property is allowed on the given shared object.
            </summary>
            <param name="so">The shared object.</param>
            <param name="key">The property.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.SO.ISharedObjectSecurity.IsSendAllowed(FluorineFx.Messaging.Api.SO.ISharedObject,System.String,System.Collections.IList)">
            <summary>
            Checks if sending a message to the shared object is allowed.
            </summary>
            <param name="so">The shared object.</param>
            <param name="message">The message.</param>
            <param name="arguments">Arguments.</param>
            <returns>true to allow, false to deny.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.SimpleBWControlService">
            <summary>
            A simple implementation of bandwidth controller. The initial burst,
            if not specified by user, is half of the property "defaultCapacity".
            <p>
            Following is the reference information for the future optimization on threading:
            The threads that may access this object concurrently are:
            Thread A that makes token request.
            Thread B that makes token request.
            Thread C that distributes tokens and call the callbacks. (Timer)
            Thread D that updates the bw config of a controllable.
            Thread E that resets a bucket.
            Thread F that unregisters a controllable.
            
            The implementation now synchronizes on each context to make sure only one thread is accessing the context object at a time.
            </p>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:FluorineFx.Messaging.Rtmp.Stream.SimpleBWControlService._contextMap" -->
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.SimpleBWControlService.RollbackRequest(FluorineFx.Messaging.Rtmp.Stream.SimpleBWControlService.TokenRequest)">
            Give back the acquired tokens due to failing to accomplish the requested
            operation or over-charged tokens in the case of best-effort request.
            @param request
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.SimpleBWControlService.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:FluorineFx.Messaging.Rtmp.Stream.SimpleBWControlService.TokenRequest.acquiredStack" -->
        <!-- Badly formed XML comment ignored for member "F:FluorineFx.Messaging.Rtmp.Stream.SimpleBWControlService.BWContext.pendingRequestArray" -->
        <member name="T:FluorineFx.Net.RtmpClientConnection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Net.NetStatusHandler">
            <summary>
            Represents the method that will handle the NetStatus event of a NetConnection or RemoteSharedObject object. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A NetStatusEventArgs object that contains the event data.</param>
        </member>
        <member name="T:FluorineFx.Net.ConnectHandler">
            <summary>
            Represents the method that will handle the Connect event of a NetConnection or RemoteSharedObject object. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">EventArgs object that contains the event data.</param>
        </member>
        <member name="T:FluorineFx.Net.DisconnectHandler">
            <summary>
            Represents the method that will handle the Disconnect event of a NetConnection or RemoteSharedObject object. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">EventArgs object that contains the event data.</param>
        </member>
        <member name="T:FluorineFx.Net.NetConnection">
            <summary>
            The NetConnection class creates a connection between a .NET client and a Flash Media Server application or application server running Flash Remoting.
            </summary>
            <example>
            <code lang="CS">
            _netConnection = new NetConnection();
            _netConnection.ObjectEncoding = ObjectEncoding.AMF3;
            _netConnection.NetStatus += new NetStatusHandler(_netConnection_NetStatus);
            _netConnection.Connect(“http://localhost:1781/SilverlightApplicationWeb/Gateway.aspx”);
            ...
            _netConnection.Call("ServiceLibrary.MyDataService.GetCustomers", new GetCustomersHandler(), new object[] { txtSearch.Text });
            
            void _netConnection_NetStatus(object sender, NetStatusEventArgs e)
            {
                string level = e.Info[“level”] as string;
                if (level == “error”)
                {
                    Log(“Error: ” + e.Info[“code”] as string);
                }
                if (level == “status”)
                {
                    Log(“Status: ” + e.Info[“code”] as string);
                }
            }
            
            public class GetCustomersHandler : IPendingServiceCallback
            {
                public GetCustomersHandler()
                {
                }
            
                public void ResultReceived(IPendingServiceCall call)
                {
                    object result = call.Result;
                    ArrayCollection items = result as ArrayCollection;
                    foreach (object item in items)
                    {
                        ...
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:FluorineFx.Net.NetConnection.#ctor">
            <summary>
            Initializes a new instance of the NetConnection class.
            </summary>
        </member>
        <member name="M:FluorineFx.Net.NetConnection.AddHeader(System.String,System.Boolean,System.Object)">
            <summary>
            Adds a context header to the Action Message Format (AMF) packet structure.
            This header is sent with every future AMF packet.
            To remove a header call AddHeader with the name of the header to remove an undefined object.
            </summary>
            <param name="operation">Identifies the header and the ActionScript object data associated with it.</param>
            <param name="mustUnderstand">A value of true indicates that the server must understand and process this header before it handles any of the following headers or messages.</param>
            <param name="param">Any ActionScript object or null.</param>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:FluorineFx.Net.NetConnection.SetCredentials(System.String,System.String)">
            <summary>
            Authenticates a user with a credentials header
            </summary>
            <param name="userid">A username to be used by the server for authentication.</param>
            <param name="password"> password to be used by the server for authentication.</param>
        </member>
        <member name="M:FluorineFx.Net.NetConnection.Connect(System.String,System.Object[])">
            <summary>
            Opens a connection to a server. Through this connection, you can invoke commands on a remote server. 
            </summary>
            <param name="command">Command.</param>
            <param name="arguments">Optional parameters of any type to be passed to the application specified in command.
            If the application is unable to process the parameters in the order in which they are received, NetStatusEvent is dispatched with the code property set to NetConnection.Connect.Rejected
            </param>
            <remarks>
            Set the command parameter to the URI of the application on the server that runs when the connection is made.
            Use the following format. protocol://host[:port]/appname/[instanceName]
            </remarks>
        </member>
        <member name="M:FluorineFx.Net.NetConnection.BeginConnect(System.String,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            Asynchronous version of Connect.
            </summary>
            <param name="command">Command.</param>
            <param name="callback">Callback object.</param>
            <param name="state"></param>
            <param name="arguments">Optional parameters of any type to be passed to the application specified in command.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Net.NetConnection.EndConnect(System.IAsyncResult)">
            <summary>
            Asynchronous version of Connect.
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="M:FluorineFx.Net.NetConnection.Close">
            <summary>
            Closes the connection that was opened with the server and dispatches the netStatus event with a code property of NetConnection.Connect.Close.
            </summary>
        </member>
        <member name="M:FluorineFx.Net.NetConnection.Call(System.String,FluorineFx.Messaging.Api.Service.IPendingServiceCallback,System.Object[])">
            <summary>
            Invokes a command or method on the server to which this connection is connected.
            </summary>
            <param name="command">A method specified in object path form.</param>
            <param name="callback">An optional object that is used to handle return values from the server.</param>
            <param name="arguments">Optional arguments. These arguments are passed to the method specified in the command parameter when the method is executed on the remote application server.</param>
        </member>
        <member name="M:FluorineFx.Net.NetConnection.Call(System.String,System.String,System.String,System.String,FluorineFx.Messaging.Api.Service.IPendingServiceCallback,System.Object[])">
            <summary>
            Invokes a command or method on the server to which this connection is connected.
            </summary>
            <param name="endpoint">Flex RPC endpoint name.</param>
            <param name="destination">Flex RPC message destination.</param>
            <param name="source">The name of the service to be called including namespace name.</param>
            <param name="operation">The name of the remote method/operation that should be called.</param>
            <param name="callback">An optional object that is used to handle return values from the server.</param>
            <param name="arguments">Optional arguments. These arguments are passed to the method specified in the command parameter when the method is executed on the remote application server.</param>
            <remarks>
            For RTMP connection this method throws a NotSupportedException.
            </remarks>
        </member>
        <member name="E:FluorineFx.Net.NetConnection.NetStatus">
            <summary>
            Dispatched when a NetConnection instance is reporting its status or error condition.
            </summary>
        </member>
        <member name="E:FluorineFx.Net.NetConnection.OnConnect">
            <summary>
            Dispatched when a NetConnection instance is connected.
            </summary>
        </member>
        <member name="E:FluorineFx.Net.NetConnection.OnDisconnect">
            <summary>
            Dispatched when a NetConnection instance is disconnected.
            </summary>
        </member>
        <member name="P:FluorineFx.Net.NetConnection.Uri">
            <summary>
            Gets URI of the application on the server.
            </summary>
        </member>
        <member name="P:FluorineFx.Net.NetConnection.PlayerVersion">
            <summary>
            Get or sets the player version string sent from .NET code.
            </summary>
        </member>
        <member name="P:FluorineFx.Net.NetConnection.ObjectEncoding">
            <summary>
            Gets or sets the object encoding (AMF version) for this NetConnection object. Default is ObjectEncoding.AMF0.
            </summary>
        </member>
        <member name="P:FluorineFx.Net.NetConnection.Client">
            <summary>
            Indicates the object on which callback methods should be invoked. The default is this NetConnection instance.
            If you set the client property to another object, callback methods will be invoked on that object. 
            </summary>
        </member>
        <member name="P:FluorineFx.Net.NetConnection.ClientId">
            <summary>
            Gets the client identity.
            </summary>
        </member>
        <member name="P:FluorineFx.Net.NetConnection.Connected">
            <summary>
            Indicates whether this connection has connected to a server through a persistent RTMP connection (true) or not (false).
            It is always true for AMF connections to application servers.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.ServerStream">
            <summary>
            Implementation for server side stream.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IServerStream">
            <summary>
            IServerStream represents a stream broadcasted from the server.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IBroadcastStream">
            <summary>
            A broadcast stream is a stream source to be subscribed by clients. To
            subscribe a stream from your client Flash application use NetStream.play
            method. Broadcast stream can be saved at server-side.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IBroadcastStream.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the broadcast stream as a file. 
            </summary>
            <param name="filePath">The path of the file relative to the scope.</param>
            <param name="isAppend">Whether to append to the end of file.</param>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IBroadcastStream.SaveFilename">
            <summary>
            Gets the filename the stream is being saved as.
            </summary>
            <value>The filename relative to the scope or null if the stream is not being saved.</value>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IBroadcastStream.PublishedName">
            <summary>
            Gets or sets stream publish name. Publish name is the value of the first parameter
            had been passed to <code>NetStream.publish</code> on client side in SWF.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IBroadcastStream.Provider">
            <summary>
            Gets the provider corresponding to this stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IServerStream.Pause">
            <summary>
            Toggles the paused state.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IServerStream.Seek(System.Int32)">
            <summary>
            Seek to a given position in the stream.
            </summary>
            <param name="position">New playback position in milliseconds.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.IPushableConsumer">
            <summary>
            A consumer that supports event-driven message handling and message pushing through pipes.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.IPushableConsumer.PushMessage(FluorineFx.Messaging.Api.Messaging.IPipe,FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Pushes message through pipe.
            </summary>
            <param name="pipe">Pipe.</param>
            <param name="message">Message.</param>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._state">
            <summary>
            Current state
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._publishedName">
            <summary>
            Stream published name
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._controller">
            <summary>
            Actual playlist controller
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._defaultController">
            <summary>
            Default playlist controller
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._isRewind">
            <summary>
            Rewind flag state
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._isRandom">
            <summary>
            Random flag state
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._isRepeat">
            <summary>
            Repeat flag state
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._items">
            <summary>
            List of items in this playlist
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._currentItemIndex">
            <summary>
            Current item index
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._currentItem">
            <summary>
            Current item
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._msgIn">
            <summary>
            Message input
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._msgOut">
            <summary>
            Message output
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._recordPipe">
            <summary>
            Pipe for recording
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._recordingFilename">
            <summary>
            The filename we are recording to.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._vodStartTS">
            <summary>
            VOD start timestamp
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._serverStartTS">
            <summary>
            Server start timestamp
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._nextTS">
            <summary>
            Next msg's timestamp
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._nextRTMPMessage">
            <summary>
            Next RTMP message
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._listeners">
            <summary>
            Listeners to get notified about received packets
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._schedulingService">
            <summary>
            Scheduling service
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._liveJobName">
            <summary>
            Live broadcasting scheduled job name
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ServerStream._vodJobName">
            <summary>
            VOD scheduled job name
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.Pause">
            <summary>
            Toggles the paused state.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.Seek(System.Int32)">
            <summary>
            Seek to a given position in the stream.
            </summary>
            <param name="position">New playback position in milliseconds.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.AddItem(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">Playlist item.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.AddItem(FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
            <summary>
            Adds an item to specific index.
            </summary>
            <param name="item">Playlist item.</param>
            <param name="index">Index in list.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.RemoveItem(System.Int32)">
            <summary>
            Removes an item from list.
            </summary>
            <param name="index">Index in list.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.RemoveAllItems">
            <summary>
            Remove all items.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.GetItem(System.Int32)">
            <summary>
            Returns the item at the specified index.
            </summary>
            <param name="index">Item index.</param>
            <returns>Item at the specified index in list.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.PreviousItem">
            <summary>
            Go for the previous played item.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.NextItem">
            <summary>
            Go for next item decided by controller logic.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.SetItem(System.Int32)">
            <summary>
            Set the current item for playing.
            </summary>
            <param name="index">Position in list</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.SetPlaylistController(FluorineFx.Messaging.Api.Stream.IPlaylistController)">
            <summary>
            Sets list controller.
            </summary>
            <param name="controller">Playlist controller.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves the broadcast stream as a file. 
            </summary>
            <param name="name">The path of the file relative to the scope.</param>
            <param name="isAppend">Whether to append to the end of file.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.OnOOBControlMessage(FluorineFx.Messaging.Api.Messaging.IMessageComponent,FluorineFx.Messaging.Api.Messaging.IPipe,FluorineFx.Messaging.Api.Messaging.OOBControlMessage)">
            <summary>
            Handles out-of-band control message.
            </summary>
            <param name="source">Message component source.</param>
            <param name="pipe">Connection pipe.</param>
            <param name="oobCtrlMsg">Out-of-band control message</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.PushMessage(FluorineFx.Messaging.Api.Messaging.IPipe,FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Pushes message through pipe.
            </summary>
            <param name="pipe">Pipe.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.OnPipeConnectionEvent(FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent)">
            <summary>
            Pipe connection event handler. There are two types of pipe connection events so far,
            provider push connection event and provider disconnection event.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.AddStreamListener(FluorineFx.Messaging.Api.Stream.IStreamListener)">
            <summary>
            Add a listener to be notified about received packets.
            </summary>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.GetStreamListeners">
            <summary>
            Returns registered stream listeners.
            </summary>
            <returns>Collection of stream listeners.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.RemoveStreamListener(FluorineFx.Messaging.Api.Stream.IStreamListener)">
            <summary>
            Remove a listener from being notified about received packets.
            </summary>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.MoveToNext">
            <summary>
            Move to the next item updating the currentItemIndex.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.MoveToPrevious">
            <summary>
            Move to the previous item updating the currentItemIndex.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.OnItemEnd">
            <summary>
            Play next item on item end
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.Play(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Play a specific IPlayItem.
            The strategy for now is VOD first, Live second.
            </summary>
            <param name="item">Item to play</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.SendVODInitCM(FluorineFx.Messaging.Api.Messaging.IMessageInput,System.Int32)">
            <summary>
            Send VOD init control message
            </summary>
            <param name="msgIn"></param>
            <param name="start"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.SendVODSeekCM(FluorineFx.Messaging.Api.Messaging.IMessageInput,System.Int32)">
            <summary>
            Send VOD seek control message
            </summary>
            <param name="msgIn">Message input</param>
            <param name="position">New timestamp to play from</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.NotifyBroadcastStart">
            <summary>
            Notifies handler on stream broadcast start
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.NotifyBroadcastClose">
            <summary>
            Notifies handler on stream broadcast stop
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.ScheduleNextMessage">
            <summary>
            Pull the next message from IMessageInput and schedule it for push according to the timestamp.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.GetNextRTMPMessage">
            <summary>
            Next RTMP message
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.Start">
            <summary>
            Starts the server-side stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.Stop">
            <summary>
            Stops the server-side stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ServerStream.Close">
            <summary>
            Closes the server-side stream.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.Count">
            <summary>
            Gets the number of items in list.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.CurrentItemIndex">
            <summary>
            Gets the currently playing item index.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.CurrentItem">
            <summary>
            Gets the currently playing item.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.HasMoreItems">
            <summary>
            Gets whether the playlist has more items after the currently playing one.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.IsRandom">
            <summary>
            Gets or sets whether items are randomly played.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.IsRewind">
            <summary>
            Gets or sets whether rewind the list.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.IsRepeat">
            <summary>
            Gets or sets whether repeat playing an item.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.SaveFilename">
            <summary>
            Gets the filename the stream is being saved as.
            </summary>
            <value>The filename relative to the scope or null if the stream is not being saved.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.PublishedName" -->
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ServerStream.Provider">
            <summary>
            Gets the provider corresponding to this stream.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.ServerStream.State">
            <summary>
            Stream states.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Reader._tag">
            <summary>
            Last read tag object
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Reader._prevSize">
            <summary>
            Previous tag size
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Reader._currentTime">
            <summary>
            Current time
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Reader._frameMeta">
            <summary>
            Frame metadata
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:FluorineFx.IO.Mp3.Mp3Reader._posTimeMap" -->
        <member name="F:FluorineFx.IO.Mp3.Mp3Reader._firstFrame">
            <summary>
            Whether first frame is read
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Reader._fileMeta">
            <summary>
            File metadata
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Reader._duration">
            <summary>
            File duration
            </summary>
        </member>
        <member name="M:FluorineFx.IO.Mp3.Mp3Reader.HasVideo">
            <summary>
            An MP3 stream never has video.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.Mp3.Mp3Reader.CheckValidHeader(FluorineFx.IO.Mp3.Mp3Header)">
            <summary>
            Check if the file can be played back with Flash. Supported sample rates are 44KHz, 22KHz, 11KHz and 5.5KHz
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:FluorineFx.IO.Mp3.Mp3Reader.CreateFileMeta">
            <summary>
            Create file metadata object
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.Mp3.Mp3Reader.SearchNextFrame">
            <summary>
            Search for next frame sync word. Sync word identifies valid frame.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Mp3.Mp3Header">
            <summary>
            Header of an Mp3 frame.
            http://mpgedit.org/mpgedit/mpeg_format/mpeghdr.htm
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header.BITRATES">
            <summary>
            MP3 bitrates
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header.SAMPLERATES">
            <summary>
            Sample rates
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header._data">
            <summary>
            Frame sync data
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header._audioVersionId">
            <summary>
            Audio version id
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header._layerDescription">
            <summary>
            Layer description
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header._protectionBit">
            <summary>
            Protection bit
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header._bitRateIndex">
            <summary>
            Bitrate used (index in array of bitrates)
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header._samplingRateIndex">
            <summary>
            Sampling rate used (index in array of sample rates)
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header._paddingBit">
            <summary>
            Padding bit
            </summary>
        </member>
        <member name="F:FluorineFx.IO.Mp3.Mp3Header._channelMode">
            <summary>
            Channel mode
            </summary>
        </member>
        <member name="T:FluorineFx.Data.DataServiceException">
            <summary>
            DataServiceException
            </summary>
        </member>
        <member name="M:FluorineFx.Data.DataServiceException.#ctor">
            <summary>
            Initializes a new instance of the DataServiceException class.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.DataServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataServiceException class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>			
        </member>
        <member name="T:FluorineFx.ActivationAttribute">
            <summary>
            Indicates whether a type is an activator. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FluorineFx.ActivationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ActivationAttribute class.
            </summary>
            <param name="activationMode"></param>
        </member>
        <member name="P:FluorineFx.ActivationAttribute.ActivationMode">
            <summary>
            Gets or sets the activation mode.
            </summary>
        </member>
        <member name="T:FluorineFx.Security.ILoginCommand">
            <summary>
            Custom login adapter interface used for custom authentication.
            Checks a user's credentials and retrieves a principal for the gateway.
            </summary>
        </member>
        <member name="M:FluorineFx.Security.ILoginCommand.Start">
            <summary>
            Called to initialize a login command prior to authentication/authorization requests.
            </summary>
        </member>
        <member name="M:FluorineFx.Security.ILoginCommand.Stop">
            <summary>
            Called to free up resources used by the login command.
            </summary>
        </member>
        <member name="M:FluorineFx.Security.ILoginCommand.Logout(System.Security.Principal.IPrincipal)">
            <summary>
            Attempts to log a user out from their session.
            </summary>
            <param name="principal">The principal to logout.</param>
            <returns>A Boolean value indicating whether the principal has been logged out.</returns>
        </member>
        <member name="M:FluorineFx.Security.ILoginCommand.DoAuthorization(System.Security.Principal.IPrincipal,System.Collections.IList)">
            <summary>
            The gateway calls this method to perform programmatic authorization.
            </summary>
            <param name="principal">The principal being checked for authorization.</param>
            <param name="roles">A List of role names to check, all members should be strings.</param>
            <returns>A Boolean value indicating whether the principal has been authorized.</returns>
        </member>
        <member name="M:FluorineFx.Security.ILoginCommand.DoAuthentication(System.String,System.Collections.Hashtable)">
            <summary>
            The gateway calls this method to perform programmatic, custom authentication.
            </summary>
            <param name="username">The principal being authenticated.</param>
            <param name="credentials">The credentials are passed as a Hashtable to allow for extra properties to be passed in the future. For now, only a "password" property is sent.</param>
            <returns>A principal object represents the security context of the user.</returns>
        </member>
        <member name="T:FluorineFx.PageableResult">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.PageableResult.#ctor">
            <summary>
            Initializes a new instance of the PageableResult class.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpPacket">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpPacket.Header">
            <summary>
            Gets or sets the RTMP header.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpPacket.Message">
            <summary>
            Gets or sets the RTMP event.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpPacket.Data">
            <summary>
            Gets or sets packet data.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpConnectionState">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.NetworkSettings">
            <summary>
            Contains the properties for configuring the destination network element.
            This is the <b>network</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.NetworkSettings.PagingEnabled">
            <summary>
            Gets whether data paging is enabled for the destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.NetworkSettings.PagingSize">
            <summary>
            Gets the paging size. When paging is enabled, this indicates the number of records to be sent to the client when the client-side DataService.fill() method is called.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.NetworkSettings.SessionTimeout">
            <summary>
            Gets the idle time in minutes before a subscriber is unsubscribed.
            The value to 0 (zero) means subscribers are not forced to unsubscribe automatically.
            </summary>
            <remarks>The default value is 20.</remarks>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3GuidWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3ByteArrayWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0GuidWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0AssociativeArrayReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Diagnostic.AMFRequestHeaders">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Services.Messaging.MsmqAdapter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.StreamNotFoundException">
            <summary>
            Throwm when stream can't be found.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.StreamNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StreamNotFoundException class with a specified error message.
            </summary>
            <param name="name">Stream name.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.Messages.ResetMessage">
            <summary>
            To notify the client to reset the playing state.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IClientBroadcastStream">
            <summary>
            A broadcast stream that comes from client.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IClientBroadcastStream.StartPublishing">
            <summary>
            Notify client that stream is ready for publishing.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IClientBroadcastStream.Statistics">
            <summary>
            Gets statistics about the stream.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IStreamStatistics.CurrentTimestamp">
            <summary>
            Gets the currently active timestamp inside the stream.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.IO.Flv.IFlvService">
            <summary>
            A FlvService sets up the service and hands out FLV objects to its callers
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.IO.Flv.IFlvService.Serializer">
            <summary>
            Gets or sets the serializer.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.Support.DenyAllStreamAccess">
            <summary>
            Stream security handler that denies access to all streams.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamPublishSecurity">
            <summary>
            Interface for handlers that control access to stream publishing.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamPublishSecurity.IsPublishAllowed(FluorineFx.Messaging.Api.IScope,System.String,System.String)">
            <summary>
            Check if publishing a stream with the given name is allowed.
            </summary>
            <param name="scope">Scope the stream is about to be published in.</param>
            <param name="name">Name of the stream to publish.</param>
            <param name="mode">Publishing mode.</param>
            <returns>true if publishing is allowed, otherwise false.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamPlaybackSecurity">
            <summary>
            Interface for handlers that control access to stream playback.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamPlaybackSecurity.IsPlaybackAllowed(FluorineFx.Messaging.Api.IScope,System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Check if playback of a stream with the given name is allowed.
            </summary>
            <param name="scope">Scope the stream is about to be played back from.</param>
            <param name="name">Name of the stream to play.</param>
            <param name="start">Position to start playback from (in milliseconds).</param>
            <param name="length">Duration to play (in milliseconds).</param>
            <param name="flushPlaylist">Flush playlist.</param>
            <returns>true if playback is allowed, otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.Support.DenyAllStreamAccess.IsPublishAllowed(FluorineFx.Messaging.Api.IScope,System.String,System.String)">
            <summary>
            Check if publishing a stream with the given name is allowed.
            </summary>
            <param name="scope">Scope the stream is about to be published in.</param>
            <param name="name">Name of the stream to publish.</param>
            <param name="mode">Publishing mode.</param>
            <returns>true if publishing is allowed, otherwise false.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.Support.DenyAllStreamAccess.IsPlaybackAllowed(FluorineFx.Messaging.Api.IScope,System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Check if playback of a stream with the given name is allowed.
            </summary>
            <param name="scope">Scope the stream is about to be played back from.</param>
            <param name="name">Name of the stream to play.</param>
            <param name="start">Position to start playback from (in milliseconds).</param>
            <param name="length">Duration to play (in milliseconds).</param>
            <param name="flushPlaylist">Flush playlist.</param>
            <returns>true if playback is allowed, otherwise false.</returns>
        </member>
        <member name="T:FluorineFx.Collections.SynchronizedDictionaryEnumerator">
            <summary>
            Synchronized <see cref="T:System.Collections.IDictionaryEnumerator"/> that should be returned by synchronized
            dictionary implementations in order to ensure that the enumeration is thread safe.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.Generic.CopyOnWriteArray`1">
            <summary>
            A thread-safe variant of ArrayList in which all mutative operations (add, set, and so on) are implemented by making a fresh
            copy of the underlying array.
            
            This is ordinarily too costly, but may be more efficient than alternatives when traversal operations vastly outnumber
            mutations, and is useful when you cannot or don't want to synchronize traversals, yet need to preclude interference among
            concurrent threads.  The "snapshot" style iterator method uses a reference to the state of the array at the point that the iterator
            was created. This array never changes during the lifetime of the iterator, so interference is impossible.
            
            The iterator will not reflect additions, removals, or changes to the list since the iterator was created.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArray`1.#ctor">
            <summary>
            Initializes a new instance of the CopyOnWriteArray class.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArray`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a CopyOnWriteArray wrapper for a specific IList.
            </summary>
            <param name="list">The IList to wrap.</param>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArray`1.IndexOf(`0,`0[],System.Int32)">
            <summary>
            Static version allows repeated call without needed to grab lock for array each time.
            </summary>
            <param name="elem"></param>
            <param name="elementData"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArray`1.Add(System.Object)">
            <summary>
            Adds an object to the end of the CopyOnWriteArray. 
            </summary>
            <param name="value">The Object to add to the CopyOnWriteArray.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArray`1.Contains(System.Object)">
            <summary>
            Determines whether the CopyOnWriteArray contains a specific value.
            </summary>
            <param name="value">The Object to locate in the CopyOnWriteArray.</param>
            <returns>true if the Object is found in the CopyOnWriteArray; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArray`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the CopyOnWriteArray. 
            </summary>
            <param name="value">The Object to locate in the CopyOnWriteArray.</param>
            <returns>The index of value if found in the CopyOnWriteArray; otherwise, -1.</returns>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArray`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the CopyOnWriteArray at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The Object to insert into the CopyOnWriteArray.</param>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArray`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the CopyOnWriteArray.
            </summary>
            <param name="value">The Object to remove from the CopyOnWriteArray.</param>
        </member>
        <member name="M:FluorineFx.Collections.Generic.CopyOnWriteArray`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the CopyOnWriteArray to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from CopyOnWriteArray. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:FluorineFx.Collections.Generic.CopyOnWriteArray`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the CopyOnWriteArray has a fixed size.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.Generic.CopyOnWriteArray`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:FluorineFx.Collections.Generic.CopyOnWriteArray`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the CopyOnWriteArray is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.Generic.CopyOnWriteArray`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the CopyOnWriteArray.
            </summary>
        </member>
        <member name="T:FluorineFx.TransferObjectAttribute">
            <summary>
            Indicates whether a type is a transfer object (value object). This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FluorineFx.TransferObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the TransferObjectAttribute class.
            </summary>
        </member>
        <member name="T:FluorineFx.AMF3.ArrayCollectionConverter">
            <summary>
            Provides a type converter to convert ArrayCollection objects to and from various other representations.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Overloaded. Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:FluorineFx.AMF3.ArrayCollection">
            <summary>
            Flex ArrayCollection class. The ArrayCollection class is a wrapper class that exposes an Array as a collection.
            </summary>
        </member>
        <member name="T:FluorineFx.AMF3.IExternalizable">
            <summary>
            The IExternalizable interface provides control over serialization of a class as it is encoded into a data stream.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.IExternalizable.ReadExternal(FluorineFx.AMF3.IDataInput)">
            <summary>
            A class implements this method to decode itself from a data stream by calling the methods of the IDataInput interface. 
            </summary>
            <param name="input">Input data stream.</param>
        </member>
        <member name="M:FluorineFx.AMF3.IExternalizable.WriteExternal(FluorineFx.AMF3.IDataOutput)">
            <summary>
            A class implements this method to encode itself for a data stream by calling the methods of the IDataOutput interface.
            </summary>
            <param name="output">Output data stream.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.#ctor">
            <summary>
            Initializes a new instance of the ArrayCollection class.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.#ctor(System.Collections.IList)">
            <summary>
            Creates an ArrayCollection wrapper for a specific IList.
            </summary>
            <param name="list">The IList to wrap.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.ToArray">
            <summary>
            Copies the elements of the ArrayCollection to a new array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.ReadExternal(FluorineFx.AMF3.IDataInput)">
            <summary>
            Decode the ArrayCollection from a data stream.
            </summary>
            <param name="input">IDataInput interface.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.WriteExternal(FluorineFx.AMF3.IDataOutput)">
            <summary>
            Encode the ArrayCollection for a data stream.
            </summary>
            <param name="output">IDataOutput interface.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the ArrayCollection item at the specified index. 
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the ArrayCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The Object to insert into the ArrayCollection.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the ArrayCollection.
            </summary>
            <param name="value">The Object to remove from the ArrayCollection.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.Contains(System.Object)">
            <summary>
            Determines whether the ArrayCollection contains a specific value.
            </summary>
            <param name="value">The Object to locate in the ArrayCollection.</param>
            <returns>true if the Object is found in the ArrayCollection; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.Clear">
            <summary>
            Removes all items from the ArrayCollection.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the ArrayCollection. 
            </summary>
            <param name="value">The Object to locate in the ArrayCollection.</param>
            <returns>The index of value if found in the ArrayCollection; otherwise, -1.</returns>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.Add(System.Object)">
            <summary>
            Adds an item to the ArrayCollection.
            </summary>
            <param name="value">The Object to add to the ArrayCollection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ArrayCollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ArrayCollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ArrayCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through an ArrayCollection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:FluorineFx.AMF3.ArrayCollection.Count">
            <summary>
            Gets the number of elements contained in the ArrayCollection.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ArrayCollection.List">
            <summary>
            Gets the underlying IList.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ArrayCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the ArrayCollection is read-only.
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ArrayCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:FluorineFx.AMF3.ArrayCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the ArrayCollection has a fixed size. 
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ArrayCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ArrayCollection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:FluorineFx.AMF3.ArrayCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ArrayCollection.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.IndentedTextWriter">
            <summary>
            Drop-in replacement for <see cref="T:System.CodeDom.Compiler.IndentedTextWriter"/>
            that does not require a full-trust link and inheritance demand.
            Provides a text writer that can indent new lines by a tab string token.
            </summary>
        </member>
        <member name="F:FluorineFx.Util.IndentedTextWriter.DefaultTabString">
            <summary>
            Specifies the default tab string. This field is constant.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the IndentedTextWriter class using the specified text writer and default tab string.
            </summary>
            <param name="writer">The TextWriter to use for output.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Initializes a new instance of the IndentedTextWriter class using the specified text writer and tab string.
            </summary>
            <param name="writer"></param>
            <param name="tabString"></param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Close">
            <summary>
            Closes the document being written to.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.String)">
            <summary>
             Writes the specified string to the text stream.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean value to the text stream.
            </summary>
            <param name="value">The Boolean value to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the text stream.
            </summary>
            <param name="buffer">The character array to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">Starting index in the buffer.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.Double)">
            <summary>
            Writes the text representation of a Double to the text stream.
            </summary>
            <param name="value">The double to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.Single)">
            <summary>
            Writes the text representation of a Single to the text stream.
            </summary>
            <param name="value">The single to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.Int32)">
            <summary>
            Writes the text representation of an integer to the text stream.
            </summary>
            <param name="value">The integer to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte integer to the text stream.
            </summary>
            <param name="value">The 8-byte integer to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.Object)">
            <summary>
            Writes the text representation of an object to the text stream.
            </summary>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.String,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as specified.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">The object to write into the formatted string.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as specified.
            </summary>
            <param name="format">The formatting string to use.</param>
            <param name="arg0">The first object to write into the formatted string.</param>
            <param name="arg1">The second object to write into the formatted string.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.Write(System.String,System.Object[])">
            <summary>
            Writes out a formatted string, using the same semantics as specified.
            </summary>
            <param name="format">The formatting string to use.</param>
            <param name="arg">The argument array to output.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLineNoTabs(System.String)">
            <summary>
            Writes the specified string to a line without tabs.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.String)">
            <summary>
            Writes the specified string, followed by a line terminator, to the text stream.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine">
            <summary>
            Writes a line terminator.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean, followed by a line terminator, to the text stream.
            </summary>
            <param name="value">The Boolean to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.Char)">
            <summary>
            Writes a character, followed by a line terminator, to the text stream.
            </summary>
            <param name="value">The character to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.Char[])">
            <summary>
            Writes a character array, followed by a line terminator, to the text stream.
            </summary>
            <param name="buffer">The character array to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters, followed by a line terminator, to the text stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">Starting index in the buffer.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.Double)">
            <summary>
            Writes the text representation of a Double, followed by a line terminator, to the text stream.
            </summary>
            <param name="value">The double to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.Single)">
            <summary>
            Writes the text representation of a Single, followed by a line terminator, to the text stream.
            </summary>
            <param name="value">The single to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.Int32)">
            <summary>
            Writes the text representation of an integer, followed by a line terminator, to the text stream.
            </summary>
            <param name="value">The integer to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte integer, followed by a line terminator, to the text stream.
            </summary>
            <param name="value">The 8-byte integer to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.Object)">
            <summary>
            Writes the text representation of an object, followed by a line terminator, to the text stream.
            </summary>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
            <param name="format">The formatting string.</param>
            <param name="arg0">The object to write into the formatted string.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
            <param name="format">The formatting string to use.</param>
            <param name="arg0">The first object to write into the formatted string.</param>
            <param name="arg1">The second object to write into the formatted string.</param>
        </member>
        <member name="M:FluorineFx.Util.IndentedTextWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
            <param name="format">The formatting string to use.</param>
            <param name="arg">The argument array to output.</param>
        </member>
        <member name="P:FluorineFx.Util.IndentedTextWriter.Encoding">
            <summary>
            Gets the encoding for the text writer to use.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.IndentedTextWriter.NewLine">
            <summary>
            Gets or sets the new line character to use.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.IndentedTextWriter.Indent">
            <summary>
            Gets or sets the number of spaces to indent.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.IndentedTextWriter.InnerWriter">
            <summary>
            Gets the TextWriter to use.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Services.Remoting.RemotingDestination">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Destination">
            <summary>
            The Destination class is a source and sink for messages sent through 
            a service destination and uses an adapter to process messages.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Destination._service">
            <summary>
            Service managing this Destination.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Destination._settings">
            <summary>
            Destination settings.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Destination._adapter">
            <summary>
            ServiceAdapter for the Destination.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Destination.GetFactoryInstance">
            <summary>
            Returns the FactoryInstance used by the Destination to create object instances.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Messaging.Destination.Id">
            <summary>
            Gets the Destination identity.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Destination.FactoryId">
            <summary>
            Gets the Destination's factory property.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Destination.Service">
            <summary>
            Returns the Service managing this Destination.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Destination.ServiceAdapter">
            <summary>
            Gets the ServiceAdapter used by the Destination for message processing.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Destination.DestinationSettings">
            <summary>
            Gets the Destination settings.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Destination.Source">
            <summary>
            Gets the source property where applicable.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Destination.Scope">
            <summary>
            Gets the scope property where applicable.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.FlexSharedObjectMessage">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.FlexInvoke">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.CoreHandler">
            <summary>
            Base IScopeHandler implementation.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Messages.BinaryMessage">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.BinaryMessage.#ctor">
            <summary>
            Initializes a new instance of the BinaryMessage class.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.MessageServer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageServer.#ctor">
            <summary>
            Initializes a new instance of the MessageServer class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageServer.Init(System.String)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="configPath"></param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageServer.Init(System.String,System.Boolean)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="configPath"></param>
            <param name="serviceBrowserAvailable"></param>
        </member>
        <member name="M:FluorineFx.Messaging.MessageServer.Start">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageServer.Stop">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageServer.Service">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.MessageServer.ServiceRtmpt">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.MessageServer.MessageBroker">
            <summary>
            Gets the message broker started by this server.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.DebugFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.DebugFilter.#ctor">
            <summary>
            Initializes a new instance of the DebugFilter class.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.AuthenticationFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.AuthenticationFilter.#ctor(FluorineFx.Messaging.Endpoints.EndpointBase)">
            <summary>
            Initializes a new instance of the AuthenticationFilter class.
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="T:FluorineFx.Messaging.Config.ChannelSettings">
            <summary>
            Contains the properties for configuring message channels.
            This is the <b>channel-definition</b> element in the services-config.xml file.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Config.ChannelSettings.ContextRoot">
            <summary>
            Context Root token.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ChannelSettings.GetUri">
            <summary>
            Returns the endpoint URI of the channel definition.
            </summary>
            <returns>The endpoint URI representation of the channel definition.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ChannelSettings.ToString">
            <summary>
            Returns a String that represents the current channel settings.
            </summary>
            <returns>A String that represents the current ChannelSettings.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ChannelSettings.Id">
            <summary>
            Gets or sets the identity of the message channel.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ChannelSettings.Class">
            <summary>
            Gets the message channel type.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ChannelSettings.Uri">
            <summary>
            Sets the endpoint URI of the channel definition.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ChannelSettings.IsPollingEnabled">
            <summary>
            Optional channel property. Default value is false.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ChannelSettings.PollingIntervalMillis">
            <summary>
            Optional channel property. Default value is 3000. This parameter specifies the number of milliseconds the client waits before polling the server again. 
            When polling-interval-millis is 0, the client polls as soon as it receives a response from the server with no delay.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ChannelSettings.WaitIntervalMillis">
            <summary>
            Optional endpoint property. Default value is 0. This parameter specifies the number of milliseconds the server poll response thread waits 
            for new messages to arrive when the server has no messages for the client at the time of poll request handling. 
            For this setting to take effect, you must use a nonzero value for the max-waiting-poll-requests property.
            
            A value of 0 means that server does not wait for new messages for the client and returns an empty acknowledgment as usual. 
            A value of -1 means that server waits indefinitely until new messages arrive for the client before responding to the client poll request.
            The recommended value is 60000 milliseconds (one minute).
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ChannelSettings.MaxWaitingPollRequests">
            <summary>
            Optional endpoint property. Default value is 0. Specifies the maximum number of server poll response threads that can be in wait state. 
            When this limit is reached, the subsequent poll requests are treated as having zero wait-interval-millis.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Config.ChannelSettingsCollection">
            <summary>
            Strongly typed ChannelSettings collection.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ChannelSettingsCollection.#ctor">
            <summary>
            Initializes a new instance of the ChannelSettingsCollection class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ChannelSettingsCollection.Add(FluorineFx.Messaging.Config.ChannelSettings)">
            <summary>
            Adds a ChannelSettings to the collection.
            </summary>
            <param name="value">The ChannelSettings to add to the collection.</param>
            <returns>The position into which the new element was inserted.</returns>        
        </member>
        <member name="M:FluorineFx.Messaging.Config.ChannelSettingsCollection.IndexOf(FluorineFx.Messaging.Config.ChannelSettings)">
            <summary>
            Determines the index of a specific item in the collection. 
            </summary>
            <param name="value">The ChannelSettings to locate in the collection.</param>
            <returns>The index of value if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ChannelSettingsCollection.Insert(System.Int32,FluorineFx.Messaging.Config.ChannelSettings)">
            <summary>
            Inserts a ChannelSettings item to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The ChannelSettings to insert into the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ChannelSettingsCollection.Remove(FluorineFx.Messaging.Config.ChannelSettings)">
            <summary>
            Removes the first occurrence of a specific ChannelSettings from the collection.
            </summary>
            <param name="value">The ChannelSettings to remove from the collection.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Config.ChannelSettingsCollection.Contains(FluorineFx.Messaging.Config.ChannelSettings)">
            <summary>
            Determines whether the collection contains a specific ChannelSettings value.
            </summary>
            <param name="value">The ChannelSettings to locate in the collection.</param>
            <returns>true if the ChannelSettings is found in the collection; otherwise, false.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ChannelSettingsCollection.Item(System.Int32)">
            <summary>
            Gets or sets the ChannelSettings element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:FluorineFx.Messaging.Config.ChannelSettingsCollection.Item(System.String)">
            <summary>
            Gets or sets the ChannelSettings element with the specified key.
            </summary>
            <param name="key">The id of the ChannelSettings element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3EnumWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0EnumWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3ByteArrayReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.CachedBody">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.CachedBody.#ctor(FluorineFx.IO.AMFBody,System.Object)">
            <summary>
            Initializes a new instance of the CachedBody class.
            </summary>
            <param name="requestBody"></param>
            <param name="content"></param>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.Lightweight.GenericBinder">
            <Summary>
            Selects a member from a list of candidates, and performs type conversion
            from actual argument type to formal argument type.
            </Summary>
        </member>
        <member name="T:FluorineFx.Exceptions.ClientRejectedException">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Exceptions.ClientRejectedException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ClientRejectedException class.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="T:FluorineFx.Data.UpdateCollectionRange">
            <summary>
            The UpdateCollectionRange class provides specific information about a range 
            of add and remove operations made to a collection. 
            These objects are associated with a specific UpdateCollectionMessage and 
            are carried in an Array on its body property.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.UpdateCollectionRange.DeleteFromCollection">
            <summary>
            Indicates a range of items that have been deleted from the collection.
            </summary>
        </member>
        <member name="F:FluorineFx.Data.UpdateCollectionRange.InsertIntoCollection">
            <summary>
            Indicates a range of items have been inserted into the collection.
            </summary>
        </member>
        <member name="P:FluorineFx.Data.UpdateCollectionRange.identities">
            <summary>
            An Array of identity objects that represent which items were either 
            deleted or inserted in the associated collection starting at the position 
            indicated by the position property.
            </summary>
        </member>
        <member name="P:FluorineFx.Data.UpdateCollectionRange.position">
            <summary>
            Indicates the begining index for the range of updates made to the associated collection. 
            The updateType indicates if the range was an insert or a remove operation. 
            </summary>
        </member>
        <member name="P:FluorineFx.Data.UpdateCollectionRange.updateType">
            <summary>
            Indicates what operation this range represents.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.ListHashCodeProvider">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.AtomicInteger.Increment">
            <summary>
            Atomically increment by one the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.AtomicInteger.Decrement">
            <summary>
            Atomically decrement by one the current value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.AtomicInteger.Increment(System.Int32)">
            <summary>
            Atomically add the given value to current value.
            </summary>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.OutputStream">
            <summary>
            Output stream that consists of audio, video and data channels.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.OutputStream._video">
            <summary>
            Video channel.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.OutputStream._audio">
            <summary>
            Audio channel.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.OutputStream._data">
            <summary>
            Data channel.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.OutputStream.#ctor(FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpChannel,FluorineFx.Messaging.Rtmp.RtmpChannel)">
            <summary>
            Creates output stream from channels.
            </summary>
            <param name="video">Video channel.</param>
            <param name="audio">Audio channel.</param>
            <param name="data">Data channel.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.OutputStream.Close">
            <summary>
            Closes audio, video and data channels.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.ITokenBucketCallback">
            <summary>
            Callback for tocket bucket.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ITokenBucketCallback.Available(FluorineFx.Messaging.Rtmp.Stream.ITokenBucket,System.Int64)">
            <summary>
            Being called when the tokens requested are available.
            </summary>
            <param name="bucket">Bucket.</param>
            <param name="tokenCount">Number of tokens.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ITokenBucketCallback.Reset(FluorineFx.Messaging.Rtmp.Stream.ITokenBucket,System.Int64)">
            <summary>
            Resets tokens in bucket.
            </summary>
            <param name="bucket">Bucket.</param>
            <param name="tokenCount">Number of tokens.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.IConsumerService">
            <summary>
            Service for consumer objects, used to get pushed messages at consumer endpoint.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IConsumerService.GetConsumerOutput(FluorineFx.Messaging.Api.Stream.IClientStream)">
            <summary>
            Handles pushed messages.
            </summary>
            <param name="stream">Client stream object.</param>
            <returns>Message object.</returns>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeChunkSize">
            <summary>
            RTMP chunk size constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeBytesRead">
            <summary>
            Send every x bytes read by both sides.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypePing">
            <summary>
            Ping is a stream control message, has subtypes.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeServerBandwidth">
            <summary>
            Server (downstream) bandwidth marker.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeClientBandwidth">
            <summary>
            Client (upstream) bandwidth marker.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeAudioData">
            <summary>
            Audio data marker.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeVideoData">
            <summary>
            Video data marker.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeFlexStreamEnd">
            <summary>
            AMF3 stream send
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeFlexSharedObject">
            <summary>
            AMF3 shared object.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeFlexInvoke">
            <summary>
            AMF3 message.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeNotify">
            <summary>
            Notification is invocation without response.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeStreamMetadata">
            <summary>
            Stream metadata.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeSharedObject">
            <summary>
            Shared Object marker.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TypeInvoke">
            <summary>
            Invoke operation (remoting call but also used for streaming) marker.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Constants.TransientPrefix">
            <summary>
            Prefix for attribute names that should not be made persistent. 
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.GenerationType">
            <summary>
            Filename generation types.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.IO.Mp3.Mp3Service">
            <summary>
            Streamable file service extension for MP3.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.IO.BaseStreamableFileService">
            <summary>
            Base class for streamable file services.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.RealLiteralNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpMULTIPLY">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.ISortedSet">
            <summary>
            A sorted set.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.ISortedSet.TailSet(System.Object)">
            <summary>
            Returns a portion of the list whose elements are greater than the limit object parameter.
            </summary>
            <param name="limit">The start element of the portion to extract.</param>
            <returns>The portion of the collection whose elements are greater than the limit object parameter.</returns>
        </member>
        <member name="M:FluorineFx.Collections.TreeSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Collections.TreeSet"/> class.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.TreeSet.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Collections.TreeSet"/> class.
            </summary>
            <param name="c">The <see cref="T:System.Collections.ICollection"/> whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="c"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:FluorineFx.Collections.TreeSet.#ctor(System.Collections.IComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Collections.TreeSet"/> class.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:FluorineFx.Collections.TreeSet.UnmodifiableTreeSet(System.Collections.ICollection)">
            <summary>
            Unmodifiables the tree set.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Collections.TreeSet.Add(System.Object)">
            <summary>
            Adds a new element to the ArrayList if it is not already present and sorts the ArrayList.
            </summary>
            <param name="obj">Element to insert to the ArrayList.</param>
            <returns>true if the new element was inserted, false otherwise.</returns>
        </member>
        <member name="M:FluorineFx.Collections.TreeSet.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements of the specified collection that are not present to the list.
            </summary>		
            <param name="c">Collection where the new elements will be added</param>
            <returns>Returns true if at least one element was added to the collection.</returns>
        </member>
        <member name="M:FluorineFx.Collections.TreeSet.First">
            <summary>
            Returns the first item in the set.
            </summary>
            <returns>First object.</returns>
        </member>
        <member name="M:FluorineFx.Collections.TreeSet.Contains(System.Object)">
            <summary>
            Determines whether an element is in the the current TreeSetSupport collection. The IComparer defined for 
            the current set will be used to make comparisons between the elements already inserted in the collection and 
            the item specified.
            </summary>
            <param name="item">The object to be locatet in the current collection.</param>
            <returns>true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.Collections.TreeSet.TailSet(System.Object)">
            <summary>
            Returns a portion of the list whose elements are greater than the limit object parameter.
            </summary>
            <param name="limit">The start element of the portion to extract.</param>
            <returns>The portion of the collection whose elements are greater than the limit object parameter.</returns>
        </member>
        <member name="P:FluorineFx.Collections.TreeSet.Comparer">
            <summary>
            Gets the IComparer object used to sort this set.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.RbTree">
            <summary>
            Red-black tree, an almost balanced binary tree.
            </summary>
            <remarks>Red-black tree remains "almost balanced" when nodes
            are added or removed. See "Introduction to Algorithms" by T. Cormen at al.
            (ISBN 0262032937) or your favorite computer science text book for details.</remarks>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.#ctor(System.Collections.IComparer)">
            <summary>
            Creates a new instance of a red-black tree.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.BinaryInsert(FluorineFx.Collections.RbTreeNode,System.Boolean,System.Boolean)">
            <summary>
            Inserts item based only on its value, probably violating Left/Right property.
            </summary>
            <param name="z">Node to insert.</param>
            
            <param name="allowDuplicates">If true, will insert the node even if equal node 
            already exists in the tree. If false, behavior depends on replaceIfDuplicate.
            </param>
            
            <param name="replaceIfDuplicate">Matters only if node equal to z exists in the 
            tree and allowDuplicates is false. If replaceIfDuplicate is true, z replaces
            existing node. Otherwise, tree does not change.
            </param>
            <returns>
            result.NewNode is true if new node was inserted to the tree'
            result.Node contains newly inserted node if any, or node equal to z
            </returns>
            
        </member>
        <member name="M:FluorineFx.Collections.RbTree.LeftRotate(FluorineFx.Collections.RbTreeNode)">
            <summary>
            Left rotation of the tree around x.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.RightRotate(FluorineFx.Collections.RbTreeNode)">
            <summary>
            Right rotation of the tree around y.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.Insert(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Inserts object into the tree.
            </summary>
            <param name="val">Value to insert.</param>
            
            <param name="allowDuplicates">If true, will create a new node even if equal node 
            already exists in the tree. If false, behavior depends on replaceIfDuplicate.
            </param>
            
            <param name="replaceIfDuplicate">Matters only if node equal to val exists in the 
            tree and allowDuplicates is false. If replaceIfDuplicate is true, val replaces
            value of existing node. Otherwise, tree does not change.
            </param>
            <returns>
            <list type="table">
            <item><term>result.NewNode</term><description>true if new node was inserted to the tree</description></item>
            <item><term>result.Node</term><description>contains newly inserted node if any, or node equal to val</description> </item>
            </list>
            </returns>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.Next(FluorineFx.Collections.RbTreeNode)">
            <summary>
            Node in the tree that follows given node.
            </summary>
            <remarks>
            If x is logically last node in the tree, returns RbTreeNode.Nil.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.Prev(FluorineFx.Collections.RbTreeNode)">
            <summary>
            Node in the tree that precedes given node.
            </summary>
            <remarks>
            If x is logically fisrt node, returns RbTreeNode.Nil.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.LowerBound(System.Object)">
            <summary>
            Returns fisrt node whose value is not less than parameter.
            </summary>
            <param name="val">The value to look for.</param>
            <returns>The node, if found, or RbTreeNode.Nil.</returns>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.UpperBound(System.Object)">
            <summary>
            Returns first node whose value is strictly greater than parameter.
            </summary>
            <param name="val">The value to look for.</param>
            <returns>The node, if found, or RbTreeNode.Nil.</returns>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.Erase(FluorineFx.Collections.RbTreeNode)">
            <summary>
            Removes node from the tree, re-arranging red-black structure as needed.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.Erase(System.Object)">
            <summary>
            Removes object(s) from the tree.
            </summary>
            <param name="val">Object to remove.</param>
            <returns>Number of nodes removed.</returns>
            <remarks>
            Finds and removes all nodes in the tree whose values compare equal to val.
            Returns number of removed nodes (possibly zero).
            </remarks>
        </member>
        <member name="P:FluorineFx.Collections.RbTree.Root">
            <summary>
            Logical root node of the tree.
            </summary>
            <remarks>
            RbTreeNode.Nil if the tree is empty.
            </remarks>
        </member>
        <member name="P:FluorineFx.Collections.RbTree.Comparer">
            <summary>
            Comparer used in comparisons between nodes.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.RbTree.First">
            <summary>
            Logically first node in the tree.
            </summary>
            <remarks>
            RbTreeNode.Nil if the tree is empty.
            </remarks>
        </member>
        <member name="P:FluorineFx.Collections.RbTree.Last">
            <summary>
            Logically last node in the tree.
            </summary>
            <remarks>
            RbTreeNode.Nil if the tree is empty.
            </remarks>
        </member>
        <member name="T:FluorineFx.Collections.RbTree.InsertResult">
            <summary>
            Result of insertion into a red-black tree.
            </summary>
        </member>
        <member name="F:FluorineFx.Collections.RbTree.InsertResult.NewNode">
            <summary>
            true if new node was inserted, false if old node was used.
            </summary>
        </member>
        <member name="F:FluorineFx.Collections.RbTree.InsertResult.Node">
            <summary>
            Value of inserted or replaced node.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.RbTree.InsertResult.#ctor(System.Boolean,FluorineFx.Collections.RbTreeNode)">
            <summary>
            Creates new instance of InsertResult.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.#ctor">
            <summary>
            Creates a new instance of the
            <see cref="!:Spring.Collections.LinkedList"/> class.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.#ctor(System.Collections.IList)">
            <summary>
            Creates a new instance of the
            <see cref="!:Spring.Collections.LinkedList"/> class that contains all
             elements of the specified list.
            </summary>
            <param name="list">
            A list of elements that defines the initial contents.
            </param>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="index"/> is greater than the
            number of objects within the list.
            </exception>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an object at the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <param name="value">The object to be inserted.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="index"/> is greater than the
            number of objects within the list.
            </exception>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.Remove(System.Object)">
            <summary>
            Removes the first instance of the specified object found.
            </summary>
            <param name="value">The object to remove</param>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.Contains(System.Object)">
            <summary>
            Returns <see langword="true"/> if this list contains the specified
            element.
            </summary>
            <param name="value">The element to look for.</param>
            <returns>
            <see langword="true"/> if this list contains the specified element.
            </returns>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.Clear">
            <summary>
            Removes all objects from the list.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.IndexOf(System.Object)">
            <summary>
            Returns the index of the first instance of the specified
            <paramref name="value"/> found.
            </summary>
            <param name="value">The object to search for</param>
            <returns>
            The index of the first instance found, or -1 if the element was not
            found.
            </returns>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.Add(System.Object)">
            <summary>
            Adds the specified object to the end of the list.
            </summary>
            <param name="value">The object to add</param>
            <returns>The index that the object was added at.</returns>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.AddAll(System.Collections.IList)">
            <summary>
            Adds all of the elements of the supplied
            <paramref name="elements"/>list to the end of this list.
            </summary>
            <param name="elements">The list of objects to add.</param>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.CheckUpdateState">
            <summary>
            Checks whether the list can be modified.
            </summary>
            <exception cref="T:System.NotSupportedException">
            If the list cannot be modified.
            </exception>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.ValidateIndex(System.Int32)">
            <summary>
            Validates the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the index is invalid.
            </exception>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.GetNode(System.Int32)">
            <summary>
            Returns the node at the specified index.
            </summary>
            <param name="index">The lookup index.</param>
            <returns>The node at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the specified <paramref name="index"/> is greater than the
            number of objects within the list.
            </exception>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.GetNode(System.Object)">
            <summary>
            Returns the node (and index) of the first node that contains
            the specified value.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>
            The node, or <see langword="null"/> if not found.
            </returns>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.RemoveNode(FluorineFx.Collections.LinkedList.Node)">
            <summary>
            Removes the specified node.
            </summary>
            <param name="node">The node to be removed.</param>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements in this list to an array.
            </summary>
            <remarks>
            <p>
            The type of array needs to be compatible with the objects in this
            list, obviously.
            </p>
            </remarks>
            <param name="array">
            An array that will be the target of the copy operation.
            </param>
            <param name="index">
            The zero-based index where copying will start.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the supplied <paramref name="index"/> is less than zero
            or is greater than the length of <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the supplied <paramref name="array"/> is of insufficient size.
            </exception>
        </member>
        <member name="M:FluorineFx.Collections.LinkedList.GetEnumerator">
            <summary>
            Gets an enumerator for the elements in the
            <see cref="!:Spring.Collections.LinkedList"/>.
            </summary>
            <remarks>
            <p>
            Enumerators are fail fast.
            </p>
            </remarks>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> over the elements
            in the <see cref="!:Spring.Collections.LinkedList"/>.
            </returns>
        </member>
        <member name="P:FluorineFx.Collections.LinkedList.IsReadOnly">
            <summary>
            Is list read only?
            </summary>
            <value>
            <see langword="true"/> if the list is read only.
            </value>
        </member>
        <member name="P:FluorineFx.Collections.LinkedList.Item(System.Int32)">
            <summary>
            Returns the node at the specified index.
            </summary>
            <remarks>
            <p>
            This is the indexer for the
            <see cref="!:Spring.Collections.LinkedList"/> class.
            </p>
            </remarks>
            <seealso cref="M:FluorineFx.Collections.LinkedList.GetNode(System.Int32)"/>
        </member>
        <member name="P:FluorineFx.Collections.LinkedList.IsFixedSize">
            <summary>
            Is the list a fixed size?
            </summary>
            <value>
            <see langword="true"/> if the list is a fixed size list.
            </value>
        </member>
        <member name="P:FluorineFx.Collections.LinkedList.IsSynchronized">
            <summary>
            Returns <see langword="true"/> if the list is synchronized across
            threads.
            </summary>
            <remarks>
            <note>
            This implementation <b>always</b> returns <see langword="false"/>.
            </note>
            <p>
            Note that enumeration is inherently not thread-safe. Use the
            <see cref="P:FluorineFx.Collections.LinkedList.SyncRoot"/> to lock the object during enumeration.
            </p>
            </remarks>
        </member>
        <member name="P:FluorineFx.Collections.LinkedList.Count">
            <summary>
            The number of objects within the list.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.LinkedList.SyncRoot">
            <summary>
            An object that can be used to synchronize this
            <see cref="!:Spring.Collections.LinkedList"/> to make it thread-safe.
            </summary>
            <value>
            An object that can be used to synchronize this
            <see cref="!:Spring.Collections.LinkedList"/> to make it thread-safe.
            </value>
        </member>
        <member name="T:FluorineFx.Collections.CopyOnWriteArraySet">
            <summary>
            A Set that uses CopyOnWriteArray for all of its operations. Thus, it shares the same basic properties:
            It is best suited for applications in which set sizes generally stay small, read-only operations vastly outnumber mutative operations, and you need to prevent interference among threads during traversal.
            It is thread-safe.
            Mutative operations(add, set, remove, etc) are expensive since they usually entail copying the entire underlying array.
            Traversal via enumerators is fast and cannot encounter interference from other threads. Enumerators rely on unchanging snapshots of the array at the time the enumerators were constructed.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArraySet.#ctor">
            <summary>
            Creates an empty set.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArraySet.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a set containing all of the elements of the specified collection.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArraySet.Contains(System.Object)">
            <summary>
            Determines whether the CopyOnWriteArraySet contains a specific value.
            </summary>
            <param name="value">The Object to locate in the CopyOnWriteArraySet.</param>
            <returns>true if the Object is found in the CopyOnWriteArraySet; otherwise, false.</returns>        
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArraySet.Clear">
            <summary>
            Removes all of the elements from this set.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArraySet.Remove(System.Object)">
            <summary>
            Removes the specified element from this set if it is present.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArraySet.Add(System.Object)">
            <summary>
            Adds the specified element to this set if it is not already present.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArraySet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through an CopyOnWriteArraySet.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the set.</returns>
        </member>
        <member name="P:FluorineFx.Collections.CopyOnWriteArraySet.Count">
            <summary>
            Gets the number of elements contained in the CopyOnWriteArraySet.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.CopyOnWriteArraySet.IsEmpty">
            <summary>
            Returns <tt>true</tt> if this set contains no elements.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.AMF3.ObjectProxy">
            <summary>
            Flex ObjectProxy class.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.ObjectProxy.ReadExternal(FluorineFx.AMF3.IDataInput)">
            <summary>
            Decode the ObjectProxy from a data stream.
            </summary>
            <param name="input">IDataInput interface.</param>
        </member>
        <member name="M:FluorineFx.AMF3.ObjectProxy.WriteExternal(FluorineFx.AMF3.IDataOutput)">
            <summary>
            Encode the ObjectProxy for a data stream.
            </summary>
            <param name="output">IDataOutput interface.</param>
        </member>
        <member name="T:FluorineFx.AMF3.DataOutput">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteBoolean(System.Boolean)">
            <summary>
            Writes a Boolean value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteByte(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of length bytes from the specified byte array, bytes, starting offset(zero-based index) bytes into the byte stream.
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteDouble(System.Double)">
            <summary>
            Writes an IEEE 754 double-precision (64-bit) floating point number.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteFloat(System.Single)">
            <summary>
            Writes an IEEE 754 single-precision (32-bit) floating point number.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteInt(System.Int32)">
            <summary>
            Writes a 32-bit signed integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteObject(System.Object)">
            <summary>
            Writes an object to the byte stream or byte array in AMF serialized format.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteShort(System.Int16)">
            <summary>
            Writes a 16-bit integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteUnsignedInt(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteUTF(System.String)">
            <summary>
            Writes a UTF-8 string to the byte stream. 
            The length of the UTF-8 string in bytes is written first, as a 16-bit integer, followed by 
            the bytes representing the characters of the string.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataOutput.WriteUTFBytes(System.String)">
            <summary>
            Writes a UTF-8 string. Similar to writeUTF, but does not prefix the string with a 16-bit length word.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:FluorineFx.Util.BufferPool">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.StringWriterWithEncoding">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.StringWriterWithEncoding.#ctor(System.Text.StringBuilder,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StringWriterWithEncoding class.
            </summary>
            <param name="sb"></param>
            <param name="encoding"></param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.SharedObject">
            <summary>
            Represents shared object on server-side (remote Shared Objects). Shared Objects in Flash are 
            like cookies that are stored on client side.
            These are shared by multiple clients and synchronized between them automatically on each data change.
            This is done asynchronously, used as events handling and is widely used in multiplayer Flash 
            online games.
            
            Shared object can be persistent or transient. The difference is that first are saved to the disk 
            and can be accessed later on next connection, transient objects are not saved and get lost each 
            time they last client disconnects from it.
            
            Shared Objects has name identifiers and path on server's HD (if persistent).
            
            Shared Objects store data as simple map, that is, name-value pairs. Each value in turn can be 
            complex object or map.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.SO.SharedObject._creationTime">
            <summary>
            Timestamp the scope was created.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.SO.SharedObject._persistent">
            <summary>
            true if the SharedObject was stored by the persistence framework 
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.SO.SharedObject._persistentSO">
            <summary>
            true if the client / server created the SO to be persistent
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.SO.SharedObject._source">
            <summary>
            Event listener, actually RTMP connection
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObject.#ctor">
            <summary>
            Initializes a new instance of the SharedObject class. This is used by the persistence framework.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObject.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SharedObject class.
            </summary>
            <param name="data"></param>
            <param name="name"></param>
            <param name="path"></param>
            <param name="persistent"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObject.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.Boolean,FluorineFx.Messaging.Api.Persistence.IPersistenceStore)">
            <summary>
            Initializes a new instance of the SharedObject class.
            </summary>
            <param name="data"></param>
            <param name="name"></param>
            <param name="path"></param>
            <param name="persistent"></param>
            <param name="storage"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObject.SendUpdates">
            <summary>
            Send update notification over data channel of RTMP connection
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObject.ReturnError(System.String)">
            <summary>
            Return an error message to the client.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObject.ReturnAttributeValue(System.String)">
            <summary>
            Return an attribute value to the owner.
            </summary>
            <param name="name">Attribute name.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObject.CheckRelease">
            <summary>
            Check if shared object must be released.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObject.Clear">
            <summary>
            Deletes all the attributes and sends a clear event to all listeners. The
            persistent data object is also removed from a persistent shared object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.SO.SharedObject.Close">
            <summary>
            Detaches a reference from this shared object, this will destroy the
            reference immediately. This is useful when you don't want to proxy a
            shared object any longer.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Persistence.FileStore">
            <summary>
            Simple file-based persistence for objects. Lowers memory usage if used instead of RAM memory storage.
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Persistence.MemoryStore">
            <summary>
            Persistence implementation that stores the objects in memory.
            This serves as default persistence if nothing has been configured.
            
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Persistence.MemoryStore.PersistenceNoName">
            <summary>
            This is used in the id for objects that have a name of <code>null</code>
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Persistence.MemoryStore._objects">
            <summary>
            Map(String, IPersistable)
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Persistence.FileStore.GetObjectFilename(FluorineFx.Messaging.Api.Persistence.IPersistable)">
            <summary>
            Get filename for persistable object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Persistence.FileStore.GetObjectFilePath(FluorineFx.Messaging.Api.Persistence.IPersistable)">
            <summary>
            Return file path for persistable object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Persistence.FileStore.GetObjectFilePath(FluorineFx.Messaging.Api.Persistence.IPersistable,System.Boolean)">
            <summary>
            Return file path for persistable object.
            </summary>
            <param name="obj"></param>
            <param name="completePath"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.ProcessFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.ProcessFilter.#ctor(FluorineFx.Messaging.Endpoints.EndpointBase)">
            <summary>
            Initializes a new instance of the ProcessFilter class.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.AMFContext">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Endpoints.AMFContext.FluorineAMFContextKey">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.AMFContext.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Initializes a new instance of the AMFContext class.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Endpoints.AMFContext.Current">
            <summary>
            Gets the FluorineContext object for the current HTTP request.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3DataSetWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0OptimizedObjectReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.RawBinary">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.RawBinary.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the RawBinary class.
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.CodeDom.AMF3ReflectionOptimizer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Invocation.InvocationHandler">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Invocation.InvocationHandler.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the InvocationHandler class.
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="T:FluorineFx.HttpCompress.DeflateFilter">
            <summary>
            A filter to support HTTP compression using the Deflate algorithm.
            </summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.DeflateFilter.m_stream">
            <summary>
            compression stream member
            has to be a member as we can only have one instance of the
            actual filter class
            </summary>
        </member>
        <member name="M:FluorineFx.HttpCompress.DeflateFilter.#ctor(System.IO.Stream)">
            <summary>
            Basic constructor that uses the Normal compression level
            </summary>
            <param name="baseStream">The stream to wrap up with the deflate algorithm</param>
        </member>
        <member name="M:FluorineFx.HttpCompress.DeflateFilter.#ctor(System.IO.Stream,FluorineFx.HttpCompress.CompressionLevels)">
            <summary>
            Full constructor that allows you to set the wrapped stream and the level of compression
            </summary>
            <param name="baseStream">The stream to wrap up with the deflate algorithm</param>
            <param name="compressionLevel">The level of compression to use</param>
        </member>
        <member name="M:FluorineFx.HttpCompress.DeflateFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write out bytes to the underlying stream after compressing them using deflate
            </summary>
            <param name="buffer">The array of bytes to write</param>
            <param name="offset">The offset into the supplied buffer to start</param>
            <param name="count">The number of bytes to write</param>
        </member>
        <member name="M:FluorineFx.HttpCompress.DeflateFilter.Close">
            <summary>
            Closes this Filter and calls the base class implementation.
            </summary>
        </member>
        <member name="M:FluorineFx.HttpCompress.DeflateFilter.Flush">
            <summary>
            Flushes that the filter out to underlying storage
            </summary>
        </member>
        <member name="P:FluorineFx.HttpCompress.DeflateFilter.ContentEncoding">
            <summary>
            Return the Http name for this encoding.  Here, deflate.
            </summary>
        </member>
        <member name="T:FluorineFx.Exceptions.UnexpectedAMF">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Exceptions.UnexpectedAMF.#ctor">
            <summary>
            Initializes a new instance of the UnexpectedAMF class.
            </summary>
        </member>
        <member name="M:FluorineFx.Exceptions.UnexpectedAMF.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UnexpectedAMF class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>			
        </member>
        <member name="T:FluorineFx.Data.SequenceManager">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.SequenceManager.GetSequences(System.Collections.IList)">
            <summary>
            Fill parameters are used to create a matching list of fills that are currently being cached by active clients.
            This list can be null, which means that all fills on that destination match.
            If the list is non-null, matches fills made by clients with the same number of parameters if all of the slots match 
            </summary>
            <param name="fillParameters"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Data.ListComparer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.DataService">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Scheduling.InternalTriggerState">
            <summary>
            Possible internal trigger states.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.InternalTriggerState.Waiting">
            <summary>
            Waiting 
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.InternalTriggerState.Acquired">
            <summary>
            Acquired
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.InternalTriggerState.Executing">
            <summary>
            Executing
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.InternalTriggerState.Complete">
            <summary>
            Complete
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.InternalTriggerState.Paused">
            <summary>
            Paused
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.InternalTriggerState.Blocked">
            <summary>
            Blocked
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.InternalTriggerState.PausedAndBlocked">
            <summary>
            Paused and Blocked
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.InternalTriggerState.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulingService.GetRandomizedIdleWaitTime">
            <summary>
            Gets the randomized idle wait time.
            </summary>
            <value>The randomized idle wait time.</value>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulingService.TogglePause(System.Boolean)">
            <summary>
            Signals the main processing loop to pause at the next possible point.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulingService.Halt">
            <summary>
            Signals the main processing loop to pause at the next possible point.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulingService.SignalSchedulingChange">
            <summary>
            Signals the main processing loop that a change in scheduling has been
            made - in order to interrupt any sleeping that may be occuring while
            waiting for the fire time to arrive.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulingService.Run">
            <summary>
            The main processing loop.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulingService.GetTriggersForJob(System.String)">
            <summary>
            Get all of the Triggers that are associated to the given Job.
            <p>
            If there are no matches, a zero-length array should be returned.
            </p>
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulingService.RemoveScheduledJob(System.String)">
            <summary>
            Remove (delete) the <see cref="T:FluorineFx.Scheduling.IScheduledJob"/> with the given and any <see cref="T:FluorineFx.Scheduling.Trigger"/> s that reference it.
            </summary>
            <param name="jobName">The name of the job to stop.</param>
        </member>
        <member name="M:FluorineFx.Scheduling.SchedulingService.NotifySchedulerThread">
            <summary>
            Notifies the scheduler thread.
            </summary>
        </member>
        <member name="T:FluorineFx.Scheduling.TriggerWrapper">
            <summary>
            Helper wrapper class.
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.TriggerWrapper._trigger">
            <summary>
            The trigger
            </summary>
        </member>
        <member name="F:FluorineFx.Scheduling.TriggerWrapper._state">
            <summary>
            Current state
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.TriggerWrapper.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="T:FluorineFx.Scheduling.TriggerComparator">
            <summary>
            Comparer for triggers.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.InMemoryPushPushPipe">
            <summary>
            A simple in-memory version of push-push pipe.
            It is triggered by an active provider to push messages through it to an event-driven consumer.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Messaging.InMemoryPushPushPipe.PushMessage(FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Pushes a message out to all the PushableConsumers.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:FluorineFx.Net.NetStatusEventArgs">
            <summary>
            Base event arguments for connection events.
            A NetConnection or SharedObject object dispatches NetStatusEvent objects when it reports its status.
            </summary>
        </member>
        <member name="P:FluorineFx.Net.NetStatusEventArgs.Exception">
            <summary>
            Gets the exception associated with the current NetStatusEvent instance.
            </summary>
            <remarks>
            This member is available only when a client side exception has occured.
            </remarks>
        </member>
        <member name="P:FluorineFx.Net.NetStatusEventArgs.Info">
            <summary>
            Gets an object with properties that describe the object's status or error condition.
            </summary>
            <remarks>
            <para>
            The information object could have a code property containing a string that represents a specific event or a level property containing a string that is either "status" or "error". 
            </para>
            <para>
            The code and level properties might not work for some implementations and some servers might send different objects. 
            </para>
            <para>
            The following table describes common string values of the code and level properties:
            <list type="table">
            <listheader>
            <term>code property (level)</term>
            <description>meaning</description>
            </listheader>
            <item><term>NetConnection.Call.BadVersion (error)</term>
            <description>Packet encoded in an unidentified format.</description></item>
            <item><term>NetConnection.Call.Failed (error)</term>
            <description>The NetConnection.call method was not able to invoke the server-side method or command.</description></item>
            <item><term>NetConnection.Connect.Failed (error)</term>
            <description>The connection attempt failed.</description></item>
            <item><term>NetConnection.Connect.Success (status)</term>
            <description>The connection attempt succeeded.</description></item>
            <item><term>NetConnection.Connect.Rejected (error)</term>
            <description>The connection attempt did not have permission to access the application.</description></item>
            <item><term>NetConnection.Connect.InvalidApp (error)</term>
            <description>The application name specified during connect is invalid.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:FluorineFx.Expression.OpUnaryPlus">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpIs">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.ObjectEncoding">
            <summary>
            Object encoding (AMF version).
            </summary>
        </member>
        <member name="F:FluorineFx.ObjectEncoding.AMF0">
            <summary>
            AMF0 serialization.
            </summary>
        </member>
        <member name="F:FluorineFx.ObjectEncoding.AMF3">
            <summary>
            AMF3 serialization.
            </summary>
        </member>
        <member name="T:FluorineFx.AMF0TypeCode">
            <summary>
            AMF0 data types.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.Number">
            <summary>
            AMF Number data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.Boolean">
            <summary>
            AMF Boolean data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.String">
            <summary>
            AMF String data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.ASObject">
            <summary>
            AMF ASObject data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.Null">
            <summary>
            AMF Null data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.Undefined">
            <summary>
            AMF Undefined data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.Reference">
            <summary>
            AMF Reference data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.AssociativeArray">
            <summary>
            AMF AssociativeArray data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.EndOfObject">
            <summary>
            AMF EndOfObject data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.Array">
            <summary>
            AMF Array data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.DateTime">
            <summary>
            AMF DateTime data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.LongString">
            <summary>
            AMF LongString data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.Xml">
            <summary>
            AMF Xml data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.CustomClass">
            <summary>
            AMF CustomClass(TypedObject) data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF0TypeCode.AMF3Tag">
            <summary>
            AMF3 data.
            </summary>
        </member>
        <member name="T:FluorineFx.AMF3TypeCode">
            <summary>
            AMF3 data types.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.Undefined">
            <summary>
            AMF Undefined data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.Null">
            <summary>
            AMF Null data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.BooleanFalse">
            <summary>
            AMF Boolean false data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.BooleanTrue">
            <summary>
            AMF Boolean true data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.Integer">
            <summary>
            AMF Integer data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.Number">
            <summary>
            AMF Number data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.String">
            <summary>
            AMF String data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.DateTime">
            <summary>
            AMF DateTime data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.Array">
            <summary>
            AMF Array data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.Object">
            <summary>
            AMF Object data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.Xml">
            <summary>
            AMF Xml data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.Xml2">
            <summary>
            AMF Xml data type.
            </summary>
        </member>
        <member name="F:FluorineFx.AMF3TypeCode.ByteArray">
            <summary>
            AMF ByteArray data type.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.SetOp">
            <summary>
            Union, intersection, and other operations on sorted sequences.
            </summary>
            <remarks>
            <para>
            This class implements efficient operation on sorted sequences:
            Union, Merge, Intersection, Difference, and SymmetricDifference.
            </para>
            <para>All methods of the class are static</para>
            <para>The methods operate on "sorted sequences" which can be any enumerables,
            provided they are properly sorted. The sequences are allowed to contiain duplicates.</para>
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.SetOp.Union(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,FluorineFx.Collections.IOutputIterator)">
            <summary>
            Computes union of two sorted sequences.
            </summary>
            <remarks>
            <para>Both set1 and set2 must be sorted in ascending order with respect to comparer.</para>
            <para>Union contains elements present in one or both ranges.</para>
            <para>Result is written to the output iterator one member at a time</para>
            
            <para>Union differs from <see cref="M:FluorineFx.Collections.SetOp.Merge(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,FluorineFx.Collections.IOutputIterator)">Merge</see> for multisets.</para>
            
            <para>If k equal elements are present in set1 and m elements equal to those k
            are present in set2,then k elements from set1 are included in the output, 
            followed by max(m-k, 0) elements from set2. The total of max(k,m) are
            added to the output. If you'd like to have m+k elements, use Merge function.
            </para>
            <para>Complexity: linear on combined number of items in both sequences</para>
            </remarks>
            <example>
            <para>set1 = { "a", "test", "Test", "z" }</para>
            <para>set2 = { "b", "tEst", "teSt", "TEST", "Z" }</para>
            <para>comparer is a case-insensitive comparer</para>
            <para>The following elements will be added to output:
            {"a", "b", "test", "Test", "TEST", "z" }</para>
            </example>
        </member>
        <member name="M:FluorineFx.Collections.SetOp.Merge(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,FluorineFx.Collections.IOutputIterator)">
            <summary>
            Computes merge of two sorted sequences.
            </summary>
            <remarks>
            <para>Both set1 and set2 must be sorted in ascending order with respect to comparer.</para>
            <para>Merge contains elements present in one or both ranges.</para>
            <para>Result is written to the output iterator one member at a time</para>
            
            <para>Merge differs from <see cref="M:FluorineFx.Collections.SetOp.Union(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,FluorineFx.Collections.IOutputIterator)">Union()</see> for multisets.</para>
            
            <para>If k equal elements are present in set1 and m elements equal to those k
            are present in set2, then k elements from set1 are included in the output, 
            followed by m elements from set2, for the total of k+m equal elements. 
            If you'd like to have max(k,m) m+k elements, use Union function.</para>
            <para>Complexity: linear on combined number of items in both sequences</para>
            </remarks>
            <example>
            <para>set1 = { "a", "test", "Test", "z" }</para>
            <para>set2 = { "b", "tEst", "teSt", "TEST", "Z" }</para>
            <para>comparer is a case-insensitive comparer</para>
            <para>The following elements will be added to output:
            {"a", "b", "test", "Test", "tEst", "teSt", "TEST", "z", "Z" }</para>
            </example>
        </member>
        <member name="M:FluorineFx.Collections.SetOp.Inersection(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,FluorineFx.Collections.IOutputIterator)">
            <summary>
            Computes intersection of two sorted sequences.
            </summary>
            <remarks>
            <para>Both set1 and set2 must be sorted in ascending order with respect to comparer.</para>
            <para>Intersection contains elements present in both set1 and set2.</para>
            <para>Result is written to the output iterator one member at a time</para>
            
            <para>For multisets, if set1 contains k equal elements, and set2 contains
            m elements equal to those k, then min(k,m) elements from set1 are
            included in the output.</para>
            <para>Complexity: linear on combined number of items in both sequences</para>
            </remarks>
            <example>
            <para>set1 = {"a", "b", "test", "tEst", "z" }</para>
            <para>set2 = {"a", "TEST", "z", "Z" }</para>
            <para>comparer = case insensitive comparer</para>
            <para>output = {"a", "test", "z"}</para>
            </example>
        </member>
        <member name="M:FluorineFx.Collections.SetOp.Difference(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,FluorineFx.Collections.IOutputIterator)">
            <summary>
            Computes difference of two sorted sequences.
            </summary>
            <remarks>
            <para>Both set1 and set2 must be sorted in ascending order with respect to comparer.</para>
            <para>Difference contains elements present in set1, but not in set2.</para>
            <para>Result is written to the output iterator one member at a time</para>
            
            <para>For multisets, if set1 contains k equal elements, and set2 contains
            m elements equal to those k, then max(k-m,0) elements from set1 are
            included in the output.</para>
            <para>Complexity: linear on combined number of items in both sequences</para>
            </remarks>
            <example>
            <para>set1 = {"a", "b", "test", "tEst", "z" }</para>
            <para>set2 = {"a", "TEST", "z", "Z" }</para>
            <para>comparer = case insensitive comparer</para>
            <para>output = {"b", "tEst"}</para>
            </example>
        </member>
        <member name="M:FluorineFx.Collections.SetOp.SymmetricDifference(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,FluorineFx.Collections.IOutputIterator)">
            <summary>
            Computes symmetric difference (XOR) of two sorted sequences.
            </summary>
            <remarks>
            <para>Both set1 and set2 must be sorted in ascending order with respect to comparer.</para>
            <para>Symmetric difference contains elements present in exactly one set, but not in both.</para>
            <para>Result is written to the output iterator one member at a time</para>
            
            <para>For multisets, if set1 contains k equal elements, and set2 contains
            m elements equal to those k, then if k&gt;=m, k-m last elements from set1
            are included in the output. If k&lt;m, m-k last elements from set2 are included
            in the output.</para>
            <para>Complexity: linear on combined number of items in both sequences</para>
            </remarks>
            <example>
            <para>set1 = {"a", "b", "test", "tEst", "z" }</para>
            <para>set2 = {"a", "TEST", "z", "Z" }</para>
            <para>comparer = case insensitive comparer</para>
            <para>output = {"b", "tEst", "Z"}</para>
            </example>
        </member>
        <member name="T:FluorineFx.Util.DataTableSchemaImporterExtension">
            <summary>
            Schema Importer Extension used for WebServices in order to recognize the schema for DataTable within wsdl
            </summary>
        </member>
        <member name="T:FluorineFx.Threading.ThreadPoolStartInfo">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolStartInfo._idleTimeout">
            <summary>
            Idle timeout in milliseconds.
            If a thread is idle for _idleTimeout milliseconds then 
            it may quit.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolStartInfo._minWorkerThreads">
            <summary>
            The lower limit of threads in the pool.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolStartInfo._maxWorkerThreads">
            <summary>
            The upper limit of threads in the pool.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolStartInfo._threadPriority">
            <summary>
            The priority of the threads in the pool
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolStartInfo._startSuspended">
            <summary>
            Start suspended until the Start() method is called.
            </summary>
        </member>
        <member name="F:FluorineFx.Threading.ThreadPoolStartInfo._perfCounterInstanceName">
            <summary>
            If this field is not null then the performance counters are enabled
            and use the string as the name of the instance.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolStartInfo.#ctor">
            <summary>
            Initializes a new instance of the ThreadPoolStartInfo class.
            </summary>
        </member>
        <member name="M:FluorineFx.Threading.ThreadPoolStartInfo.#ctor(FluorineFx.Threading.ThreadPoolStartInfo)">
            <summary>
            Initializes a new instance of the ThreadPoolStartInfo class.
            </summary>
            <param name="threadPoolStartInfo"></param>
        </member>
        <member name="P:FluorineFx.Threading.ThreadPoolStartInfo.IdleTimeout">
            <summary>
            Gets or sets the idle timeout value.
            Default value is 60 seconds.
            </summary>
        </member>
        <member name="P:FluorineFx.Threading.ThreadPoolStartInfo.MinWorkerThreads">
            <summary>
            Gets or sets the minimum number of threads.
            Default value is 0.
            </summary>
        </member>
        <member name="P:FluorineFx.Threading.ThreadPoolStartInfo.MaxWorkerThreads">
            <summary>
            Gets or sets the maximum number of threads.
            Default value is 25.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Services.Messaging.Selector">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.SO.SharedObjectEventType">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.DecoderState">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.DecoderState.Ok">
            <summary>
            Decoding finished successfully state
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.DecoderState.Continue">
            <summary>
            Deconding continues state
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.DecoderState.Buffer">
            <summary>
            Decoder is buffering state constant
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpContext">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpContext.GetDecoderBufferAmount">
            <summary>
            Returns current buffer amount.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpContext.SetBufferDecoding(System.Int64)">
            <summary>
            Specifies buffer decoding amount.
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpContext.ContinueDecoding">
            <summary>
            Set decoding state as "needed to be continued"
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpContext.CanStartDecoding(System.Int64)">
            <summary>
            Checks whether remaining buffer size is greater or equal than buffer amount and so if it makes sense to start decoding.
            </summary>
            <param name="remaining"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.RtmpContext.StartDecoding">
            <summary>
            Starts decoding. Sets state to "ready" and clears buffer amount.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpContext.State">
            <summary>
            Current state of protocol.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpContext.HasDecodedObject">
            <summary>
            Checks whether decoding is complete.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.RtmpContext.CanContinueDecoding">
            <summary>
            Checks whether decoding process can be continued.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0AMF3TagWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3ObjectReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3IntegerReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.HttpCompress.HandleRequest">
            <summary>
            The request types handled.
            </summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.HandleRequest.All">
            <summary>Compress both aspx and amf requests</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.HandleRequest.Amf">
            <summary>Compress only AMF requests</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.HandleRequest.Swx">
            <summary>Compress only SWX requests</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.HandleRequest.None">
            <summary>Nothing is compressed</summary>
        </member>
        <member name="T:FluorineFx.HttpCompress.Algorithms">
            <summary>
            The available compression algorithms to use with the HttpCompressionModule.
            </summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.Algorithms.Deflate">
            <summary>Use the Deflate algorithm</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.Algorithms.GZip">
            <summary>Use the GZip algorithm</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.Algorithms.Default">
            <summary>Use the default algorithm (picked by client)</summary>
        </member>
        <member name="T:FluorineFx.HttpCompress.CompressionLevels">
            <summary>
            The level of compression to use with deflate.
            </summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.Default">
            <summary>Use the default compression level</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.Highest">
            <summary>The highest level of compression.  Also the slowest.</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.Higher">
            <summary>A higher level of compression.</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.High">
            <summary>A high level of compression.</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.More">
            <summary>More compression.</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.Normal">
            <summary>Normal compression.</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.Less">
            <summary>Less than normal compression.</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.Low">
            <summary>A low level of compression.</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.Lower">
            <summary>A lower level of compression.</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.Lowest">
            <summary>The lowest level of compression that still performs compression.</summary>
        </member>
        <member name="F:FluorineFx.HttpCompress.CompressionLevels.None">
            <summary>No compression.</summary>
        </member>
        <member name="T:FluorineFx.Diagnostic.DescribeService">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.DotNetAdapter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.DataDestination">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.MessageDestination">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.Convert">
            <summary>
            Converts a base data type to another base data type.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent String representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The String equivalent of the 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent String representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The String equivalent of the 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent String representation.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The String equivalent of the 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent String representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The String equivalent of the 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent String representation.
            </summary>
            <param name="value">A 8-bit unsigned integer.</param>
            <returns>The String equivalent of the 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent String representation.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The String equivalent of the 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent String representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The String equivalent of the 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent String representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The String equivalent of the 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent String representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The String equivalent of the single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent String representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The String equivalent of the double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent String representation.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>The String equivalent of the Boolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent String representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The String equivalent of the Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent String representation.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The String equivalent of the Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent String representation.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The String equivalent of the TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent String representation.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The String equivalent of the DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Guid)">
            <summary>
            Converts the value of the specified Guid to its equivalent String representation.
            </summary>
            <param name="value">A Guid.</param>
            <returns>The String equivalent of the Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent String representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The String equivalent of the nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent String representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The String equivalent of the nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent String representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The String equivalent of the nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent String representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The String equivalent of the nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer  to its equivalent String representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The String equivalent of the nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent String representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The String equivalent of the nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent String representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The String equivalent of the nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent String representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The String equivalent of the nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent String representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The String equivalent of the nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent String representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The String equivalent of the nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent String representation.
            </summary>
            <param name="value">A nullable Boolean value.</param>
            <returns>The String equivalent of the nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent String representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The String equivalent of the nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent String representation.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The String equivalent of the nullable Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to its equivalent String representation.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The String equivalent of the nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to its equivalent String representation.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The String equivalent of the nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Nullable{System.Guid})">
            <summary>
            Converts the value of the specified nullable Guid to its equivalent String representation.
            </summary>
            <param name="value">A nullable Guid.</param>
            <returns>The String equivalent of the nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent String representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The String equivalent of the SqlString.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent String representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The String equivalent of the SqlByte.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent String representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The String equivalent of SqlInt16.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent String representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The String equivalent of the SqlInt32.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent String representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The String equivalent of the SqlInt64.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent String representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The String equivalent of the SqlSingle.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent String representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The String equivalent of the SqlDouble.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent String representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The String equivalent of the SqlDecimal.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent String representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The String equivalent of the SqlMoney.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent String representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The String equivalent of the SqlBoolean.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Converts the value of the specified SqlGuid to its equivalent String representation.
            </summary>
            <param name="value">An SqlGuid.</param>
            <returns>The String equivalent of the SqlGuid.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlChars)">
            <summary>
            Converts the value of the specified SqlChars to its equivalent String representation.
            </summary>
            <param name="value">An SqlChars.</param>
            <returns>The String equivalent of the SqlChars.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Data.SqlTypes.SqlXml)">
            <summary>
            Converts the value of the specified SqlXml to its equivalent String representation.
            </summary>
            <param name="value">An SqlXml.</param>
            <returns>The String equivalent of the SqlXml.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Type)">
            <summary>
            Converts the value of the specified Type to its equivalent String representation.
            </summary>
            <param name="value">A Type.</param>
            <returns>The String equivalent of the Type.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Xml.XmlDocument)">
            <summary>
            Converts the value of the specified XmlDocument to its equivalent String representation.
            </summary>
            <param name="value">An XmlDocument.</param>
            <returns>The String equivalent of the XmlDocument.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToString(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent String representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The String equivalent of the Object.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An 16-bit unsigned integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An 32-bit unsigned integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSByte(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent 8-bit signed integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt16(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent 16-bit signed integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt32(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent 32-bit signed integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToInt64(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent 64-bit signed integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToByte(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent 8-bit unsigned integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt16(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent 16-bit unsigned integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt32(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent 32-bit unsigned integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToUInt64(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent 64-bit unsigned integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.String)">
            <summary>
            Converts the first character of the specified String to a Unicode character.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent Unicode character.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent Unicode character.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent Unicode character.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to a Unicode character.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.Char})">
            <summary>
            Converts the specified nullable character to a Unicode character.
            </summary>
            <param name="value">A nullable Char.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent Unicode character.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent Unicode character.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent Unicode character.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent Unicode character.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent Unicode character.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent Unicode character.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent Unicode character.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent Unicode character.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to a Unicode character.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to a Unicode character.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to a Unicode character.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to a Unicode character.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent Unicode character.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent Unicode character.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent Unicode character.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent Unicode character.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent Unicode character.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to a Unicode character.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to a Unicode character.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to a Unicode character.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to a Unicode character.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to a Unicode character.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToChar(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent Unicode character.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.CanConvertToChar(System.Object)">
            <summary>
            Checks whether the value of the specified Object can be converted to a Unicode character.
            </summary>
            <param name="value">An Object.</param>
            <returns>Returns true if the specified Object can be converted to a Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent single-precision floating point number.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSingle(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent single-precision floating point number.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent double-precision floating point number.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDouble(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent double-precision floating point number.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent Boolean value.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent Boolean value.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent Boolean value.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent Boolean value.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent Boolean value.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent Boolean value.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent Boolean value.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent Boolean value.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent Boolean value.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent Boolean value.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent Boolean value.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent Boolean value.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent Boolean value.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent Boolean value.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent Boolean valuer.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent Boolean value.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToBoolean(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent Boolean value.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent Decimal number.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent Decimal number.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent Decimal number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent Decimal number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent Decimal number.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent Decimal number.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent Decimal number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent Decimal number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent Decimal number.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent Decimal number.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent Decimal number.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent Decimal number.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent Decimal number.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent Decimal number.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent Decimal number.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDecimal(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent Decimal number.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent DateTime.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent DateTime.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent DateTime.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent DateTime.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to its equivalent DateTime.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to its equivalent DateTime.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer number to its equivalent DateTime.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent DateTime.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent DateTime.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent DateTime.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent DateTime.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent DateTime.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToDateTime(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent DateTime.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent TimeSpan.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent TimeSpan.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent TimeSpan.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent TimeSpan.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to its equivalent TimeSpan.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to its equivalent TimeSpan.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer number to its equivalent TimeSpan.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent TimeSpan.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent TimeSpan.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent TimeSpan.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent TimeSpan.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent TimeSpan.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToTimeSpan(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent TimeSpan.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToGuid(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent Guid.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToGuid(System.Nullable{System.Guid})">
            <summary>
            Converts the value of the specified nullable Guid to its equivalent Guid.
            </summary>
            <param name="value">A nullable Guid.</param>
            <returns>The equivalent Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToGuid(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Converts the value of the specified SqlGuid to its equivalent Guid.
            </summary>
            <param name="value">An SqlGuid.</param>
            <returns>The equivalent Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToGuid(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent Guid.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToGuid(System.Data.SqlTypes.SqlBinary)">
            <summary>
            Converts the value of the specified SqlBinary to its equivalent Guid.
            </summary>
            <param name="value">An SqlBinary.</param>
            <returns>The equivalent Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToGuid(System.Byte[])">
            <summary>
            Converts the value of the specified memory buffer to its equivalent Guid.
            </summary>
            <param name="value">A memory buffer.</param>
            <returns>The equivalent Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToGuid(System.Type)">
            <summary>
            Converts the value of the specified Type to its equivalent Guid.
            </summary>
            <param name="value">A Type.</param>
            <returns>The equivalent Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToGuid(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent Guid.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSByte(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable 8-bit signed integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt16(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable 16-bit signed integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt32(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable 32-bit signed integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableInt64(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable 64-bit signed integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableByte(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable 8-bit unsigned integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt16(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable 16-bit unsigned integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent 32-bit nullable unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt32(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable 32-bit unsigned integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableUInt64(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable 64-bit unsigned integer.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Char)">
            <summary>
            Converts a Unicode character to a nullable Unicode character.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent nullable Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.String)">
            <summary>
            Converts the first character of the specified String to a nullable Unicode character.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent nullable Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to a nullable Unicode character.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable Unicode character.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to a nullable Unicode character.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to a nullable Unicode character.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to a nullable Unicode character.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to a nullable Unicode character.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable Unicode character.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable Unicode character.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable Unicode character.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable Unicode character.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable Unicode character.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to a nullable Unicode character.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to a nullable Unicode character.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to a nullable Unicode character.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to a nullable Unicode character.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to a nullable Unicode character.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableChar(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable Unicode character.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable Unicode character value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.CanConvertToNullableChar(System.Object)">
            <summary>
            Checks whether the value of the specified Object can be converted to a nullable Unicode character.
            </summary>
            <param name="value">An Object.</param>
            <returns>Returns true if the specified Object can be converted to a nullable Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableSingle(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable single-precision floating point number.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDouble(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable double-precision floating point number.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean value to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable Boolean value.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable Boolean valuer.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableBoolean(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable Boolean value.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent nullable Decimal number.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDecimal(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable Decimal number.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent nullable DateTime.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable DateTime.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent nullable DateTime.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable DateTime.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable DateTime.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to its equivalent nullable DateTime.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer number to its equivalent nullable DateTime.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable DateTime.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent nullable DateTime.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable DateTime.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable DateTime.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable DateTime.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableDateTime(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable DateTime.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer number to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableTimeSpan(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable TimeSpan.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableGuid(System.Guid)">
            <summary>
            Converts the value of the specified Guid to its equivalent nullable Guid.
            </summary>
            <param name="value">A Guid.</param>
            <returns>The equivalent nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableGuid(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent nullable Guid.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableGuid(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Converts the value of the specified SqlGuid to its equivalent nullable Guid.
            </summary>
            <param name="value">An SqlGuid.</param>
            <returns>The equivalent nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableGuid(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent nullable Guid.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableGuid(System.Data.SqlTypes.SqlBinary)">
            <summary>
            Converts the value of the specified SqlBinary to its equivalent nullable Guid.
            </summary>
            <param name="value">An SqlBinary.</param>
            <returns>The equivalent nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableGuid(System.Type)">
            <summary>
            Converts the value of the specified Type to its equivalent nullable Guid.
            </summary>
            <param name="value">A Type.</param>
            <returns>The equivalent nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableGuid(System.Byte[])">
            <summary>
            Converts the value of the specified memory buffer to its equivalent nullable Guid.
            </summary>
            <param name="value">A memory buffer.</param>
            <returns>The equivalent nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToNullableGuid(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent nullable Guid.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlString representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The SqlString equivalent of the value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlString representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The SqlString equivalent of the 8-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The SqlString equivalent of the 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The SqlString equivalent of the 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The SqlString equivalent of the 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A 8-bit unsigned integer.</param>
            <returns>The SqlString equivalent of the 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The SqlString equivalent of the 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The SqlString equivalent of the 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The SqlString equivalent of the 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlString representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The SqlString equivalent of the single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlString representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The SqlString equivalent of the double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlString representation.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>The SqlString equivalent of the Boolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent SqlString representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The SqlString equivalent of the Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent SqlString representation.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The SqlString equivalent of the Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent SqlString representation.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The SqlString equivalent of the TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent SqlString representation.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The SqlString equivalent of the DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Guid)">
            <summary>
            Converts the value of the specified Guid to its equivalent SqlString representation.
            </summary>
            <param name="value">A Guid.</param>
            <returns>The SqlString equivalent of the Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Char[])">
            <summary>
            Converts the specified character array to its equivalent SqlString representation.
            </summary>
            <param name="value">A character array.</param>
            <returns>The SqlString equivalent of character array.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The SqlString equivalent of the value of value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The SqlString equivalent of nullable 16-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The SqlString equivalent of the nullable 32-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The SqlString equivalent of the nullable 64-bit signed integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer  to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The SqlString equivalent of the nullable 8-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The SqlString equivalent of the nullable 16-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The SqlString equivalent of the nullable 32-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The SqlString equivalent of the nullable 64-bit unsigned integer value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The SqlString equivalent of the nullable single-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The SqlString equivalent of the nullable double-precision floating point number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable Boolean value.</param>
            <returns>The SqlString equivalent of the nullable Boolean value.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The SqlString equivalent of the nullable Decimal number.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The SqlString equivalent of the nullable Unicode character.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The SqlString equivalent of the nullable TimeSpan.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The SqlString equivalent of the nullable DateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Nullable{System.Guid})">
            <summary>
            Converts the value of the specified nullable Guid to its equivalent SqlString representation.
            </summary>
            <param name="value">A nullable Guid.</param>
            <returns>The SqlString equivalent of the nullable Guid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The SqlString equivalent of the SqlByte.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The SqlString equivalent of SqlInt16.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The SqlString equivalent of the SqlInt32.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The SqlString equivalent of the SqlInt64.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The SqlString equivalent of the SqlSingle.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The SqlString equivalent of the SqlDouble.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The SqlString equivalent of the SqlDecimal.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The SqlString equivalent of the SqlMoney.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The SqlString equivalent of the SqlBoolean.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlChars)">
            <summary>
            Converts the value of the specified SqlChars to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlChars.</param>
            <returns>The SqlString equivalent of the SqlChars.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlXml)">
            <summary>
            Converts the value of the specified SqlXml to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlXml.</param>
            <returns>The SqlString equivalent of the SqlXml.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Converts the value of the specified SqlGuid to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlGuid.</param>
            <returns>The SqlString equivalent of the SqlGuid.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The SqlString equivalent of the SqlDateTime.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Data.SqlTypes.SqlBinary)">
            <summary>
            Converts the value of the specified SqlBinary to its equivalent SqlString representation.
            </summary>
            <param name="value">An SqlBinary.</param>
            <returns>The SqlString equivalent of the SqlBinary.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Type)">
            <summary>
            Converts the value of the specified Type to its equivalent SqlString representation.
            </summary>
            <param name="value">An Type.</param>
            <returns>The SqlString equivalent of the Type.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Xml.XmlDocument)">
            <summary>
            Converts the value of the specified XmlDocument to its equivalent SqlString representation.
            </summary>
            <param name="value">An XmlDocument.</param>
            <returns>The SqlString equivalent of the XmlDocument.</returns>        
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlString(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlString representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The SqlString equivalent of the Object.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A 8-bit unsigned integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlByte representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A 8-bit signed integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">An 16-bit unsigned integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">An 32-bit unsigned integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlByte representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlByte representation.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlByte representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent SqlByte representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent SqlByte representation.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlByte representation.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent SqlByte representation.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent SqlByte representation.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlByte(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlByte representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlByte.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An 16-bit signed integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt16(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlInt16 representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlInt16.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An 32-bit signed integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt32(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlInt32 representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlInt32.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An 64-bit signed integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlInt64(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlInt64 representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlInt64.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlSingle representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlSingle.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlSingle(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlSingle representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlSingle representation.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlDouble representation.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent SqlDouble representation.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlDouble representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDouble(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlDouble representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlDouble.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A Decimal.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDecimal(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlDecimal representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlDecimal.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A Decimal.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent SqlMoney representation.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlMoney(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlMoney representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlMoney.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Boolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Char)">
            <summary>
            Converts the value of the specified Unsigned character to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An Unsigned character.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Nullable{System.Char})">
            <summary>
            Converts the value of the specified nullable Unicode character to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">A nullable Unicode character.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBoolean(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlBoolean representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlBoolean.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer number to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlDateTime(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlDateTime representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlDateTime.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlGuid(System.Guid)">
            <summary>
            Converts the value of the specified Guid to its equivalent SqlGuid representation.
            </summary>
            <param name="value">A Guid.</param>
            <returns>The equivalent SqlGuid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlGuid(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlGuid representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlGuid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlGuid(System.Nullable{System.Guid})">
            <summary>
            Converts the value of the specified nullable Guid to its equivalent SqlGuid representation.
            </summary>
            <param name="value">A nullable Guid.</param>
            <returns>The equivalent SqlGuid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlGuid(System.Data.SqlTypes.SqlBinary)">
            <summary>
            Converts the value of the specified SqlBinary to its equivalent SqlGuid representation.
            </summary>
            <param name="value">An SqlBinary.</param>
            <returns>The equivalent SqlGuid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlGuid(System.Data.SqlTypes.SqlBytes)">
            <summary>
            Converts the value of the specified SqlBytes to its equivalent SqlGuid representation.
            </summary>
            <param name="value">An SqlBytes.</param>
            <returns>The equivalent SqlGuid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlGuid(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlGuid representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlGuid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlGuid(System.Type)">
            <summary>
            Converts the value of the specified Type to its equivalent SqlGuid representation.
            </summary>
            <param name="value">A Type.</param>
            <returns>The equivalent SqlGuid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlGuid(System.Byte[])">
            <summary>
            Converts the value of the specified memory buffer to its equivalent SqlGuid representation.
            </summary>
            <param name="value">A memory buffer.</param>
            <returns>The equivalent SqlGuid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlGuid(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlGuid representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlGuid.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBinary(System.Byte[])">
            <summary>
            Converts the value of the specified memory buffer to its equivalent SqlBinary representation.
            </summary>
            <param name="value">A memory buffer.</param>
            <returns>The equivalent SqlBinary.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBinary(System.Guid)">
            <summary>
            Converts the value of the specified Guid to its equivalent SqlBinary representation.
            </summary>
            <param name="value">A Guid.</param>
            <returns>The equivalent SqlBinary.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBinary(System.Nullable{System.Guid})">
            <summary>
            Converts the value of the specified nullable Guid to its equivalent SqlBinary representation.
            </summary>
            <param name="value">A nullable Guid.</param>
            <returns>The equivalent SqlBinary.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBinary(System.Data.SqlTypes.SqlBytes)">
            <summary>
            Converts the value of the specified SqlBytes to its equivalent SqlBinary representation.
            </summary>
            <param name="value">An SqlBytes.</param>
            <returns>The equivalent SqlBinary.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBinary(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Converts the value of the specified SqlGuid to its equivalent SqlBinary representation.
            </summary>
            <param name="value">An SqlGuid.</param>
            <returns>The equivalent SqlBinary.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBinary(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlBinary representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlBinary.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBytes(System.Byte[])">
            <summary>
            Converts the value of the specified memory buffer to its equivalent SqlBytes representation.
            </summary>
            <param name="value">A memory buffer.</param>
            <returns>The equivalent SqlBytes.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBytes(System.IO.Stream)">
            <summary>
            Converts the value of the specified Stream to its equivalent SqlBytes representation.
            </summary>
            <param name="value">A Stream.</param>
            <returns>The equivalent SqlBytes.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBytes(System.Guid)">
            <summary>
            Converts the value of the specified Guid to its equivalent SqlBytes representation.
            </summary>
            <param name="value">A Guid.</param>
            <returns>The equivalent SqlBytes.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBytes(System.Nullable{System.Guid})">
            <summary>
            Converts the value of the specified nullable Guid to its equivalent SqlBytes representation.
            </summary>
            <param name="value">A nullable Guid.</param>
            <returns>The equivalent SqlBytes.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBytes(System.Data.SqlTypes.SqlBinary)">
            <summary>
            Converts the value of the specified SqlBinary to its equivalent SqlBytes representation.
            </summary>
            <param name="value">An SqlBinary.</param>
            <returns>The equivalent SqlBytes.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBytes(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Converts the value of the specified SqlGuid to its equivalent SqlBytes representation.
            </summary>
            <param name="value">An SqlGuid.</param>
            <returns>The equivalent SqlBytes.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlBytes(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlBytes representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlBytes.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlChars representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Char[])">
            <summary>
            Converts the value of the specified character array to its equivalent SqlChars representation.
            </summary>
            <param name="value">A character array.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.SByte)">
            <summary>
            Converts the value of the specified 8-bit signed integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Int16)">
            <summary>
            Converts the value of the specified 16-bit signed integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Int32)">
            <summary>
            Converts the value of the specified 32-bit signed integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Int64)">
            <summary>
            Converts the value of the specified 64-bit signed integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Byte)">
            <summary>
            Converts the value of the specified 8-bit unsigned integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.UInt16)">
            <summary>
            Converts the value of the specified 16-bit unsigned integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.UInt32)">
            <summary>
            Converts the value of the specified 32-bit unsigned integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.UInt64)">
            <summary>
            Converts the value of the specified 64-bit unsigned integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Single)">
            <summary>
            Converts the value of the specified single-precision floating point number to its equivalent SqlChars representation.
            </summary>
            <param name="value">A single-precision floating point number.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Double)">
            <summary>
            Converts the value of the specified double-precision floating point number to its equivalent SqlChars representation.
            </summary>
            <param name="value">A double-precision floating point number.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Boolean)">
            <summary>
            Converts the value of the specified Boolean to its equivalent SqlChars representation.
            </summary>
            <param name="value">A Boolean.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Decimal)">
            <summary>
            Converts the value of the specified Decimal number to its equivalent SqlChars representation.
            </summary>
            <param name="value">A Decimal number.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Char)">
            <summary>
            Converts the value of the specified Unicode character to its equivalent SqlChars representation.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.TimeSpan)">
            <summary>
            Converts the value of the specified TimeSpan to its equivalent SqlChars representation.
            </summary>
            <param name="value">A TimeSpan.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.DateTime)">
            <summary>
            Converts the value of the specified DateTime to its equivalent SqlChars representation.
            </summary>
            <param name="value">A DateTime.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Guid)">
            <summary>
            Converts the value of the specified Guid to its equivalent SqlChars representation.
            </summary>
            <param name="value">A Guid.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.SByte})">
            <summary>
            Converts the value of the specified nullable 8-bit signed integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable 8-bit signed integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Int16})">
            <summary>
            Converts the value of the specified nullable 16-bit signed integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable 16-bit signed integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Int32})">
            <summary>
            Converts the value of the specified nullable 32-bit signed integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable 32-bit signed integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Int64})">
            <summary>
            Converts the value of the specified nullable 64-bit signed integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable 64-bit signed integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Byte})">
            <summary>
            Converts the value of the specified nullable 8-bit unsigned integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable 8-bit unsigned integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.UInt16})">
            <summary>
            Converts the value of the specified nullable 16-bit unsigned integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable 16-bit unsigned integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.UInt32})">
            <summary>
            Converts the value of the specified nullable 32-bit unsigned integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable 32-bit unsigned integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.UInt64})">
            <summary>
            Converts the value of the specified nullable 64-bit unsigned integer to its equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable 64-bit unsigned integer.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Single})">
            <summary>
            Converts the value of the specified nullable single-precision floating point number to the equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable single-precision floating point number.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Double})">
            <summary>
            Converts the value of the specified nullable double-precision floating point number to the equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable double-precision floating point number.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Boolean})">
            <summary>
            Converts the value of the specified nullable Boolean to the equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable Boolean.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Decimal})">
            <summary>
            Converts the value of the specified nullable Decimal number to the equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable Decimal number.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Char})">
            <summary>
            Converts the specified nullable character to its equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable Char.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.TimeSpan})">
            <summary>
            Converts the value of the specified nullable TimeSpan to the equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable TimeSpan.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.DateTime})">
            <summary>
            Converts the value of the specified nullable DateTime to the equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable DateTime.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Nullable{System.Guid})">
            <summary>
            Converts the value of the specified nullable Guid to the equivalent SqlChars representation.
            </summary>
            <param name="value">A nullable Guid.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlByte)">
            <summary>
            Converts the value of the specified SqlByte to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlByte.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Converts the value of the specified SqlInt16 to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlInt16.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Converts the value of the specified SqlInt32 to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlInt32.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Converts the value of the specified SqlInt64 to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlInt64.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Converts the value of the specified SqlSingle to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlSingle.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Converts the value of the specified SqlDouble to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlDouble.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Converts the value of the specified SqlDecimal to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlDecimal.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Converts the value of the specified SqlMoney to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlMoney.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Converts the value of the specified SqlBoolean to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlBoolean.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Converts the value of the specified SqlGuid to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlGuid.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Converts the value of the specified SqlDateTime to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlDateTime.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Data.SqlTypes.SqlBinary)">
            <summary>
            Converts the value of the specified SqlBinary to its equivalent SqlChars representation.
            </summary>
            <param name="value">An SqlBinary.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Type)">
            <summary>
            Converts the value of the specified Type to its equivalent SqlChars representation.
            </summary>
            <param name="value">A Type.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlChars(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlChars representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlChars.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.String)">
            <summary>
            Converts the value of the specified String to its equivalent SqlXml representation.
            </summary>
            <param name="value">A String.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.IO.Stream)">
            <summary>
            Converts the value of the specified Stream to its equivalent SqlXml representation.
            </summary>
            <param name="value">A Stream.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.Xml.XmlReader)">
            <summary>
            Converts the value of the specified XmlReader to its equivalent SqlXml representation.
            </summary>
            <param name="value">An XmlReader.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.Xml.XmlDocument)">
            <summary>
            Converts the value of the specified XmlDocument to its equivalent SqlXml representation.
            </summary>
            <param name="value">An XmlDocument.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.Char[])">
            <summary>
            Converts the specified character array to its equivalent SqlXml representation.
            </summary>
            <param name="value">A character array.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.Byte[])">
            <summary>
            Converts the specified memory buffer to its equivalent SqlXml representation.
            </summary>
            <param name="value">A memory buffer.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the value of the specified SqlString to its equivalent SqlXml representation.
            </summary>
            <param name="value">An SqlString.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.Data.SqlTypes.SqlChars)">
            <summary>
            Converts the value of the specified SqlChars to its equivalent SqlXml representation.
            </summary>
            <param name="value">An SqlChars.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.Data.SqlTypes.SqlBinary)">
            <summary>
            Converts the value of the specified SqlBinary to its equivalent SqlXml representation.
            </summary>
            <param name="value">An SqlBinary.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.Data.SqlTypes.SqlBytes)">
            <summary>
            Converts the value of the specified SqlBytes to its equivalent SqlXml representation.
            </summary>
            <param name="value">An SqlBytes.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="M:FluorineFx.Util.Convert.ToSqlXml(System.Object)">
            <summary>
            Converts the value of the specified Object to its equivalent SqlXml representation.
            </summary>
            <param name="value">An Object.</param>
            <returns>The equivalent SqlXml.</returns>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer._scope">
            <summary>
            Scope
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer._file">
            <summary>
            File
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer._writer">
            <summary>
            Tag writer
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer._mode">
            <summary>
            Operation mode
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer._offset">
            <summary>
            Offset
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer._lastTimestamp">
            <summary>
            Last write timestamp
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer._startTimestamp">
            <summary>
            Start timestamp
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer.#ctor(FluorineFx.Messaging.Api.IScope,System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the FileConsumer class.
            </summary>
            <param name="scope">Scope of consumer.</param>
            <param name="file">File.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer.PushMessage(FluorineFx.Messaging.Api.Messaging.IPipe,FluorineFx.Messaging.Messages.IMessage)">
            <summary>
            Push message through pipe.
            Synchronize this method to avoid FLV corruption from abrupt disconnection.
            </summary>
            <param name="pipe">Pipe.</param>
            <param name="message">Message to push.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer.OnOOBControlMessage(FluorineFx.Messaging.Api.Messaging.IMessageComponent,FluorineFx.Messaging.Api.Messaging.IPipe,FluorineFx.Messaging.Api.Messaging.OOBControlMessage)">
            <summary>
            Out-of-band control message handler.
            </summary>
            <param name="source">Source of message.</param>
            <param name="pipe">Pipe that is used to transmit OOB message.</param>
            <param name="oobCtrlMsg">OOB control message.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer.OnPipeConnectionEvent(FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent)">
            <summary>
            Pipe connection event handler.
            </summary>
            <param name="evt">Pipe connection event.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer.Uninit">
            <summary>
            Reset
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.Consumer.FileConsumer.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.JobExecutionException.#ctor">
            <summary>
            Create a JobExcecutionException, with the 're-fire immediately' flag set
            to <see langword="false" />.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.JobExecutionException.#ctor(System.Exception)">
            <summary>
            Create a JobExcecutionException, with the given cause.
            </summary>
            <param name="cause">The cause.</param>
        </member>
        <member name="M:FluorineFx.Scheduling.JobExecutionException.#ctor(System.String)">
            <summary>
            Create a JobExcecutionException, with the given message.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.JobExecutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.JobExecutionException"/> class.
            </summary>
            <param name="msg">The message.</param>
            <param name="cause">The original cause.</param>
        </member>
        <member name="M:FluorineFx.Scheduling.JobExecutionException.#ctor(System.Boolean)">
            <summary>
            Create a JobExcecutionException with the 're-fire immediately' flag set
            to the given value.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.JobExecutionException.#ctor(System.Exception,System.Boolean)">
            <summary>
            Create a JobExcecutionException with the given underlying exception, and
            the 're-fire immediately' flag set to the given value.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.JobExecutionException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Create a JobExcecutionException with the given message, and underlying
            exception, and the 're-fire immediately' flag set to the given value.
            </summary>
        </member>
        <member name="M:FluorineFx.Scheduling.JobExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Scheduling.JobExecutionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="M:FluorineFx.Scheduling.JobExecutionException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>
            A string representation of the current exception.
            </returns>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="P:FluorineFx.Scheduling.JobExecutionException.UnscheduleFiringTrigger">
            <summary>
            Gets or sets a value indicating whether to unschedule firing trigger.
            </summary>
            <value>
            	<c>true</c> if firing trigger should be unscheduled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FluorineFx.Scheduling.JobExecutionException.UnscheduleAllTriggers">
            <summary>
            Gets or sets a value indicating whether to unschedule all triggers.
            </summary>
            <value>
            	<c>true</c> if all triggers should be unscheduled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:FluorineFx.Scheduling.JobExecutionException.RefireImmediately">
            <summary>
            Gets or sets a value indicating whether to refire immediately.
            </summary>
            <value><c>true</c> if to refire immediately; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.IO.Flv.FlvService">
            <summary>
            Sets up the service and hands out FLV objects to its callers
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.IO.Flv.FlvService._generateMetadata">
            <summary>
            Generate FLV metadata?
            </summary>
        </member>
        <member name="T:FluorineFx.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:FluorineFx.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:FluorineFx.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:FluorineFx.Json.JsonWriter.Close"/> method to put the <see cref="T:FluorineFx.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:FluorineFx.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:FluorineFx.Json.WriteState.Closed">
            <summary>
            The <see cref="M:FluorineFx.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:FluorineFx.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:FluorineFx.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:FluorineFx.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:FluorineFx.Json.JsonWriter.Indentation"/> and <see cref="P:FluorineFx.Json.JsonWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JavaScript manually.
            </summary>
            <param name="javaScript">The raw JavaScript to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonWriter.WriteStringArray(System.Collections.IEnumerable)">
            <summary>
            Writes a JSON array of JSON strings given an enumerable source
            of arbitrary <see cref="T:System.Object"/> values.
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonWriter.Formatting">
            <summary>
            Indicates how the output is formatted.
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <paramref name="Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:FluorineFx.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonReader.Read">
            <summary>
            Reads the next Json token from the stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:FluorineFx.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current Json token. 
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current Json token.
            </summary>
        </member>
        <member name="P:FluorineFx.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
        </member>
        <member name="T:FluorineFx.Net.RemotingClient">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpSUBTRACT">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents arithmetic subtraction operator.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpNotEqual">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpEqual">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents logical equality operator.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpAND">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Represents logical AND operator.
            </summary>
        </member>
        <member name="T:FluorineFx.Context.ISessionListener">
            <summary>
            Interface to be notified when a session is created or destroyed.
            </summary>
            <remarks>
            This is not the ASP.NET provided session-state but rather the server side client
            object representing a client-side session.
            </remarks>
            <example>
            	<code lang="CS">
                class ChatAdapter : MessagingAdapter, ISessionListener
                {
                    public ChatAdapter()
                    {
                        ClientManager.AddSessionCreatedListener(this);
                    }
             
                    public void SessionCreated(IClient client)
                    {
                        client.AddSessionDestroyedListener(this);
                    }
             
                    public void SessionDestroyed(IClient client)
                    {
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:FluorineFx.Context.ISessionListener.SessionCreated(FluorineFx.Messaging.Api.IClient)">
            <summary>
            Notification that a client session was created.
            </summary>
            <param name="client">The client that was created.</param>
        </member>
        <member name="M:FluorineFx.Context.ISessionListener.SessionDestroyed(FluorineFx.Messaging.Api.IClient)">
            <summary>
            Notification that a session is about to be destroyed.
            </summary>
            <param name="client">The client that will be destroyed.</param>
        </member>
        <member name="T:FluorineFx.DataTableTypeAttribute">
            <summary>
            	<para>The DataTableTypeAttribute specifies the type of data in a DataTable.</para>
            	<para>Rows will be serialized as a collection of strongly typed ASObjects (columns
                as properties).</para>
            </summary>
            <example>
            	<code lang="CS">
            In this sample the Flex client will receive an Arraycollection of PhoneVO objects.
            [DataTableType("FlexRemoteObjectSample.PhoneVO")]
            public DataTable GetDataTable()
            {
                DataSet dataSet = new DataSet("mydataset");
                DataTable dataTable = dataSet.Tables.Add("phones");
                dataTable.Columns.Add( "number", typeof(string) );
                dataTable.Rows.Add( new object[] {"123456"} );
                dataTable.Rows.Add( new object[] {"456789"} );
                return dataTable;
            }
            </code>
            </example>
        </member>
        <member name="M:FluorineFx.DataTableTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataTableTypeAttribute class.
            </summary>
            <param name="remoteClass">The ActionScript3 class name.</param>
        </member>
        <member name="M:FluorineFx.DataTableTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DataTableTypeAttribute class. See also <see cref="T:FluorineFx.DataSetTypeAttribute"/> 
            </summary>
            <param name="tableName">Refers to DataTable from a DataSet.</param>
            <param name="remoteClass">The ActionScript3 class name.</param>
        </member>
        <member name="M:FluorineFx.DataTableTypeAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DataTableTypeAttribute class. See also <see cref="T:FluorineFx.DataSetTypeAttribute"/> 
            </summary>
            <param name="tableName">Refers to DataTable from a DataSet.</param>
            <param name="propertyName">The parent object's property name.</param>
            <param name="remoteClass">The ActionScript3 class name.</param>
        </member>
        <member name="M:FluorineFx.DataTableTypeAttribute.OnInvoked(FluorineFx.Invocation.IInvocationManager,System.Reflection.MethodInfo,System.Object,System.Object[],System.Object)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="invocationManager"></param>
            <param name="methodInfo"></param>
            <param name="obj"></param>
            <param name="arguments"></param>
            <param name="result"></param>
        </member>
        <member name="P:FluorineFx.DataTableTypeAttribute.RemoteClass">
            <summary>Gets the ActionScript 3 class name.</summary>
        </member>
        <member name="T:FluorineFx.__Res">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.DumpContext">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.ByteBuffer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            http://java.sun.com/j2se/1.5.0/docs/api/java/nio/ByteBuffer.html
            
            The following invariant holds for the mark, position, limit, and capacity values: 
            0 lte mark lte position lte limit lte capacity 
            </summary>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Allocate(System.Int32)">
            <summary>
            Allocates a new byte buffer.
            The new buffer's position will be zero, its limit will be its capacity, 
            and its mark will be undefined. 
            It will have a backing array, and its array offset will be zero. 
            </summary>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Wrap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Wraps a byte array into a buffer.
            The new buffer will be backed by the given byte array; that is, modifications 
            to the buffer will cause the array to be modified and vice versa. 
            The new buffer's capacity will be array.length, its position will be offset, 
            its limit will be offset + length, and its mark will be undefined.
            </summary>
            <param name="array"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Wrap(System.Byte[])">
            <summary>
            Wraps a byte array into a buffer. 
            The new buffer will be backed by the given byte array; that is, modifications 
            to the buffer will cause the array to be modified and vice versa. 
            The new buffer's capacity and limit will be array.length, its position will be zero,
            and its mark will be undefined.
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Flip">
            <summary>
            Flips this buffer. The limit is set to the current position and then 
            the position is set to zero. If the mark is defined then it is discarded.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Rewind">
            <summary>
            Rewinds this buffer. The position is set to zero and the mark is discarded.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Put(System.Byte)">
            <summary>
            Writes the given byte into this buffer at the current position, and then increments the position.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Put(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Relative bulk put method.
            
            This method transfers bytes into this buffer from the given source array. 
            If there are more bytes to be copied from the array than remain in this buffer, 
            that is, if length > remaining(), then no bytes are transferred and a 
            BufferOverflowException is thrown. 
            
            Otherwise, this method copies length bytes from the given array into this buffer, 
            starting at the given offset in the array and at the current position of this buffer. 
            The position of this buffer is then incremented by length. 
            </summary>
            <param name="src">The array from which bytes are to be read.</param>
            <param name="offset">The offset within the array of the first byte to be read; must be non-negative and no larger than the array length.</param>
            <param name="length">The number of bytes to be read from the given array; must be non-negative and no larger than length - offset.</param>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Put(System.Byte[])">
            <summary>
            This method transfers the entire content of the given source byte array into this buffer. 
            </summary>
            <param name="src">The array from which bytes are to be read.</param>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Put(FluorineFx.Util.ByteBuffer)">
            <summary>
            This method transfers the bytes remaining in the given source buffer into this buffer. 
            If there are more bytes remaining in the source buffer than in this buffer, 
            that is, if src.remaining() > remaining(), then no bytes are transferred 
            and a BufferOverflowException is thrown. 
            
            Otherwise, this method copies n = src.remaining() bytes from the given buffer into this buffer, 
            starting at each buffer's current position. The positions of both buffers are then 
            incremented by n. 
            </summary>
            <param name="src">The source buffer from which bytes are to be read; must not be this buffer.</param>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Put(System.Int32,System.Byte)">
            <summary>
            Absolute put method.
            Writes the given byte into this buffer at the given index. 
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Get">
            <summary>
            Relative get method. Reads the byte at this buffer's current position, and then increments the position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Get(System.Int32)">
            <summary>
            Absolute get method. Reads the byte at the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.GetBuffer">
            <summary>
            Returns the array of unsigned bytes from which this stream was created.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Compact">
            <summary>
            Compacts this buffer
            
            The bytes between the buffer's current position and its limit, if any, 
            are copied to the beginning of the buffer. That is, the byte at 
            index p = position() is copied to index zero, the byte at index p + 1 is copied 
            to index one, and so forth until the byte at index limit() - 1 is copied 
            to index n = limit() - 1 - p. 
            The buffer's position is then set to n+1 and its limit is set to its capacity. 
            The mark, if defined, is discarded. 
            The buffer's position is set to the number of bytes copied, rather than to zero, 
            so that an invocation of this method can be followed immediately by an invocation of 
            another relative put method. 
            </summary>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Skip(System.Int32)">
            <summary>
            Forwards the position of this buffer as the specified size bytes.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.ReadBytes(System.Int32)">
            <summary>
            Reads count bytes from the current stream into a byte array and advances the current position by count bytes. 
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.PutInt(System.Int32)">
            <summary>
            Relative put method for writing an int value.
            Writes four bytes containing the given int value, in the current byte order, into this buffer at the current position, and then increments the position by four.
            </summary>
            <param name="value">The int value to be written.</param>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.PutInt(System.Int32,System.Int32)">
            <summary>
            Absolute put method for writing an int value.
            Writes four bytes containing the given int value, in the current byte order, into this buffer at the given index.
            </summary>
            <param name="index">The index at which the bytes will be written.</param>
            <param name="value">The int value to be written.</param>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Put(System.Int32,System.UInt32)">
            <summary>
            Absolute put method for writing an int value.
            Writes four bytes containing the given int value, in the current byte order, into this buffer at the given index.
            </summary>
            <param name="index">The index at which the bytes will be written.</param>
            <param name="value">The int value to be written.</param>
        </member>
        <member name="M:FluorineFx.Util.ByteBuffer.Put(FluorineFx.Util.ByteBuffer,FluorineFx.Util.ByteBuffer,System.Int32)">
            <summary>
            Puts an in buffer stream onto an out buffer stream and returns the bytes written.
            </summary>
            <param name="output"></param>
            <param name="input"></param>
            <param name="numBytesMax"></param>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Util.ByteBuffer.AutoExpand">
            <summary>
            Turns on or off autoExpand
            </summary>
        </member>
        <member name="P:FluorineFx.Util.ByteBuffer.Capacity">
            <summary>
            Returns this buffer's capacity.
            </summary>
        </member>
        <member name="P:FluorineFx.Util.ByteBuffer.Limit">
            <summary>
            Returns this buffer's limit. 
            </summary>
        </member>
        <member name="P:FluorineFx.Util.ByteBuffer.Remaining">
            <summary>
            Returns the number of elements between the current position and the limit. 
            </summary>
        </member>
        <member name="P:FluorineFx.Util.ByteBuffer.HasRemaining">
            <summary>
            Tells whether there are any elements between the current position and the limit. 
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.StatusASO">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.ERROR">
            <summary>
            Error constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.STATUS">
            <summary>
            Status constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.WARNING">
            <summary>
            Warning constant.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NC_CALL_FAILED">
            <summary>
            The NetConnection.call method was not able to invoke the server-side method or command.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NC_CALL_BADVERSION">
            <summary>
            The URI specified in the NetConnection.connect method did not specify 'rtmp' as the protocol. Either not supported version of AMF was used (3 when only 0 is supported).
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NC_CONNECT_APPSHUTDOWN">
            <summary>
            The application has been shut down (for example, if the application is out of
            memory resources and must shut down to prevent the server from crashing) or the server has shut down.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NC_CONNECT_CLOSED">
            <summary>
            The connection was closed successfully.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NC_CONNECT_FAILED">
            <summary>
            The connection attempt failed.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NC_CONNECT_REJECTED">
            <summary>
            The client does not have permission to connect to the application, the
            application expected different parameters from those that were passed,
            or the application name specified during the connection attempt was not found on the server.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NC_CONNECT_SUCCESS">
            <summary>
            The connection attempt succeeded.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NC_CONNECT_INVALID_APPLICATION">
            <summary>
            The application name specified during connect is invalid.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_INVALID_ARGUMENT">
            <summary>
            Invalid arguments were passed to a NetStream method.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_CLEAR_SUCCESS">
            <summary>
            A recorded stream was deleted successfully.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_CLEAR_FAILED">
            <summary>
            A recorded stream failed to delete.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PUBLISH_START">
            <summary>
            An attempt to publish was successful.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PUBLISH_BADNAME">
            <summary>
            An attempt was made to publish a stream that is already being published by someone else.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_FAILED">
            <summary>
            An attempt to use a Stream method (at client-side) failed.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_UNPUBLISHED_SUCCESS">
            <summary>
            An attempt to unpublish was successful.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_RECORD_START">
            <summary>
            Recording was started.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_RECORD_NOACCESS">
            <summary>
            An attempt was made to record a read-only stream.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_RECORD_STOP">
            <summary>
            Recording was stopped.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_RECORD_FAILED">
            <summary>
            An attempt to record a stream failed.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_INSUFFICIENT_BW">
            <summary>
            Data is playing behind the normal speed.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_START">
            <summary>
            Play was started.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_STREAMNOTFOUND">
            <summary>
            An attempt was made to play a stream that does not exist.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_STOP">
            <summary>
            Play was stopped.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_FAILED">
            <summary>
            An attempt to play back a stream failed.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_RESET">
            <summary>
            A playlist was reset.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_PUBLISHNOTIFY">
            <summary>
            The initial publish to a stream was successful. This message is sent to all subscribers.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_UNPUBLISHNOTIFY">
            <summary>
            An unpublish from a stream was successful. This message is sent to all subscribers.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_SWITCH">
            <summary>
            Playlist playback switched from one stream to another.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PLAY_COMPLETE">
            <summary>
            Playlist playback is complete.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_SEEK_NOTIFY">
            <summary>
            The subscriber has used the seek command to move to a particular location in the recorded stream.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_SEEK_FAILED">
            <summary>
            The stream doesn't support seeking.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_PAUSE_NOTIFY">
            <summary>
            The subscriber has used the seek command to move to a particular location in the recorded stream.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.NS_UNPAUSE_NOTIFY">
            <summary>
            Publishing has stopped.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.SO_NO_READ_ACCESS">
            <summary>
            Read access to a shared object was denied.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.SO_NO_WRITE_ACCESS">
            <summary>
            Write access to a shared object was denied.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.SO_CREATION_FAILED">
            <summary>
            The creation of a shared object was denied.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.StatusASO.SO_PERSISTENCE_MISMATCH">
            <summary>
            The persistence parameter passed to SharedObject.getRemote() is different from the one used when the shared object was created.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.StatusASO.#ctor">
            <summary>
            Initializes a new instance of the StatusASO class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.StatusASO.#ctor(System.String,System.String,System.String,System.Object,FluorineFx.ObjectEncoding)">
            <summary>
            Initializes a new instance of the StatusASO class.
            </summary>
            <param name="code">Status code.</param>
            <param name="level">Level.</param>
            <param name="description">Description.</param>
            <param name="application"></param>
            <param name="objectEncoding"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.StatusASO.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the StatusASO class.
            </summary>
            <param name="code">Status code.</param>
            <param name="level">Level.</param>
            <param name="description">Description.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.StatusASO.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StatusASO class.
            </summary>
            <param name="code">Status code.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpSocketListener">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.RtmpProtocolDecoder">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.Unknown">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.MessageFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.DotNetFactory">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.DotNetFactory.#ctor">
            <summary>
            Initializes a new instance of the DotNetFactory class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.DotNetFactory.CreateFactoryInstance(System.String,System.Collections.Hashtable)">
            <summary>
            Creates a FactoryInstance.
            </summary>
            <param name="id"></param>
            <param name="properties">Configuration properties for the destination.</param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.DotNetFactory.Lookup(FluorineFx.Messaging.FactoryInstance)">
            <summary>
            Return an instance as appropriate for this instance of the given factory.
            </summary>
            <param name="factoryInstance"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3ObjectWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0DataSetWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3ArrayReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0LongStringReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Bytecode.Lightweight.AMF3ReflectionOptimizer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Data.Messages.PagedMessage">
            <summary>
            This messsage provides information about a partial sequence result.
            When paging is enabled for a destination and DataService.fill() or a page request 
            is made the remote destination will return this message as a response.
            The body property is an Array containing the items for the requested page with a 
            length of the configured page size.
            </summary>
        </member>
        <member name="M:FluorineFx.Data.Messages.PagedMessage.#ctor">
            <summary>
            Initializes a new instance of the PagedMessage class.
            </summary>
        </member>
        <member name="P:FluorineFx.Data.Messages.PagedMessage.pageCount">
            <summary>
            Provides access to the number of total pages in a sequence based on the current page size.
            </summary>
        </member>
        <member name="P:FluorineFx.Data.Messages.PagedMessage.pageIndex">
            <summary>
            Provides access to the index of the current page in a sequence.
            </summary>
        </member>
        <member name="T:FluorineFx.SWX.Writers.SWXBooleanWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.SWX.SwxAssembler.SwfHeader">
            <summary>
            Header - FCS (uncompressed), version Flash 6
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.VideoFrameDropper">
            <summary>
            State machine for video frame dropping in live streams.
            <p>
            We start sending all frame types. Disposable interframes can be dropped any
            time without affecting the current state. If a regular interframe is dropped,
            all future frames up to the next keyframes are dropped as well. Dropped
            keyframes result in only keyframes being sent. If two consecutive keyframes
            have been successfully sent, regular interframes will be sent in the next
            iteration as well. If these frames all went through, disposable interframes
            are sent again.
            </p>
            So from highest to lowest bandwidth and back, the states go as follows:
            <ul>
            <li>all frames</li>
            <li>keyframes and interframes</li>
            <li>keyframes</li>
            <li>keyframes and interframes</li>
            <li>all frames</li>
            </ul>
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.IFrameDropper">
            <summary>
            Interface for classes that implement logic to drop frames.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IFrameDropper.CanSendPacket(FluorineFx.Messaging.Rtmp.Stream.Messages.RtmpMessage,System.Int64)">
            <summary>
            Checks if a message may be sent to the subscriber.
            </summary>
            <param name="message">The message to check.</param>
            <param name="pending">The number of pending messages.</param>
            <returns><code>true</code> if the packet may be sent, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IFrameDropper.DropPacket(FluorineFx.Messaging.Rtmp.Stream.Messages.RtmpMessage)">
            <summary>
            Notify that a packet has been dropped.
            </summary>
            <param name="message">The message that was dropped.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IFrameDropper.SendPacket(FluorineFx.Messaging.Rtmp.Stream.Messages.RtmpMessage)">
            <summary>
            Notify that a message has been sent.
            </summary>
            <param name="message">The message that was sent.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IFrameDropper.Reset">
            <summary>
            Reset the frame dropper.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.IFrameDropper.Reset(FluorineFx.Messaging.Rtmp.Stream.FrameDropperState)">
            <summary>
            Reset the frame dropper to a given state.
            </summary>
            <param name="state">The state to reset the frame dropper to.</param>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.VideoFrameDropper._state">
            <summary>
            Current state.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Statistics.IPlaylistSubscriberStreamStatistics">
            <summary>
            Statistical informations about a stream that is subscribed by a client.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IPlaylistSubscriberStreamStatistics.BytesSent">
            <summary>
            Gets the total number of bytes sent to the client from this stream.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IPlaylistSubscriberStreamStatistics.ClientBufferDuration">
            <summary>
            Gets the buffer duration as requested by the client.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IPlaylistSubscriberStreamStatistics.EstimatedBufferFill">
            <summary>
            Gets the estimated fill ratio of the client buffer.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:FluorineFx.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:FluorineFx.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the Json format.
            The <see cref="T:FluorineFx.Json.JsonSerializer"/> enables you to control how objects are encoded into Json.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluorineFx.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JsonSerializer.Deserialize(FluorineFx.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:FluorineFx.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:FluorineFx.Json.JsonReader"/> that contains the Json structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:FluorineFx.Json.JsonSerializer.Deserialize(FluorineFx.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:FluorineFx.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The type of object to create.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:FluorineFx.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:FluorineFx.Json.JsonSerializer.Serialize(FluorineFx.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:FluorineFx.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:FluorineFx.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="P:FluorineFx.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpLess">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.XmlConfigurator">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.DataSetTypeAttribute">
            <summary>
            The DataSetTypeAttribute specifies the types of data in a DataSet. The attribute controls how a DataSet is sent to the Flex client.
            </summary>
            <example>
            <code lang="CS">
            In this sample the Flex client will receive a PersonVO object with a "phoneNumbers" property having an Arraycollection of PhoneVO objects.
            
            [DataSetType("FlexRemoteObjectSample.PersonVO")]
            [DataTableType("phones", "phoneNumbers", "FlexRemoteObjectSample.PhoneVO")]
            public DataSet GetDataSet()
            {
                DataSet dataSet = new DataSet("mydataset");
                DataTable dataTable = dataSet.Tables.Add("phones");
                dataTable.Columns.Add( "number", typeof(string) );
                dataTable.Rows.Add( new object[] {"123456"} );
                dataTable.Rows.Add( new object[] {"456789"} );
                return dataSet;
            }
            </code>
            </example>
        </member>
        <member name="M:FluorineFx.DataSetTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataSetTypeAttribute class.
            </summary>
            <param name="remoteClass">The ActionScript3 class name.</param>
        </member>
        <member name="M:FluorineFx.DataSetTypeAttribute.HandleResult(FluorineFx.Invocation.IInvocationManager,System.Reflection.MethodInfo,System.Object,System.Object[],System.Object)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="invocationManager"></param>
            <param name="methodInfo"></param>
            <param name="obj"></param>
            <param name="arguments"></param>
            <param name="result"></param>
        </member>
        <member name="T:FluorineFx.Util.ReflectionUtils">
            <summary>
            Reflection utility class.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.IsNullable(System.Type)">
            <summary>
            Gets a value indicating whether a type (or type's element type)
            instance can be null in the underlying data store.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns> True, if the type parameter is a closed generic nullable type; otherwise, False.</returns>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.GetListItemType(System.Type)">
            <summary>
            Gets the type of the typed list's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed list's items.</returns>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.ItemsUnitializedValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Tests whether the list's items are their unitialized value.
            </summary>
            <param name="list">The list.</param>
            <returns>Whether the list's items are their unitialized value</returns>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:FluorineFx.Util.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:FluorineFx.Security.GenericLoginCommand">
            <summary>
            Custom login adapter base class.
            </summary>
        </member>
        <member name="F:FluorineFx.Security.GenericLoginCommand.FluorineTicket">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Security.GenericLoginCommand.#ctor">
            <summary>
            Initializes a new instance of the GenericLoginCommand class.
            </summary>
        </member>
        <member name="M:FluorineFx.Security.GenericLoginCommand.Start">
            <summary>
            Called to initialize a login command prior to authentication/authorization requests.
            </summary>
        </member>
        <member name="M:FluorineFx.Security.GenericLoginCommand.Stop">
            <summary>
            Called to free up resources used by the login command.
            </summary>
        </member>
        <member name="M:FluorineFx.Security.GenericLoginCommand.Logout(System.Security.Principal.IPrincipal)">
            <summary>
            Attempts to log a user out from their session.
            </summary>
            <param name="principal">The principal to logout.</param>
            <returns>A Boolean value indicating whether the principal has been logged out.</returns>
        </member>
        <member name="M:FluorineFx.Security.GenericLoginCommand.DoAuthorization(System.Security.Principal.IPrincipal,System.Collections.IList)">
            <summary>
            The gateway calls this method to perform programmatic authorization.
            </summary>
            <param name="principal">The principal being checked for authorization.</param>
            <param name="roles">A List of role names to check, all members should be strings.</param>
            <returns>A Boolean value indicating whether the principal has been authorized.</returns>
        </member>
        <member name="M:FluorineFx.Security.GenericLoginCommand.DoAuthentication(System.String,System.Collections.Hashtable)">
            <summary>
            The gateway calls this method to perform programmatic, custom authentication.
            </summary>
            <param name="username">The principal being authenticated.</param>
            <param name="credentials">The credentials are passed as a Hashtable to allow for extra properties to be passed in the future. For now, only a "password" property is sent.</param>
            <returns>A principal object represents the security context of the user.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Messages.RemotingMessage">
            <summary>
            RemotingMessages are used to send RPC requests to a remote endpoint. These messages use the operation property to specify which method to call on the remote object. The destination property indicates what object/service should be used.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Messages.RemotingMessage.#ctor">
            <summary>
            Initializes a new instance of the RemotingMessage class.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.RemotingMessage.source">
            <summary>
            Gets or sets the underlying source of a RemoteObject destination.
            </summary>
            <remarks>
            This property is provided for backwards compatibility. The best practice, however, is 
            to not expose the underlying source of a RemoteObject destination on the client 
            and only one source to a destination. Some types of Remoting Services may even ignore 
            this property for security reasons.
            </remarks>
        </member>
        <member name="P:FluorineFx.Messaging.Messages.RemotingMessage.operation">
            <summary>
            Gets or sets the name of the remote method/operation that should be called.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.Filter.DeserializationFilter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Endpoints.Filter.DeserializationFilter.#ctor">
            <summary>
            Initializes a new instance of the DeserializationFilter class.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0ObjectWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3XmlReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF3BooleanTrueReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0ReferenceReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0ObjectReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Readers.AMF0AMF3TagReader">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.FluorineGateway">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.FluorineGateway.#ctor">
            <summary>
            Initializes a new instance of the FluorineGateway class.
            </summary>
        </member>
        <member name="M:FluorineFx.FluorineGateway.Init(System.Web.HttpApplication)">
            <summary>
            Initializes the module and prepares it to handle requests.
            </summary>
            <param name="application">An HttpApplication that provides access to the methods, properties, and events common to all application objects within an ASP.NET application.</param>
        </member>
        <member name="M:FluorineFx.FluorineGateway.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements IHttpModule.
            </summary>
        </member>
        <member name="M:FluorineFx.FluorineGateway.application_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Occurs as the first event in the HTTP pipeline chain of execution when ASP.NET responds to a request.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FluorineFx.FluorineGateway.application_PreRequestHandlerExecute(System.Object,System.EventArgs)">
            <summary>
            Occurs just before ASP.NET begins executing a handler such as a page or XML Web service.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FluorineFx.FluorineGateway.application_AuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Occurs when a security module has established the identity of the user.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FluorineFx.FluorineGateway.CompressContent(System.Web.HttpApplication)">
            <summary>
            EventHandler that gets ahold of the current request context and attempts to compress the output.
            </summary>
            <param name="httpApplication">The <see cref="T:System.Web.HttpApplication"/> that is firing this event.</param>
        </member>
        <member name="M:FluorineFx.FluorineGateway.GetFilterForScheme(System.String[],System.IO.Stream,FluorineFx.Configuration.HttpCompressSettings)">
            <summary>
            Get ahold of a <see cref="T:FluorineFx.HttpCompress.CompressingFilter"/> for the given encoding scheme.
            If no encoding scheme can be found, it returns null.
            </summary>
            <remarks>
            See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.3 for details
            on how clients are supposed to construct the Accept-Encoding header.  This
            implementation follows those rules, though we allow the server to override
            the preference given to different supported algorithms.  I'm doing this as 
            I would rather give the server control over the algorithm decision than 
            the client.  If the clients send up * as an accepted encoding with highest
            quality, we use the preferred algorithm as specified in the config file.
            </remarks>
        </member>
        <member name="T:FluorineFx.NetDebug">
            <summary>
            NetDebug remote trace.<br/>
            Controls the information that appears in the NetConnection Debugger.
            </summary>
        </member>
        <member name="M:FluorineFx.NetDebug.#ctor">
            <summary>
            Initializes a new instance of the NetDebug class.
            </summary>
        </member>
        <member name="M:FluorineFx.NetDebug.#cctor">
            <summary>
            Initializes a new instance of the NetDebug class.
            </summary>
        </member>
        <member name="M:FluorineFx.NetDebug.Trace(System.String)">
            <summary>
            Displays a trace message in the NetConnection Debugger.
            </summary>
            <param name="message">Message to display.</param>
        </member>
        <member name="M:FluorineFx.NetDebug.Trace(System.Object)">
            <summary>
            Displays an object in the NetConnection Debugger.
            </summary>
            <param name="obj">Object to display.</param>
        </member>
        <member name="M:FluorineFx.NetDebug.Clear">
            <summary>
            Clear messages collected to display.
            </summary>
        </member>
        <member name="T:FluorineFx.Util.CompareUtils">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.CompareUtils.Compare(System.Object,System.Object)">
            <summary>Compares two objects.</summary>
            <param name="first">First object.</param>
            <param name="second">Second object.</param>
            <returns>
            0, if objects are equal; 
            less than zero, if the first object is smaller than the second one;
            greater than zero, if the first object is greater than the second one.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Statistics.IClientBroadcastStreamStatistics">
            <summary>
            Statistical informations about a stream that is broadcasted by a client.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IClientBroadcastStreamStatistics.SaveFilename">
            <summary>
            Gets the filename the stream is being saved as.
            </summary>
            <value>The filename relative to the scope or <code>null</code> if the stream is not being saved.</value>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IClientBroadcastStreamStatistics.PublishedName">
            <summary>
            Gets stream publish name. Publish name is the value of the first parameter
            had been passed to <code>NetStream.publish</code> on client side in SWF.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IClientBroadcastStreamStatistics.TotalSubscribers">
            <summary>
            Gets the total number of subscribers.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IClientBroadcastStreamStatistics.MaxSubscribers">
            <summary>
            Gets the maximum number of concurrent subscribers.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IClientBroadcastStreamStatistics.ActiveSubscribers">
            <summary>
            Gets the current number of subscribers.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.IClientBroadcastStreamStatistics.BytesReceived">
            <summary>
            Gets the total number of bytes received from client for this stream.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:FluorineFx.Json.JsonReader"/> if a <see cref="M:FluorineFx.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.Integer">
            <summary>
            An interger.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.Constructor">
            <summary>
            A JavaScript object constructor.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="T:FluorineFx.Json.JavaScriptConvert">
            <summary>
            Provides methods for converting between common language runtime types and JavaScript types.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JavaScriptConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JavaScriptConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JavaScriptConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:FluorineFx.Json.JavaScriptConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimter">The string delimiter character.</param>
            <returns>A Json string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to it's JavaScript string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A Json string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a Json object.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A Json string representation of the object.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <param name="value">The object to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:FluorineFx.Json.JavaScriptConvert.DeserializeObject``1(System.String,FluorineFx.Json.JsonConverter[])">
            <summary>
            Deserializes the specified object to a Json object.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3NameObjectCollectionWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.FLV.FlvReader">
            <summary>
            A Reader is used to read the contents of a FLV file.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvReader._generateMetadata">
            <summary>
            Set to true to generate metadata automatically before the first tag.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvReader._keyframeMeta">
            <summary>
            Keyframe metadata.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvReader._firstVideoTag">
            <summary>
            Position of first video tag.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvReader._firstAudioTag">
            <summary>
            Position of first audio tag.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvReader._tagPosition">
            <summary>
            Current tag.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvReader._duration">
            <summary>
            Duration in milliseconds.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvReader._posTimeMap">
            <summary>
            Mapping between file position and timestamp in ms.
            (Long, Long)
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvReader._posTagMap">
            <summary>
            Mapping between file position and tag number.
            (Long, Integer)
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvReader._header">
            <summary>
            The header of this FLV file.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.FLV.FlvReader.GetRemainingBytes">
            <summary>
            Get the remaining bytes that could be read from a file or ByteBuffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.FLV.FlvReader.GetTotalBytes">
            <summary>
            Get the total readable bytes in a file or ByteBuffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.FLV.FlvReader.GetCurrentPosition">
            <summary>
            Get the current position in a file or ByteBuffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.FLV.FlvReader.SetCurrentPosition(System.Int64)">
            <summary>
            Modifies current position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:FluorineFx.IO.FLV.FlvReader.AnalyzeKeyFrames">
            <summary>
            Key frames analysis may be used as a utility method so synchronize it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.FLV.FlvReader.CreateFileMeta">
            <summary>
            Create tag for metadata event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.FLV.FlvReader.ReadTagHeader">
            <summary>
            Read only header part of a tag.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.IO.FLV.FlvReader.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access. 
            </summary>
        </member>
        <member name="P:FluorineFx.IO.FLV.FlvReader.Position">
            <summary>
            Gets or sets the current position.
            The caller must ensure the pos is a valid one
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamPacket">
            <summary>
            Packet containing stream data.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStreamPacket.DataType">
            <summary>
            Type of the packet.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStreamPacket.Timestamp">
            <summary>
            Timestamp of this packet in milliseconds.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Stream.IStreamPacket.Data">
            <summary>
            Packet contents.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpGreater">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.FunctionNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ConfigurationSection">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ApplicationConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Configuration.ApplicationConfiguration.Load(System.String)">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.Configuration.ApplicationConfiguration.ApplicationHandler">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ApplicationConfiguration.StreamFilenameGenerator">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ApplicationConfiguration.SharedObjectServiceConfiguration">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ApplicationConfiguration.StreamService">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ApplicationConfiguration.ProviderServiceConfiguration">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ApplicationConfiguration.ConsumerServiceConfiguration">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ApplicationConfiguration.SharedObjectSecurityService">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ApplicationHandlerConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ApplicationHandlerConfiguration.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.StreamFilenameGeneratorConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.StreamFilenameGeneratorConfiguration.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.SharedObjectServiceConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.SharedObjectServiceConfiguration.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.SharedObjectServiceConfiguration.PersistenceStore">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.PersistenceStoreConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.PersistenceStoreConfiguration.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ProviderServiceConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ProviderServiceConfiguration.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.ConsumerServiceConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.ConsumerServiceConfiguration.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.StreamServiceConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.StreamServiceConfiguration.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Configuration.SharedObjectSecurityServiceConfiguration">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Configuration.SharedObjectSecurityServiceConfiguration.Type">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.SynchronizedHashtable">
            <summary>
            Synchronized <see cref="T:System.Collections.Hashtable"/> that synchronizes 
            reads from the underlying hashtable in addition to writes.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:FluorineFx.Collections.SynchronizedHashtable"/>
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of <see cref="T:FluorineFx.Collections.SynchronizedHashtable"/>, copying inital entries from <param name="dictionary"/>.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add. </param>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add. </param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <exception cref="T:System.ArgumentNullException">key is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.ContainsKey(System.Object)">
            <summary>
             Returns, whether this <see cref="T:System.Collections.IDictionary"/> contains an entry with the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to look for</param>
            <returns><see lang="true"/>, if this <see cref="T:System.Collections.IDictionary"/> contains an entry with this <paramref name="key"/></returns>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.ContainsValue(System.Object)">
            <summary>
             Returns, whether this <see cref="T:System.Collections.IDictionary"/> contains an entry with the specified <paramref name="value"/>.
            </summary>
            <param name="value">The valúe to look for</param>
            <returns><see lang="true"/>, if this <see cref="T:System.Collections.IDictionary"/> contains an entry with this <paramref name="value"/></returns>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove. </param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:FluorineFx.Collections.SynchronizedHashtable.AddIfAbsent(System.Object,System.Object)">
             <summary>
             Adds an item to the hashtable if this hashtable does not yet contain this item.
             </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add. </param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add. </param>
             <returns>The passwd value if added, otherwise the old value in the hashtable.</returns>
        </member>
        <member name="P:FluorineFx.Collections.SynchronizedHashtable.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:FluorineFx.Collections.SynchronizedHashtable.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:FluorineFx.Collections.SynchronizedHashtable.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:FluorineFx.Collections.SynchronizedHashtable.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:FluorineFx.Collections.SynchronizedHashtable.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="P:FluorineFx.Collections.SynchronizedHashtable.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:FluorineFx.Collections.SynchronizedHashtable.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </returns>
        </member>
        <member name="P:FluorineFx.Collections.SynchronizedHashtable.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set. </param>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The property is set, key does not exist in the collection, and the <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:FluorineFx.Collections.RbTreeNode">
            <summary>
            Node of a red-black tree.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.RbTreeNode.#ctor(System.Object)">
            <summary>
            Creates a default node with value val.
            </summary>
            <remarks>
            Node has no children and is red.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.RbTreeNode.#ctor(System.Object,FluorineFx.Collections.RbTreeNode,FluorineFx.Collections.RbTreeNode,FluorineFx.Collections.RbTreeNode,System.Boolean)">
            <summary>
            Creates a node from field values.
            </summary>
        </member>
        <member name="F:FluorineFx.Collections.RbTreeNode.Value">
            <summary>
            Value held by the node.
            </summary>
        </member>
        <member name="F:FluorineFx.Collections.RbTreeNode.Parent">
            <summary>
            Parent node.
            </summary>
        </member>
        <member name="F:FluorineFx.Collections.RbTreeNode.Left">
            <summary>
            Left child.
            </summary>
        </member>
        <member name="F:FluorineFx.Collections.RbTreeNode.Right">
            <summary>
            Right child.
            </summary>
        </member>
        <member name="F:FluorineFx.Collections.RbTreeNode.IsRed">
            <summary>
            true if node is red, false if node is black.
            </summary>
        </member>
        <member name="F:FluorineFx.Collections.RbTreeNode.Nil">
            <summary>
            Logically null (leaf) node.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.RbTreeNode.#ctor">
            <summary>
            Constructor used internally for creating a Nil node.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.RbTreeNode.IsNull">
            <summary>
            true if node is logically null (leaf) node, false otherwise.
            </summary>
        </member>
        <member name="T:FluorineFx.Collections.RbTreeNode.NullNode">
            <summary>
            Represents null node
            </summary>
            <remarks>
            Null node is a leaf node with null value and without children.
            It is always black.
            </remarks>
        </member>
        <member name="M:FluorineFx.Collections.RbTreeNode.NullNode.#ctor">
            <summary>
            Creates a logically null node.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.RbTreeNode.NullNode.IsNull">
            <summary>
            Returns true for logically null node.
            </summary>
        </member>
        <member name="T:FluorineFx.Browser.IServiceBrowserRenderer">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Browser.IServiceBrowserRenderer.CanRender(System.Web.HttpRequest)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="httpRequest"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Browser.IServiceBrowserRenderer.Render(System.Web.HttpApplication)">
            <summary>
            This method supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="httpApplication"></param>
        </member>
        <member name="T:FluorineFx.Util.Layouter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            Pretty-print code formatted using line breaks and indentation.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.Layouter.Begin">
            <summary>
            Begin a block.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.Layouter.End">
            <summary>
            Ends the innermost block.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.Layouter.AppendFormat(System.String,System.Object[])">
            <summary>
            Appends a formatted string, which contains zero or more format specifications, to this instance. Each format specification is replaced by the string representation of a corresponding object argument.
            </summary>
            <param name="format">A string containing zero or more format specifications.</param>
            <param name="args">An array of objects to format.</param>
            <returns>A reference to this instance with format appended. Any format specification in format is replaced by the string representation of the corresponding object argument.</returns>
        </member>
        <member name="M:FluorineFx.Util.Layouter.Append(System.String)">
            <summary>
            Appends a copy of the specified string to the end of this instance.
            </summary>
            <param name="value">The String to append.</param>
            <returns>A reference to this instance after the append operation has occurred.</returns>
        </member>
        <member name="T:FluorineFx.Util.DateTimeUtils">
            <summary>
            DateTime related utility methods.
            </summary>
        </member>
        <member name="M:FluorineFx.Util.DateTimeUtils.AssumeUniversalTime(System.DateTime)">
            <summary>
            Assumes that given input is in UTC and sets the kind to be UTC.
            Just a precaution if somebody does not set it explicitly.
            <strong>This only works in .NET Framework 2.0 onwards.</strong>
            </summary>
            <param name="dt">The datetime to check.</param>
            <returns>DateTime with kind set to UTC.</returns>
        </member>
        <member name="M:FluorineFx.Util.DateTimeUtils.AssumeUniversalTime(System.Nullable{System.DateTime})">
            <summary>
            Assumes that given input is in UTC and sets the kind to be UTC.
            Just a precaution if somebody does not set it explicitly.
            </summary>
            <param name="dt">The datetime to check.</param>
            <returns>DateTime with kind set to UTC.</returns>
        </member>
        <member name="M:FluorineFx.Util.DateTimeUtils.ParseInternetDate(System.String)">
            <summary>
            Returns a date from a string using the internet format.
            </summary>
            <param name="input">Date string using the internet format.</param>
            <returns>DateTime parsed from string.</returns>
        </member>
        <member name="T:FluorineFx.Collections.CopyOnWriteArray">
            <summary>
            A thread-safe variant of ArrayList in which all mutative operations (add, set, and so on) are implemented by making a fresh
            copy of the underlying array.
            
            This is ordinarily too costly, but may be more efficient than alternatives when traversal operations vastly outnumber
            mutations, and is useful when you cannot or don't want to synchronize traversals, yet need to preclude interference among
            concurrent threads.  The "snapshot" style iterator method uses a reference to the state of the array at the point that the iterator
            was created. This array never changes during the lifetime of the iterator, so interference is impossible.
            
            The iterator will not reflect additions, removals, or changes to the list since the iterator was created.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.#ctor">
            <summary>
            Initializes a new instance of the CopyOnWriteArray class.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.#ctor(System.Collections.IList)">
            <summary>
            Creates a CopyOnWriteArray wrapper for a specific IList.
            </summary>
            <param name="list">The IList to wrap.</param>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.IndexOf(System.Object,System.Object[],System.Int32)">
            <summary>
            Static version allows repeated call without needed to grab lock for array each time.
            </summary>
            <param name="elem"></param>
            <param name="elementData"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.Add(System.Object)">
            <summary>
            Adds an object to the end of the CopyOnWriteArray. 
            </summary>
            <param name="value">The Object to add to the CopyOnWriteArray.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.Clear">
            <summary>
            Removes all elements from the CopyOnWriteArray.
            </summary>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.Contains(System.Object)">
            <summary>
            Determines whether the CopyOnWriteArray contains a specific value.
            </summary>
            <param name="value">The Object to locate in the CopyOnWriteArray.</param>
            <returns>true if the Object is found in the CopyOnWriteArray; otherwise, false.</returns>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the CopyOnWriteArray. 
            </summary>
            <param name="value">The Object to locate in the CopyOnWriteArray.</param>
            <returns>The index of value if found in the CopyOnWriteArray; otherwise, -1.</returns>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the CopyOnWriteArray at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The Object to insert into the CopyOnWriteArray.</param>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the CopyOnWriteArray.
            </summary>
            <param name="value">The Object to remove from the CopyOnWriteArray.</param>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the CopyOnWriteArray.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the CopyOnWriteArray to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from CopyOnWriteArray. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:FluorineFx.Collections.CopyOnWriteArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through an CopyOnWriteArray.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:FluorineFx.Collections.CopyOnWriteArray.IsFixedSize">
            <summary>
            Gets a value indicating whether the CopyOnWriteArray has a fixed size.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.CopyOnWriteArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the CopyOnWriteArray is read-only.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.CopyOnWriteArray.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:FluorineFx.Collections.CopyOnWriteArray.Count">
            <summary>
            Gets the number of elements contained in the CopyOnWriteArray.
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.CopyOnWriteArray.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the CopyOnWriteArray is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:FluorineFx.Collections.CopyOnWriteArray.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the CopyOnWriteArray.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Adapter.IApplication">
            <summary>
            IApplication provides lifecycle methods that most communication applications
            will use. This interface defines the methods that are called by the gateway through
            an applications life.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnAppStart(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called once when application or room starts.
            </summary>
            <param name="application">Application or room level scope.</param>
            <returns><c>true</c> continues application run, <c>false</c> terminates</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnAppConnect(FluorineFx.Messaging.Api.IConnection,System.Object[])">
            <summary>
            Called per each client connect
            </summary>
            <param name="connection">Connection object used to provide basic connection methods.</param>
            <param name="parameters">List of params sent from client with NetConnection.connect call</param>
            <returns><c>true</c> accepts the connection, <c>false</c> rejects it</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnAppJoin(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called every time client joins app level scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="application">Scope object.</param>
            <returns><code>true</code> accepts the client, <code>false</code> rejects it</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnAppDisconnect(FluorineFx.Messaging.Api.IConnection)">
            <summary>
            Called every time client disconnects from the application.
            </summary>
            <param name="connection">Connection object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnAppLeave(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called every time client leaves the application scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="application">Scope object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnAppStop(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called on application stop.
            </summary>
            <param name="application">Scope object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnRoomStart(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called on application room start.
            </summary>
            <param name="room">Scope object</param>
            <returns><c>true</c> if scope can be started, <c>false</c> otherwise</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnRoomConnect(FluorineFx.Messaging.Api.IConnection,System.Object[])">
            <summary>
            Called every time client connects to the room.
            </summary>
            <param name="connection">Connection object.</param>
            <param name="parameters">List of params sent from client with NetConnection.connect call</param>
            <returns><c>true</c> accepts the connection, <c>false</c> rejects it.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnRoomJoin(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called when user joins room scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="room">Scope object.</param>
            <returns><c>true</c> accepts the client, <c>false</c> rejects it.</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnRoomDisconnect(FluorineFx.Messaging.Api.IConnection)">
            <summary>
            Called when client disconnects from room scope.
            </summary>
            <param name="connection">Connection object used to provide basic connection methods.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnRoomLeave(FluorineFx.Messaging.Api.IClient,FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called when user leaves room scope.
            </summary>
            <param name="client">Client object.</param>
            <param name="room">Scope object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Adapter.IApplication.OnRoomStop(FluorineFx.Messaging.Api.IScope)">
            <summary>
            Called on room scope stop.
            </summary>
            <param name="room">Scope object.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.WebScope">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.WebScope._isShuttingDown">
            <summary>
            Is the scope currently shutting down?
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.WebScope._isRegistered">
            <summary>
            Has the web scope been registered?
            </summary>
        </member>
        <member name="T:FluorineFx.IO.IOConstants">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.TYPE_VIDEO">
            <summary>
            Video data
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.TYPE_AUDIO">
            <summary>
            Audio data
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.TYPE_METADATA">
            <summary>
            Metadata
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.MASK_SOUND_TYPE">
            <summary>
            Mask sound type
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_TYPE_MONO">
            <summary>
            Mono mode
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_TYPE_STEREO">
            <summary>
            Stereo mode
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.MASK_SOUND_SIZE">
            <summary>
            Mask sound size
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_SIZE_8_BIT">
            <summary>
            8 bit flag size
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_SIZE_16_BIT">
            <summary>
            16 bit flag size
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.MASK_SOUND_RATE">
            <summary>
            Mask sound rate
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_RATE_5_5_KHZ">
            <summary>
            5.5 KHz rate flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_RATE_11_KHZ">
            <summary>
            11 KHz rate flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_RATE_22_KHZ">
            <summary>
            22 KHz rate flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_RATE_44_KHZ">
            <summary>
            44 KHz rate flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.MASK_SOUND_FORMAT">
            <summary>
            Mask sound format (unsigned)
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_FORMAT_RAW">
            <summary>
            Raw data format flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_FORMAT_ADPCM">
            <summary>
            ADPCM format flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_FORMAT_MP3">
            <summary>
            MP3 format flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_FORMAT_NELLYMOSER_8_KHZ">
            <summary>
            8 KHz NellyMoser audio format flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_FORMAT_NELLYMOSER">
            <summary>
            NellyMoser-encoded audio format flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.MASK_VIDEO_CODEC">
            <summary>
            Mask video codec
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_CODEC_H263">
            <summary>
            H263 codec flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_CODEC_SCREEN">
            <summary>
            Screen codec flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_CODEC_VP6">
            <summary>
            On2 VP6 codec flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.MASK_VIDEO_FRAMETYPE">
            <summary>
            Video frametype flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_FRAMETYPE_KEYFRAME">
            <summary>
            Keyframe type flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_FRAMETYPE_INTERFRAME">
            <summary>
            Interframe flag. Interframes are created from keyframes rather than independent image
            </summary>
        </member>
        <member name="F:FluorineFx.IO.IOConstants.FLAG_FRAMETYPE_DISPOSABLE">
            <summary>
            Disposable frame type flag
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.ChunkSize">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Event.ChunkSize.Size">
            <summary>
            Chunk size.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF3IntWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.DateWrapper">
            <summary>
            Helper class used for date, timezone management.
            </summary>
            <remarks>DateWrapper uses time zone in the last Date encountered during deserialization.</remarks>
        </member>
        <member name="F:FluorineFx.DateWrapper.FluorineContextKey">
            <summary>
            This member supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.DateWrapper.#ctor">
            <summary>
            Initializes a new instance of the DateWrapper class.
            </summary>
        </member>
        <member name="M:FluorineFx.DateWrapper.GetClientDate(System.DateTime)">
            <summary>
            Get the date according to client timezone.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.DateWrapper.GetServerDate(System.DateTime)">
            <summary>
            Get the date according to server timezone.
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="P:FluorineFx.DateWrapper.ClientTimeZone">
            <summary>
            Gets the client time zone.
            </summary>
        </member>
        <member name="P:FluorineFx.DateWrapper.ServerTimeZone">
            <summary>
            Gets the server time zone.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.VideoCodecFactory">
            <summary>
            Factory for video codecs. Creates and returns video codecs.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.VideoCodecFactory._codecs">
            <summary>
            List of available codecs.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.VideoCodecFactory.GetVideoCodec(FluorineFx.Util.ByteBuffer)">
            <summary>
            Create and return new video codec applicable for byte buffer data
            </summary>
            <param name="data">Byte buffer data.</param>
            <returns>Video codec.</returns>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.StreamTracker._lastAudio">
            <summary>
            Last audio flag.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.StreamTracker._lastVideo">
            <summary>
            Last video flag.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.StreamTracker._lastNotify">
            <summary>
            Last notification flag.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.StreamTracker._relative">
            <summary>
            Relative flag.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.StreamTracker._firstVideo">
            <summary>
            First video flag.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.StreamTracker._firstAudio">
            <summary>
            First audio flag.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.StreamTracker._firstNotify">
            <summary>
            First notification flag.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.StreamTracker.Reset">
            <summary>
            Reset state.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.StreamTracker.Add(FluorineFx.Messaging.Rtmp.Event.IRtmpEvent)">
            <summary>
            RTMP event handler.
            </summary>
            <param name="evt">RTMP event</param>
            <returns>Timeframe since last notification (or audio or video packet sending).</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.StreamService.GetCurrentStreamId">
            <summary>
            Returns current stream id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.StreamService.GetBroadcastScope(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Returns broadcast scope object for given scope and child scope name.
            </summary>
            <param name="scope">Scope object.</param>
            <param name="name">Child scope name.</param>
            <returns>Broadcast scope.</returns>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.PlaylistState">
            <summary>
            Possible states enumeration
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream">
            <summary>
            Stream of playlist subsciber.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._controller">
            <summary>
            Playlist controller
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._defaultController">
            <summary>
            Default playlist controller
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._items">
            <summary>
            Playlist items
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._currentItemIndex">
            <summary>
            Current item index
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._engine">
            <summary>
            Plays items back
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._bwController">
            <summary>
            Service that controls bandwidth
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._bwContext">
            <summary>
            Operating context for bandwidth controller
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._isRewind">
            <summary>
            Rewind mode state
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._isRandom">
            <summary>
            Random mode state
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._isRepeat">
            <summary>
            Repeat mode state
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._receiveVideo">
            <summary>
            Recieve video?
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._receiveAudio">
            <summary>
            Recieve audio?
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._bufferCheckInterval">
            <summary>
            Interval in ms to check for buffer underruns in VOD streams.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._underrunTrigger">
            <summary>
            Number of pending messages at which a <code>NetStream.Play.InsufficientBW</code> message is generated for VOD streams.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._creationTime">
            <summary>
            Timestamp this stream was created.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream._bytesSent">
            <summary>
            Number of bytes sent.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.SetItem(System.Int32)">
            <summary>
            Set the current item for playing.
            </summary>
            <param name="index">Position in list</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.SeekToCurrentPlayback">
            <summary>
            Seek to current position to restart playback with audio and/or video.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.MoveToNext">
            <summary>
            Move the current item to the next in list.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.MoveToPrevious">
            <summary>
            Move the current item to the previous in list.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.OnItemEnd">
            <summary>
            Notified by the play engine when the current item reaches the end.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.NotifySubscriberStart">
            <summary>
            Notifies subscribers on start.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.NotifySubscriberClose">
            <summary>
            Notifies subscribers on stop.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.NotifyItemPlay(FluorineFx.Messaging.Api.Stream.IPlayItem,System.Boolean)">
            <summary>
            Notifies subscribers on item playback.
            </summary>
            <param name="item">Item being played.</param>
            <param name="isLive">Is it a live broadcasting?</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.NotifyItemStop(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Notifies subscribers on item stop
            </summary>
            <param name="item">Item that just has been stopped.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.NotifyItemPause(FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
            <summary>
            Notifies subscribers on pause.
            </summary>
            <param name="item">Item that just has been paused.</param>
            <param name="position">Playback head position.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.NotifyItemResume(FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
            <summary>
            Notifies subscribers on resume
            </summary>
            <param name="item">Item that just has been resumed.</param>
            <param name="position">Playback head position.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.NotifyItemSeek(FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
            <summary>
            Notify on item seek
            </summary>
            <param name="item">Playlist item.</param>
            <param name="position">Seek position.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.Written(System.Object)">
            <summary>
            Notified by RTMPHandler when a message has been sent. Glue for old code base.
            </summary>
            <param name="message">Message that has been written.</param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine">
            <summary>
            A play engine for playing an IPlayItem.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine._videoFrameDropper">
            <summary>
            State machine for video frame dropping in live streams
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine._lastMessage">
            <summary>
            Last message sent to the client.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine._bytesSent">
            <summary>
            Number of bytes sent.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine._playbackStart">
            <summary>
            Start time of stream playback.
            It's not a time when the stream is being played but
            the time when the stream should be played if it's played
            from the very beginning.
            Eg. A stream is played at timestamp 5s on 1:00:05. The
            playbackStart is 1:00:00.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine._streamOffset">
            <summary>
            Offset in ms the stream started.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine._nextCheckBufferUnderrun">
            <summary>
            Timestamp when buffer should be checked for underruns next.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine._sendBlankAudio">
            <summary>
            Send blank audio packet next?
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.UpdateBandwithConfigure">
            <summary>
            Update bandwidth configuration
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.Start">
            <summary>
            Start stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.Stop">
            <summary>
            Stop playback
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.Close">
            <summary>
            Close stream
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.Pause(System.Int32)">
            <summary>
            Pause at position
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.Resume(System.Int32)">
            <summary>
            Resume playback
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.Seek(System.Int32)">
            <summary>
            Seek position in file
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.ReleasePendingMessage">
            <summary>
            Releases pending message body, nullifies pending message object
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.EnsurePullAndPushRunning">
            <summary>
            Make sure the pull and push processing is running.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.PullAndPush">
            <summary>
            Recieve then send if message is data (not audio or video)
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.OkayToSendMessage(FluorineFx.Messaging.Rtmp.Event.IRtmpEvent)">
            <summary>
            Check if it's okay to send the client more data. This takes the configured
            bandwidth as well as the requested client buffer into account.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.GetPendingMessagesCount">
            <summary>
            Get number of pending messages to be sent
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.GetPendingVideoMessageCount">
            <summary>
            Get number of pending video messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.GetWriteDelta">
            <summary>
            Get informations about bytes send and number of bytes the client reports to have received.
            </summary>
            <returns>Written bytes and number of bytes the client received</returns>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.ClearWaitJobs">
            <summary>
            Clear all scheduled waiting jobs
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.Play(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Play stream.
            </summary>
            <param name="item">Playlist item.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.Play(FluorineFx.Messaging.Api.Stream.IPlayItem,System.Boolean)">
            <summary>
            Play stream
            </summary>
            <param name="item">Playlist item.</param>
            <param name="withReset">Send reset status before playing.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.DoPushMessage(FluorineFx.Messaging.Messages.AsyncMessage)">
            <summary>
            Send message to output stream and handle exceptions.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendMessage(FluorineFx.Messaging.Rtmp.Stream.Messages.RtmpMessage)">
            <summary>
            Send RTMP message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendClearPing">
            <summary>
            Send clear ping, that is, just to check if connection is alive
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendReset">
            <summary>
            Send reset message
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendResetStatus(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Send reset status for item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendStartStatus(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Send playback start status notification
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendStopStatus(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Send playback stoppage status notification
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendSwitchStatus">
            <summary>
            Send playlist switch status notification
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendCompleteStatus">
            <summary>
            Send playlist complete status notification
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendSeekStatus(FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
            <summary>
            Send seek status notification
            </summary>
            <param name="item"></param>
            <param name="position"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendPauseStatus(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Send pause status notification
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendResumeStatus(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Send resume status notification
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendPublishedStatus(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Send published status notification
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendUnpublishedStatus(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Send unpublished status notification
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendStreamNotFoundStatus(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Stream not found status notification
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendInsufficientBandwidthStatus(FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Insufficient bandwidth notification
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendVODInitCM(FluorineFx.Messaging.Api.Messaging.IMessageInput,FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Send VOD init control message
            </summary>
            <param name="msgIn"></param>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendVODSeekCM(FluorineFx.Messaging.Api.Messaging.IMessageInput,System.Int32)">
            <summary>
            Send VOD seek control message
            </summary>
            <param name="msgIn"></param>
            <param name="position"></param>
            <returns></returns>            
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.PlaylistSubscriberStream.PlayEngine.SendCheckVideoCM(FluorineFx.Messaging.Api.Messaging.IMessageInput)">
            <summary>
            Send VOD check video control message
            </summary>
            <param name="msgIn"></param>
            <returns></returns>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.FrameDropperState.SEND_ALL">
            <summary>
            Send keyframes, interframes and disposable interframes.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.FrameDropperState.SEND_INTERFRAMES">
            <summary>
            Send keyframes and interframes.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.FrameDropperState.SEND_KEYFRAMES">
            <summary>
            Send keyframes only.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.FrameDropperState.SEND_KEYFRAMES_CHECK">
            <summary>
            Send keyframes only and switch to SEND_INTERFRAMES later.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.ConsumerService">
            <summary>
            Basic consumer service implementation. Used to get pushed messages at consumer endpoint.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream">
            <summary>
            Represents live stream broadcasted from client. As Flash Media Server, supports
            recording mode for live streams, that is, broadcasted stream has broadcast mode. It can be either
            "live" or "record" and latter causes server-side application to record broadcasted stream.
            
            Note that recorded streams are recorded as FLV files. The same is correct for audio, because
            NellyMoser codec that Flash Player uses prohibits on-the-fly transcoding to audio formats like MP3
            without paying of licensing fee or buying SDK.
            
            This type of stream uses two different pipes for live streaming and recording.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._audioTime">
            <summary>
            Stores absolute time for video stream.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._bytesReceived">
            <summary>
            Total number of bytes received.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._checkVideoCodec">
            <summary>
            Is there need to check video codec?
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._chunkSize">
            <summary>
            Data is sent by chunks, each of them has size.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._closed">
            <summary>
            Is this stream still active?
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._connMsgOut">
            <summary>
            Output endpoint that providers use.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._creationTime">
            <summary>
            Timestamp the stream was created.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._dataTime">
            <summary>
            Stores absolute time for data stream.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._firstPacketTime">
            <summary>
            Stores timestamp of first packet.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._livePipe">
            <summary>
            Pipe for live streaming
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._publishedName">
            <summary>
            Stream published name.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._recording">
            <summary>
            Whether we are recording or not.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._recordingFile">
            <summary>
            FileConsumer used to output recording to disk.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._recordingFilename">
            <summary>
            The filename we are recording to.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._recordPipe">
            <summary>
            Pipe for recording.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._sendStartNotification">
            <summary>
            Is there need to send start notification?
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._subscriberStats">
            <summary>
            Stores statistics about subscribers.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._videoCodecFactory">
            <summary>
            Factory object for video codecs.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream._videoTime">
            <summary>
            Stores absolute time for audio stream.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.SendPublishStartNotify">
            <summary>
            Sends publish start notifications.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.SendPublishStopNotify">
            <summary>
            Sends publish stop notifications.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.SendRecordStartNotify">
            <summary>
            Sends record start notifications.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.SendRecordStopNotify">
            <summary>
            Sends record stop notifications.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.SendRecordFailedNotify(System.String)">
            <summary>
            Sends record failed notifications.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.NotifyBroadcastStart">
            <summary>
            Notifies handler on stream broadcast start.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.NotifyBroadcastClose">
            <summary>
            Notifies handler on stream broadcast stop.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.NotifyChunkSize">
            <summary>
            Send OOB control message with chunk size.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.Close">
            <summary>
            Closes stream, unsubscribes provides, sends stoppage notifications and broadcast close notification.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves broadcasted stream.
            </summary>
            <param name="name"></param>
            <param name="isAppend"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.OnOOBControlMessage(FluorineFx.Messaging.Api.Messaging.IMessageComponent,FluorineFx.Messaging.Api.Messaging.IPipe,FluorineFx.Messaging.Api.Messaging.OOBControlMessage)">
            <summary>
            Out-of-band control message handler.
            </summary>
            <param name="source">OOB message source.</param>
            <param name="pipe">Pipe that used to send OOB message.</param>
            <param name="oobCtrlMsg">Out-of-band control message.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.OnPipeConnectionEvent(FluorineFx.Messaging.Api.Messaging.PipeConnectionEvent)">
            <summary>
            Pipe connection event handler.
            </summary>
            <param name="evt">Pipe connection event.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.StopRecording">
            <summary>
            Stops any currently active recordings.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Rtmp.Stream.ClientBroadcastStream.PublishedName">
            <summary>
            Name that used for publishing. Set at client side when begin to broadcast with NetStream#publish.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.IO.StreamableFileFactory">
            <summary>
            Creates streamable file services.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.IO.StreamableFileFactory._services">
            <summary>
            Set of IStreamableFileService instances.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Event.FlexStreamSend">
            <summary>
            AMF3 stream send message.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler">
            <summary>
            A scope handler that is stream aware.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamPublishStart(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
            <summary>
            A broadcast stream starts being published. This will be called when the first video packet has been received.
            </summary>
            <param name="stream">Stream object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamRecordStart(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
            <summary>
            A broadcast stream starts being recorded. This will be called when the first video packet has been received.
            </summary>
            <param name="stream">Stream object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamBroadcastStart(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
            <summary>
            Notified when a broadcaster starts.
            </summary>
            <param name="stream">Stream object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamBroadcastClose(FluorineFx.Messaging.Api.Stream.IBroadcastStream)">
            <summary>
            Notified when a broadcaster closes.
            </summary>
            <param name="stream">Stream object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamSubscriberStart(FluorineFx.Messaging.Api.Stream.ISubscriberStream)">
            <summary>
            Notified when a subscriber starts.
            </summary>
            <param name="stream">Stream object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamSubscriberClose(FluorineFx.Messaging.Api.Stream.ISubscriberStream)">
            <summary>
            Notified when a subscriber closes.
            </summary>
            <param name="stream">Stream object.</param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamPlaylistItemPlay(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Boolean)">
            <summary>
            Notified when a playlist item plays.
            </summary>
            <param name="stream">Stream object.</param>
            <param name="item">Playitem.</param>
            <param name="isLive"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamPlaylistItemStop(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem)">
            <summary>
            Notified when a playlist item stops.
            </summary>
            <param name="stream"></param>
            <param name="item"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamPlaylistVODItemPause(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
            <summary>
            Notified when a playlist vod item pauses.
            </summary>
            <param name="stream"></param>
            <param name="item"></param>
            <param name="position"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamPlaylistVODItemResume(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
            <summary>
            Notified when a playlist vod item resumes.
            </summary>
            <param name="stream"></param>
            <param name="item"></param>
            <param name="position"></param>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Stream.IStreamAwareScopeHandler.StreamPlaylistVODItemSeek(FluorineFx.Messaging.Api.Stream.IPlaylistSubscriberStream,FluorineFx.Messaging.Api.Stream.IPlayItem,System.Int32)">
            <summary>
            Notified when a playlist vod item seeks.
            </summary>
            <param name="stream"></param>
            <param name="item"></param>
            <param name="position"></param>
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.Consumer.ConnectionConsumer">
            <summary>
            RTMP connection consumer.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.ConnectionConsumer._connection">
            <summary>
            Connection object.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.ConnectionConsumer._video">
            <summary>
            Video channel.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.ConnectionConsumer._audio">
            <summary>
            Audio channel.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.ConnectionConsumer._data">
            <summary>
            Data channel.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.ConnectionConsumer._chunkSize">
            <summary>
            Chunk size. Packets are sent chunk-by-chunk.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmp.Stream.Consumer.ConnectionConsumer._streamTracker">
            <summary>
            Stream tracker.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Statistics.StatisticsCounter">
            <summary>
            Counts numbers used by the statistics. Keeps track of current, maximum and total numbers.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Statistics.StatisticsCounter._current">
            <summary>
            Current number.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Statistics.StatisticsCounter._total">
            <summary>
            Total number.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Statistics.StatisticsCounter._max">
            <summary>
            Maximum number.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Statistics.StatisticsCounter.Increment">
            <summary>
            Increment statistics by one.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Statistics.StatisticsCounter.Decrement">
            <summary>
            Decrement statistics by one.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.StatisticsCounter.Current">
            <summary>
            Gets current number.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.StatisticsCounter.Total">
            <summary>
            Gets total number.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Statistics.StatisticsCounter.Max">
            <summary>
            Gets maximum number.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Service.ServiceUtils">
            <summary>
            Utility functions to invoke methods on connections.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.ServiceUtils.InvokeOnConnection(System.String,System.Object[])">
            <summary>
            Invoke a method on the current connection.
            </summary>
            <param name="method">Name of the method to invoke.</param>
            <param name="args">Parameters to pass to the method.</param>
            <returns><code>true</code> if the connection supports method calls, otherwise <code>false</code></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.ServiceUtils.InvokeOnConnection(System.String,System.Object[],FluorineFx.Messaging.Api.Service.IPendingServiceCallback)">
            <summary>
            Invoke a method on the current connection and handle result.
            </summary>
            <param name="method">Name of the method to invoke.</param>
            <param name="args">Parameters to pass to the method.</param>
            <param name="callback">Object to notify when result is received.</param>
            <returns><code>true</code> if the connection supports method calls, otherwise <code>false</code></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.ServiceUtils.InvokeOnConnection(FluorineFx.Messaging.Api.IConnection,System.String,System.Object[])">
            <summary>
            Invoke a method on a given connection.
            </summary>
            <param name="connection">Connection to invoke method on.</param>
            <param name="method">Name of the method to invoke.</param>
            <param name="args">Parameters to pass to the method.</param>
            <returns><code>true</code> if the connection supports method calls, otherwise <code>false</code></returns>
        </member>
        <member name="M:FluorineFx.Messaging.Api.Service.ServiceUtils.InvokeOnConnection(FluorineFx.Messaging.Api.IConnection,System.String,System.Object[],FluorineFx.Messaging.Api.Service.IPendingServiceCallback)">
            <summary>
            Invoke a method on a given connection and handle result.
            </summary>
            <param name="connection">Connection to invoke method on.</param>
            <param name="method">Name of the method to invoke.</param>
            <param name="args">Parameters to pass to the method.</param>
            <param name="callback">Object to notify when result is received.</param>
            <returns><code>true</code> if the connection supports method calls, otherwise <code>false</code></returns>
        </member>
        <member name="T:FluorineFx.Messaging.Api.Messaging.OOBControlMessage">
            <summary>
            Out-of-band control message used by inter-components communication
            which are connected with pipes.
            Out-of-band data is a separate data stream used for specific purposes (in TCP it's referenced as "urgent data"), like lifecycle control.
            </summary>
            <remarks>
            'Target' is used to represent the receiver who may be interested for receiving. It's a string of any form.
            </remarks>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.OOBControlMessage._target">
            <summary>
            Target.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.OOBControlMessage._serviceName">
            <summary>
            Service name.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.OOBControlMessage._serviceParameterMap">
            <summary>
            Service parameters.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Api.Messaging.OOBControlMessage._result">
            <summary>
            Result.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Messaging.OOBControlMessage.ServiceName">
            <summary>
            Gets or sets the service name.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Messaging.OOBControlMessage.ServiceParameterMap">
            <summary>
            Gets or sets service parameters.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Messaging.OOBControlMessage.Target">
            <summary>
            Gets or sets target.
            </summary>
        </member>
        <member name="P:FluorineFx.Messaging.Api.Messaging.OOBControlMessage.Result">
            <summary>
            Gets or sets result.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.Writers.AMF0NameObjectCollectionWriter">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.IO.FLV.MetaService">
            <summary>
            MetaData service.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.FLV.MetaService.InjectMetaData(FluorineFx.IO.FLV.MetaData,FluorineFx.IO.ITag)">
            <summary>
            Injects metadata (other than Cue points) into a tag.
            </summary>
            <param name="meta"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.FLV.MetaService.InjectMetaCue(FluorineFx.IO.FLV.MetaCue,FluorineFx.IO.ITag)">
            <summary>
            Injects metadata (Cue Points) into a tag.
            </summary>
            <param name="meta"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.IO.FLV.MetaService.GetTimeInMilliseconds(FluorineFx.IO.FLV.MetaCue)">
            <summary>
            Returns a timestamp of cue point in milliseconds.
            </summary>
            <param name="metaCue"></param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.IO.FLV.FlvWriter">
            <summary>
            A Writer is used to write the contents of a FLV file
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvWriter._bytesWritten">
            <summary>
            Number of bytes written
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvWriter._fileMetaSize">
            <summary>
            Size of tag containing onMetaData.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvWriter._videoCodecId">
            <summary>
            Id of the video codec used.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvWriter._audioCodecId">
            <summary>
            Id of the audio codec used.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvWriter._append">
            <summary>
            Are we appending to an existing file?
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvWriter._duration">
            <summary>
            Duration of the file.
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvWriter._metaPosition">
            <summary>
            Position of the meta data tag in our file.
            </summary>
        </member>
        <member name="M:FluorineFx.IO.FLV.FlvWriter.WriteMetadataTag(System.Double,System.Object,System.Object)">
            <summary>
            Write "onMetaData" tag to the file.
            </summary>
            <param name="duration">Duration to write in milliseconds.</param>
            <param name="videoCodecId">Id of the video codec used while recording.</param>
            <param name="audioCodecId">Id of the audio codec used while recording.</param>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvHeader._version">
            <summary>
            FLV version
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvHeader._flagReserved01">
            <summary>
            Reserved flag, one
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvHeader._flagAudio">
            <summary>
            Audio flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvHeader._flagReserved02">
            <summary>
            Reserved flag, two
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvHeader._flagVideo">
            <summary>
            Video flag
            </summary>
        </member>
        <member name="F:FluorineFx.IO.FLV.FlvHeader._dataOffset">
            <summary>
            DATA OFFSET reserved for data up to 4,294,967,295
            </summary>
        </member>
        <member name="M:FluorineFx.IO.FLV.FlvHeader.SetTypeFlags(System.Byte)">
            <summary>
            Sets the type flags on whether this data is audio or video.
            </summary>
            <param name="typeFlags">Type flags determining data types (audio or video).</param>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptConnection.INCREASE_POLLING_DELAY_COUNT">
            <summary>
            Start to increase the polling delay after this many empty results
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptConnection.INITIAL_POLLING_DELAY">
            <summary>
            Polling delay to start with.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptConnection.MAX_POLLING_DELAY">
            <summary>
            Maximum polling delay.
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptConnection._pollingDelay">
            <summary>
            Polling delay value
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptConnection._readBytes">
            <summary>
            Number of read bytes
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptConnection._writtenBytes">
            <summary>
            Number of written bytes
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptConnection._noPendingMessages">
            <summary>
            Timeframe without pending messages. If this time is greater then polling delay, then polling delay increased
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptConnection._pendingMessages">
            <summary>
            List of pending messages
            </summary>
        </member>
        <member name="F:FluorineFx.Messaging.Rtmpt.RtmptConnection._notifyMessages">
            <summary>
            List of notification messages
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.Endpoints.RtmptEndpoint">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Messaging.ServiceException">
            <summary>
            The ServiceException class is used to report exceptions within the messaging system.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.ServiceException.#ctor">
            <summary>
            Initializes a new instance of the ServiceException class.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.ServiceException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ServiceException class.
            </summary>
            <param name="inner">Reference to the inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:FluorineFx.Messaging.ServiceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ServiceException class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>			
        </member>
        <member name="T:FluorineFx.Messaging.Rtmp.Stream.StreamUtils">
            <summary>
            Stream helper methods.
            </summary>
        </member>
        <member name="M:FluorineFx.Messaging.Rtmp.Stream.StreamUtils.CreateServerStream(FluorineFx.Messaging.Api.IScope,System.String)">
            <summary>
            Creates server stream.
            </summary>
            <param name="scope">Scope of stream.</param>
            <param name="name">Name of stream.</param>
            <returns></returns>
        </member>
        <member name="T:FluorineFx.Json.Rpc.DefaultJsonRpcProxyGenerator">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.OpLike">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:FluorineFx.Expression.ListInitializerNode">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Expression.ListInitializerNode.Evaluate(System.Object,FluorineFx.Expression.BaseNode.EvaluationContext)">
            <summary>
            Creates new instance of the list defined by this node.
            </summary>
            <param name="context">Context to evaluate expressions against.</param>
            <param name="evalContext">Current expression evaluation context.</param>
            <returns>Node's value.</returns>
        </member>
        <member name="T:FluorineFx.Context.FluorineRtmpContext">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.Context.FluorineRtmpContext.GetResource(System.String)">
            <summary>
            Return an <see cref="T:FluorineFx.Context.IResource"/> handle for the
            </summary>
            <param name="location">The resource location.</param>
            <returns>An appropriate <see cref="T:FluorineFx.Context.IResource"/> handle.</returns>
        </member>
        <member name="P:FluorineFx.Context.FluorineRtmpContext.Items">
            <summary>
            Gets a key-value collection that can be used to organize and share data between an IHttpModule and an IHttpHandler during an HTTP request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineRtmpContext.User">
            <summary>
            Gets or sets security information for the current HTTP request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineRtmpContext.RootPath">
            <summary>
            Gets the physical drive path of the application directory for the application hosted in the current application domain.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineRtmpContext.RequestPath">
            <summary>
            Gets the virtual path of the current request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineRtmpContext.RequestApplicationPath">
            <summary>
            Gets the ASP.NET application's virtual application root path on the server.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineRtmpContext.AbsoluteUri">
            <summary>
            Gets the absolute URI from the URL of the current request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineRtmpContext.Session">
            <summary>
            Gets the SessionState instance for the current HTTP request.
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineRtmpContext.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection of session-state values is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:FluorineFx.Context.FluorineRtmpContext.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection of session-state values.
            </summary>
        </member>
        <member name="T:FluorineFx.TransientAttribute">
            <summary>
            Indicates that serialization is turned off on a certain field or property.
            Member variables marked by the transient attribute are not transferred.
            </summary>
        </member>
        <member name="M:FluorineFx.TransientAttribute.#ctor">
            <summary>
            Initializes a new instance of the TransientAttribute class.
            </summary>
        </member>
        <member name="T:FluorineFx.AMF3.DataInput">
            <summary>
            This type supports the Fluorine infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadBoolean">
            <summary>
            Reads a Boolean from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadByte">
            <summary>
            Reads a signed byte from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadBytes(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Reads length bytes of data from the byte stream or byte array. 
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadDouble">
            <summary>
            Reads an IEEE 754 double-precision floating point number from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadFloat">
            <summary>
            Reads an IEEE 754 single-precision floating point number from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadInt">
            <summary>
            Reads a signed 32-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadObject">
            <summary>
            Reads an object from the byte stream or byte array, encoded in AMF serialized format. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadShort">
            <summary>
            Reads a signed 16-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadUnsignedByte">
            <summary>
            Reads an unsigned byte from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadUnsignedInt">
            <summary>
            Reads an unsigned 32-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadUnsignedShort">
            <summary>
            Reads an unsigned 16-bit integer from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadUTF">
            <summary>
            Reads a UTF-8 string from the byte stream or byte array. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluorineFx.AMF3.DataInput.ReadUTFBytes(System.UInt32)">
            <summary>
            Reads a sequence of length UTF-8 bytes from the byte stream or byte array, and returns a string. 
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
    </members>
</doc>
