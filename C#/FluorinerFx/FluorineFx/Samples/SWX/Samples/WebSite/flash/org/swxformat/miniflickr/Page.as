import org.swxformat.SWX;import org.swxformat.miniflickr.Thumb;import org.swxformat.miniflickr.EventfulMovieClip;import org.swxformat.miniflickr.PublicSwxGateway;import mx.utils.Delegate;class org.swxformat.miniflickr.Page extends EventfulMovieClip{	// Events	public static var PAGE_RESULT:String = "pageResult";	public static var PHOTO_SELECT:String = "photoSelect";	public static var COMPLETE:String = "complete";		// Constants	private var COL_WIDTH:Number = 80;	private var ROW_HEIGHT:Number = 80;	private var NUM_THUMBS:Number = 9;		//	// Properties	//		// Has the page completely loaded?	// private var _loaded:Boolean = false;		// The current page number.	private var _pageNumber:Number = null;		// Is loading paused?	private var _paused:Boolean = false;		// The index of the last loaded thumb.	//private var lastLoadedThumbIndex:Number = -1;		// Used to cache the returned results from the Flickr api.	public var results:Array = null; 		// Holds references to photo thumb movie clips.	private var thumbs:Array; 	// Reference to the public SWX gateway.	private var swx:SWX;		// On stage	private var mainDataLoadIndicator:MovieClip;	private var pageDisplay:TextField;		// Constructor	public function Page()	{		// Create the thumbs array.		thumbs = new Array();				// Get a reference to the public SWX gateway.		swx = PublicSwxGateway.getInstance().swx;	}		//	// Public methods	//		// Sets the displayed page number.	public function displayPageNumber(pageNumber:Number):Void	{						if (pageNumber != _pageNumber) 		{			hideThumbs();			mainDataLoadIndicator.message.text = "Loading page " + pageNumber;				mainDataLoadIndicator._visible = true;			}		else		{			resetThumbFocusRects();			showThumbs();		}				pageDisplay.text = "Page " + pageNumber;				}		// Loads the current page.	public function load(pageNumber:Number):Void	{						fscommand2("ExtendBacklightDuration", 30);				// We're no longer paused (in case we were.)		pause(false);				// Make sure we're visible		visible = true;				// Cancel all current calls. This will also		// cancel all loading external assets that use the LoadManager. 		swx.cancelAllCalls();						// Are we being asked to load the same page that's already (at least partially) loaded?		if (pageNumber == _pageNumber)		{			// Check if we already have cached results for this page from Flickr.			if (results != null)			{				// Yes, we do. Call the result handler without making an				// unnecessary API call. (Note: New photos added to Flickr 				// since app is started won't display. Either add a refresh				// option that clears this cache or check every time and only				// load thumbs if the result has changed.)				resultHandler({result:results});				return;			}		}		else		{			// Save the new page number.			_pageNumber = pageNumber;			// Reset the results;			results = null;			// We are loading a new page into this clip so reset all the thumbs so that they're ready to load new content.			resetThumbs();		}				// We haven't gotten the data for this page yet, do so.		// Create the SWX call parameters		var callParameters:Object =		{			serviceClass: "Flickr",			method: "swxGetUserPhotos",			args: ["aralbalkan", "square", 9, pageNumber],			result: [this, resultHandler],			timeout: [this, timeoutHandler],			fault: [this, faultHandler]		}		// Make the SWX call		swx.call(callParameters);		// Display the load indicator		mainDataLoadIndicator.message.text = "Loading page " + pageNumber;			mainDataLoadIndicator._visible = true;		}	public function set visible(state:Boolean):Void	{		_visible = state;				if (state)		{			//Key.removeListener(this);			Key.addListener(this);		}		else		{			//swx.cancelAllCalls();			Key.removeListener(this);		}	}		// Returns the page number	public function get pageNumber():Number	{		return _pageNumber;	}		public function get maxPages():Number	{		return results.pages;	}			// Pause the page	public function pause(state:Boolean):Void	{		_paused = state;	} 		public function get paused():Boolean	{		return _paused;	}		//	// Private methods	//	private function resetThumbs():Void	{		var numThumbs:Number = thumbs.length;		for (var i = 0; i < numThumbs; i++)		{			var currentThumb:Thumb = thumbs[i];			currentThumb.reset();		}			}	private function resetThumbFocusRects():Void	{		var numThumbs:Number = thumbs.length;		for (var i = 0; i < numThumbs; i++)		{			var currentThumb:Thumb = thumbs[i];			currentThumb.resetFocusRect();		}			}		private function hideThumbs():Void	{		var numThumbs:Number = thumbs.length;		for (var i = 0; i < numThumbs; i++)		{			var currentThumb:Thumb = thumbs[i];			currentThumb.visible = false;		}			}		// Shows the loaded thumbs.	private function showThumbs():Void	{		var numThumbs:Number = thumbs.length;		for (var i = 0; i < numThumbs; i++)		{			var currentThumb:Thumb = thumbs[i];			if (currentThumb.loaded)			{				currentThumb.visible = true;			}		}			}	// Go through the results and load unloaded images.	private function loadNextThumb()	{		fscommand2("ExtendBacklightDuration", 15);					var numResults:Number = results.photo.length;		for (var i = 0; i < numResults; i++)		{			var currentResult:Object = results.photo[i];			var thumb:Thumb = thumbs[i];						if (!thumb.loaded)			{				thumb.loadImage(currentResult.src, currentResult.id);				return;			}		}			}				//	// Event Handlers	//	private function onLoad():Void	{				// Add listeners and populate the thumbs array.		for (var i:Number = 0; i < NUM_THUMBS; i++)		{			var currentThumb:Thumb = Thumb(this["thumb"+i]);						thumbs.push(currentThumb);						currentThumb.addEventListener(Thumb.CLICK, Delegate.create(this, thumbClickHandler));			currentThumb.addEventListener(Thumb.LOAD, Delegate.create(this, thumbLoadHandler));		}				// Hide the thumbs.		hideThumbs();	}	// Thumb click handler.	private function thumbClickHandler(event:Object):Void	{		var photoId:String = event.id;				dispatchEvent({type: PHOTO_SELECT, id: photoId});	}		// A thumb has loaded.	private function thumbLoadHandler(event:Object):Void	{		if (!paused)		{			// Load the next thumb (if there is one).			loadNextThumb();		}	}		// Keyboard handler.	private function onKeyUp():Void	{		var ascii = Key.getAscii();		if (ascii > 48 && ascii < 58)		{			var thumbIndex:Number = ascii - 49;			var thumbId:String = thumbs[thumbIndex].id;						// Thumb hasn't loaded yet, do nothing.			if (thumbId == "") return;			// Dispatch photo select event.			dispatchEvent({type: PHOTO_SELECT, id: thumbs[thumbIndex].id});		}	}	// SWX result handler.	private function resultHandler(event:Object):Void	{				// Hide the main data load indicator.		mainDataLoadIndicator._visible = false;		// Cache the results		results = event.result;				dispatchEvent({type: PAGE_RESULT});				if (!paused)		{			// Load the next thumb (if there is one to load).			loadNextThumb();		}	}	// SWX timeout handler.	private function timeoutHandler():Void	{		// TODO: Handle this better (show the user).		trace("Call timed out!");	}			// SWX fault handler.	private function faultHandler(event:Object):Void	{		// An error occured. Display the error message.		// TODO: Handle this better (show the user).		trace(event.fault.message);	}}