class com.aralbalkan.levitated.Particle extends MovieClip{	static var WANDER:String = "Wander";	static var WANDER_NONE:String = "None";	static var WANDER_FAR:String = "Wander Far";	static var WANDER_FURTHER:String = "Wander further";		// Public properties	var lifeExpectancy:Number = 100;	var lifeVariation:Number = 10;	var lifeSize:Number = 100;	var lifeSizeVariation:Number = 0;	var growFor:Number = 10;	var shrinkFor:Number = 95;	var fadeFor:Number = 0;	var spin:Number = 0;			// Private properties	private var deathAge:Number = null;	private var growTo:Number = null;	private var shrinkAt:Number = null;	private var fadeAt:Number = null;			private var vx:Number = 0;	private var vy:Number = 0;		private var age:Number = 0;		// instance methods	function Particle() 	{		// bound check all component definitions		if ((growFor + shrinkFor) > 100) 		{			// must grow and shrink within its lifetime			var diff:Number = growFor + shrinkFor - 100;			var fadeRatio:Number = growFor / shrinkFor;			growFor -= diff * fadeRatio;			shrinkFor -= diff * (1 - fadeRatio);		}				if (fadeFor < 0) 		{			fadeFor = 0;		} 		else if (fadeFor > 100) 		{			fadeFor = 100;		}				if (lifeVariation < 0) 		{			lifeVariation = 0;		} 		else if (lifeVariation > 100) 		{			lifeVariation = 100;		}				if (lifeSizeVariation < 0) 		{			lifeSizeVariation = 0;		} 		else if (lifeSizeVariation > 100) 		{			lifeSizeVariation = 100;		}				// Determine size.		var range:Number = lifeSize * lifeSizeVariation / 200;		lifeSize = lifeSize + Math.round(random(range * 2) - range);				// Determine age of death.		range = lifeExpectancy * lifeVariation / 200;		deathAge = lifeExpectancy + Math.round(random(range * 2) - range);				// Calculate intervals in which to grow and shrink.		growTo = Math.round(deathAge * growFor / 100);		shrinkAt = deathAge - Math.round(deathAge * shrinkFor / 100);		fadeAt = deathAge - Math.round(deathAge * fadeFor / 100);				// Determine spin velocity.		if (_parent.dustSpin > 0) 		{			spin=random(int(_parent.dustSpin*2))-_parent.dustSpin;		}				// Start very small -- so small as to be unseen.		_xscale = 0;		_yscale = 0;	}		// Update draws the triangle at the current base and height values.	function onEnterFrame() 	{		_x += vx;		_y += vy;		_rotation += spin;				if (age <= growTo) 		{			// Growing...			_xscale = lifeSize * (age / growTo);			_yscale = lifeSize * (age / growTo);		} 		else if (age < shrinkAt) 		{			// Maintain maximum size.			_xscale = lifeSize;			_yscale = lifeSize;		} 		else 		{			// Shrinking...			_xscale = lifeSize * (1 - (age - shrinkAt) / (deathAge - shrinkAt));			_yscale = lifeSize * (1 - (age - shrinkAt) / (deathAge - shrinkAt));		}				if (age >= fadeAt) 		{			_alpha = 100 * (1 - (age - fadeAt) / (deathAge - fadeAt));		}				// Grow older.		age++;				if (age == deathAge) 		{			// This particle is dead.			this.removeMovieClip();						// Fail safe for components created manually (not attached)			_visible = false;			_x = 0;			_y = 0;			stop();		}				if (_parent.dustWanders == WANDER) 		{			// Random movement.			vx += (random(101) - 50) / 100;			vy += (random(101) - 50) / 100;		} 		else if (_parent.dustWanders == WANDER_FAR) 		{			// Random movement.			vx += (random(101)-50)/50;			vy += (random(101)-50)/50;		} 		else if (_parent.dustWanders == WANDER_FURTHER) 		{			// Random movement.			vx += (random(101)-50)/20;			vy += (random(101)-50)/20;		}		// Adjust velocity using particle emitter's wind and gravity settings.		vx += _parent.wind/30;		vy += _parent.gravity/30;	}}