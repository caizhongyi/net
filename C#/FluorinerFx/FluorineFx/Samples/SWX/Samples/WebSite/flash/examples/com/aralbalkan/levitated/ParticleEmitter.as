// AS2 version of Jared's Patricle component // MIT License.class com.aralbalkan.levitated.ParticleEmitter extends MovieClip{	// Constants	static var TYPE_POINT:String = "Point";	static var TYPE_SPRAY:String = "Spray";	static var WANDER:String = "Wander";	static var WANDER_NONE:String = "None";	static var WANDER_FAR:String = "Wander Far";	static var WANDER_FURTHER:String = "Wander further";	// Public properties	var maxDust:Number = 0;	var dustRate:Number = 250;	var dustType:String = TYPE_POINT;	var dustStrength:Number = 0;	var dustSpread:Number = 10;	var dustSize:Number = 200;	var dustSizeVar:Number = 50;	var dustLife:Number = 80;	var dustLifeVar:Number = 20;	var dustGrowFor:Number = 0;	var dustShrinkFor:Number = 50;	var dustFadeFor:Number = 20;	var dustSpin:Number = 0;	var dustRandomSpin:Boolean = true;	var dustWanders:String = WANDER;	var showEmitter:Boolean = true;	var interEmitter:Boolean = false;	var gravity:Number = 0;	var wind:Number = 15;		// Private properties	private var emitted:Number = 0;	private var depth:Number = 1000;	private var emitInterval:Number;	// On stage	private var emitterBody:MovieClip; 			function ParticleEmitter() 	{		if (dustRandomSpin)		{			dustSpin = Math.random()*5;					}				// bound check rate of creation		if (this.dustRate<5) 		{			this.dustRate = 5;		}				// hide the emitter body if set		if (!showEmitter) 		{			emitterBody._visible=false;		}				emitInterval = setInterval(this, "emitParticle", dustRate);	}		private function emitParticle() 	{		// throw dice for intermittency		var emitChance:Number = 1;		if (interEmitter) 		{			emitChance=random(5);		}				if (((emitted<maxDust) || (this.maxDust == 0)) && (emitChance)) 		{			// Dynamically attach the particle component			var neo:String = "myDust"+String(depth++);			var initialization:Object = 			{				lifeExpectancy: dustLife, 				lifeVariation: dustLifeVar, 				lifeSize: dustSize, 				lifeSizeVariation: dustSizeVar, 				growFor: dustGrowFor, 				shrinkFor: dustShrinkFor, 				fadeFor: dustFadeFor			};						var neoparticle = this.attachMovie("particleComp", neo, depth, initialization);						if (dustType==TYPE_SPRAY)			{			  // spray by presetting the x,y velocities 				var theta=random(int(dustSpread))-dustSpread/2;				neoparticle.vx=(dustStrength/2+Math.random()*dustStrength)*Math.cos(Math.PI / 180 * theta);				neoparticle.vy=(dustStrength/2+Math.random()*dustStrength)*Math.sin(Math.PI / 180 * theta);			}			this.emitted++;		} else {			// max number of particles emitted, stop			clearInterval(emitInterval);		}	};}