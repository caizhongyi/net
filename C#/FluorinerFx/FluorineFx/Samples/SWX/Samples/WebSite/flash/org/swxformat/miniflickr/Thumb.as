import org.swxformat.LoadManager;import org.swxformat.ExternalAsset;import org.swxformat.miniflickr.EventfulMovieClip;import com.darronschall.DynamicRegistration;import mx.utils.Delegate;import mx.transitions.Tween;import mx.transitions.easing.*;class org.swxformat.miniflickr.Thumb extends EventfulMovieClip{	// Events	public static var CLICK:String = "click";	public static var LOAD:String = "load";		// On stage	var imageHolder:MovieClip;	var thumbFocusRect:MovieClip;	var loadIndicator:MovieClip;		//var debug:TextField;		// Properties	public var id:String = "";		private var _loaded:Boolean = false;		// TODO: Refactor: Pull out to base class.	var transitions:Array;	//	// Public methods	//		public function Thumb()	{		Selection.addListener(this);				DynamicRegistration.initialize(imageHolder);	}		public function set visible(state:Boolean)	{		_visible = state;	}			public function get loaded():Boolean	{		return _loaded;	}		public function set loaded(state:Boolean):Void	{		_loaded = state;	}		// Resets the thumb clip	public function reset()	{		id = "";		visible = false;		loaded = false;		resetFocusRect();		imageHolder.innerHolder.removeMovieClip();	}		public function resetFocusRect()	{		thumbFocusRect._visible = false;			}		public function loadImage(url:String, id:String):Void	{		// Save the id		this.id = id;				// Hide the image holder		imageHolder._visible = false;				// Create a new external asset to load.		var image:ExternalAsset = new ExternalAsset(imageHolder, url);				image.addEventListener(ExternalAsset.LOAD, Delegate.create(this, imageLoadHandler));		image.addEventListener(ExternalAsset.LOADED_BUT_NOT_READY, Delegate.create(this, imageLoadedButNotReadyHandler));				// Add it to the load queue using the Load Manager.		var loadManager:LoadManager = LoadManager.getInstance();		loadManager.addEventListener(LoadManager.PROGRESS, Delegate.create(this, loadManagerProgressHandler));		loadManager.load(image);				loadIndicator._visible = true;				// visible = true;	}	// TODO: Refactor: Pull out to base class.	private function stopAllTransitions():Void	{		for (var i=0; i < transitions.length;i++)		{			transitions[i].stop();		}	}		//	// Event handlers	//		private function onLoad():Void	{		visible = false;		thumbFocusRect._visible = false;	}		private function onSetFocus(oldFocus, newFocus):Void	{		if (this == oldFocus) thumbFocusRect._visible = false;		if (this == newFocus) thumbFocusRect._visible = true;	}		private function onRelease():Void	{		// Dispatch a click event with the id of the clicked photo		dispatchEvent({type: CLICK, id: id});	}		private function loadManagerProgressHandler(event:Object):Void	{		// If we've started to load, make ourselves visible		// to display the preloader.		if (event.holder == imageHolder)		{			visible = true;		}	}			private function imageLoadedButNotReadyHandler(event:Object):Void	{		// Make sure the loadIndicator is hidden.		loadIndicator._visible = false;			}	private function imageLoadHandler()	{			// Update the load flag		_loaded = true;						// Let others know!		dispatchEvent({type: LOAD});						// And make it look pretty :)		imageHolder.setRegistration(imageHolder._width/2, imageHolder._height/2);		imageHolder._xscale2 = 0;		imageHolder._yscale2 = 0;		imageHolder._visible = true;				stopAllTransitions();				var t1:Tween = new Tween(imageHolder, "_xscale2", Elastic.easeOut, 0, 100, 1, true);		var t2:Tween = new Tween(imageHolder, "_yscale2", Elastic.easeOut, 0, 100, 1, true);				transitions =  [t1, t2];	}	}