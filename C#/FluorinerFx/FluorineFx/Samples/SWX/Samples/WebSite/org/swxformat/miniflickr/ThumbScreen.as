import org.swxformat.miniflickr.Page;import org.swxformat.miniflickr.EventfulMovieClip;import mx.transitions.Tween;import mx.transitions.easing.*;class org.swxformat.miniflickr.ThumbScreen extends EventfulMovieClip{	// Constants	public static var GET_PHOTO_DETAILS:String = "getPhotoDetails";		public static var PAGE_WIDTH:Number = 240;		var transitions:Array;		//	// Properties	//	// Array to keep pages in	private var pages:Array;			// Array to keep photo ids	private var photoIds:Array;				// The current page clip that is visible.	private var currentPageClipIndex:Number = 0;		// The current page number of Flickr photos being displayed.	private var currentPageNumber:Number = 1;		// Is this screen visible?	private var isVisible:Boolean = false;		// Max number of pages of thumbnails	private var maxPages:Number = 1;		// On stage		private var page0:Page;	private var page1:Page;		// Constructor	function ThumbScreen()	{		pages = [page0, page1];	}		//	// Public methods	//		public function set visible(state:Boolean):Void	{		// Only animate a change if the state has actually changed.		if (state != isVisible)		{			// Update the internal state.			isVisible = state;						// Make it fade out gracefully; we're not barbarians after all! :)			var targetAlpha:Number = state ? 100 : 0;					stopAllTransitions();			var t1:Tween = new Tween(this, "_alpha", Strong.easeOut, _alpha, targetAlpha, .75, true);			transitions=[t1];		}			if (state)		{			// Visible.						// Get the pictures for the current page.			getPictures(currentPageNumber);					// Listen for user input.			Key.removeListener(this);			Key.addListener(this);		}		else		{			// Invisible.									// Stop listening for user input.			Key.removeListener(this);		}	}		//	// Private methods	//			private function stopAllTransitions():Void	{		for (var i=0; i < transitions.length;i++)		{			transitions[i].stop();		}	}		// Get and display the requested page of photos.	private function getPictures(pageNumber:Number)	{				fscommand2("ExtendBacklightDuration", 30);						var currentPageClip:Page = pages[currentPageClipIndex];		var newPageClipIndex:Number = (currentPageClipIndex == 0) ? 1 : 0;		var otherPageClip:Page = pages[newPageClipIndex];				if (pageNumber < currentPageNumber)		{			// Pause loading of current page clip			currentPageClip.pause(true);						// Update the current page clip index.			currentPageClipIndex = newPageClipIndex;			// Set the page number display			otherPageClip.displayPageNumber(pageNumber);						// TODO: Refactor - Pull out the slide functionality into a method.			//			// Slide back			//			otherPageClip._visible = true;			otherPageClip._x = -PAGE_WIDTH;			stopAllTransitions();						// Slide the new page in.			var t1:Tween = new Tween(otherPageClip, "_x", Strong.easeOut, -PAGE_WIDTH, 0, .75, true);			t1["pageClip"] = otherPageClip;			t1["pageNumber"] = pageNumber;						// Once the motion is finished, start loading that page.			t1.onMotionFinished = function () { this.pageClip.load(this.pageNumber); }						// Slide the old page out.			var t2:Tween = new Tween(currentPageClip, "_x", Strong.easeOut, 0, PAGE_WIDTH+1, .75, true);			t2["pageClip"] = currentPageClip;						// Once the motion is finished, hide the old page.			t2.onMotionFinished = function () { this.pageClip.visible = false; }						// Save the transitions so we can stop them later.			transitions=[t1, t2];		}		else if (pageNumber > currentPageNumber)		{			// Pause loading of current page clip			currentPageClip.pause(true);			// Update the current page clip index.			currentPageClipIndex = newPageClipIndex;			// Set the page number display			otherPageClip.displayPageNumber(pageNumber);						//			// Slide forward			//				otherPageClip._visible = true;			otherPageClip._x = PAGE_WIDTH;						stopAllTransitions();						// Slide the new page in.			var t1:Tween = new Tween(otherPageClip, "_x", Strong.easeOut, PAGE_WIDTH, 0, .75, true);			t1["pageClip"] = otherPageClip;			t1["pageNumber"] = pageNumber;			// Once the motion is finished, start loading that page.			t1.onMotionFinished = function () { this.pageClip.load(this.pageNumber); }						// Slide the old page out.			var t2:Tween = new Tween(currentPageClip, "_x", Strong.easeOut, 0, -(PAGE_WIDTH+1), .75, true);			t2["pageClip"] = currentPageClip;						// Once the motion is finished, hide the old page.			t2.onMotionFinished = function () { this.pageClip.visible = false; }						// Save the transitions so we can stop them later.			transitions=[t1, t2];		}		else		{			// Load photos into the current page clip			currentPageClip.displayPageNumber(pageNumber);			currentPageClip.load(pageNumber);		}				// Update the current page		currentPageNumber = pageNumber;	}		//	// Event handlers	//			private function onLoad():Void	{		// Add event listeners		page0.addEventListener(Page.PHOTO_SELECT, this);		page1.addEventListener(Page.PHOTO_SELECT, this);				page0.addEventListener(Page.PAGE_RESULT, this);		page1.addEventListener(Page.PAGE_RESULT, this);	}				// Thumb selection handler	private function photoSelect(event:Object):Void	{		var photoId:String = event.id;				dispatchEvent({type: GET_PHOTO_DETAILS, id: photoId, ids:photoIds});	}		private function pageResult(event:Object):Void	{		var page:Page = event.target;		maxPages = page.maxPages;				var results:Array = page.results;				photoIds = new Array();		for (var i = 0; i < results.photo.length; i++)		{			photoIds.push(results.photo[i].id);		}	}			// Key handler; prev/next navigation between pages.	private function onKeyUp():Void	{		var code = Key.getCode();		var ascii = Key.getAscii();				if (ascii == 35) // || ascii == 50) // for desktop testing, enable and use "1"		{			// #: Get the next page of results.			if (currentPageNumber != maxPages)			{				getPictures(currentPageNumber+1);			}						return;		}		if (ascii == 42 || code == ExtendedKey.SOFT1) // || ascii == 49) // for desktop testing, enable and use "2"		{			// Prev page			if (currentPageNumber != 1)			{				getPictures(currentPageNumber-1);			}						return;		}	}}