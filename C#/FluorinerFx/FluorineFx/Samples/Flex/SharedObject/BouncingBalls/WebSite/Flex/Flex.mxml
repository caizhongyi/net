<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="connect()" width="100%" height="100%" >
	<mx:Script>
		<![CDATA[
			private var readyForDrag:Boolean = false;
			private var so:SharedObject;
			private var nc:NetConnection;
			private var ball:Ball;
			
			NetConnection.defaultObjectEncoding = flash.net.ObjectEncoding.AMF0;
			SharedObject.defaultObjectEncoding  = flash.net.ObjectEncoding.AMF0;
			
			private function connect():void
			{
				nc = new NetConnection();
				nc.client = this;
				nc.connect("rtmp://localhost:1937/BouncingBalls");
			}
			 
			public function step ( event:Event ):void        
			{
				if( ball != null )
				{
					var obj:Object = new Object();
					obj.x = ball.x;
					obj.y = ball.y;
					so.setProperty(ball.name, obj );
				}
			}
			
			public function setClientId( ID:String ):void
			{
				ball = new Ball();
				ball.name = ID;
				container.rawChildren.addChild(ball);
				ball.init();
			    so = SharedObject.getRemote("BallControl", nc.uri, false);
			    so.client = this;
			    so.addEventListener( SyncEvent.SYNC, handleSync );
			    so.connect( nc );
			    addEventListener( Event.ENTER_FRAME , step );
				var getConnectedClientsResponder:Responder = new Responder( getConnectedClientsHandler, getConnectedClientsFailure );
				nc.call( "GetConnectedClients", getConnectedClientsResponder );
			    
			}
			
			public function getConnectedClientsHandler( clients:Array ):void
			{				
				for each( var clientId:String in clients )
				{
					var sprite:ClientBall = new ClientBall();
					sprite.name = clientId;
					container.rawChildren.addChild(sprite);
					sprite.init();
				}
			}
			
			public function getConnectedClientsFailure( failure:Object ):void
			{				
			}			
						
			public function clientConnected( clientId:String ) : void
			{
				var sprite:ClientBall = new ClientBall();
				sprite.name = clientId;
				container.rawChildren.addChild(sprite);
				sprite.init();
			}
			
			public function clientDisconnected( clientId:String ) : void
			{
				var sprite:Sprite = container.rawChildren.getChildByName(clientId) as Sprite;
				if( sprite != null )
					container.rawChildren.removeChild(sprite);
			}
						
			private function handleSync( event:SyncEvent ):void
			{
				if( event.changeList.length == 0 )
					return;
				if( event.changeList[0].code == "clear" )
					return;
				for (var i:Number = 0; i<event.changeList.length; i++) {
					var obj:Object = event.changeList[i];
					if( obj.code == "change" )
					{
						var sprite:Sprite = container.rawChildren.getChildByName(obj.name) as Sprite;
						if( sprite != null && sprite != ball && obj.oldValue != null)
						{
							sprite.x = obj.oldValue.x;
							sprite.y = obj.oldValue.y;
						}
					}
				}
			}
			
		]]>
	</mx:Script>
	<mx:Canvas width="100%" height="100%" id="container" backgroundColor="#ffffff" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	</mx:Canvas>
</mx:Application>
