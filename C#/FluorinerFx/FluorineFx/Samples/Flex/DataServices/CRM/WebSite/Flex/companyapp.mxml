<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
	creationComplete="initApp()" backgroundColor="#663300" backgroundGradientColors="[#663300, #663300]" 
	layout="vertical" horizontalAlign="left">

	<mx:Script>
		<![CDATA[

		import mx.collections.ItemResponder;
		import mx.rpc.AsyncToken;
		import mx.events.ValidationResultEvent;
		import mx.data.Conflicts;
		import mx.controls.Alert;
		import mx.events.DataGridEvent;
		import mx.data.events.DataConflictEvent;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import flex.samples.crm.company.Company;
		import flex.samples.crm.employee.Employee;

        [Bindable]
        private var company:Company;
        
        [Bindable]
        private var industries:Array = ["All", "Computers", "Health Care", "Manufacturing", "Textiles"]; 
        
        [Bindable]
        private var companyIndustries:Array = ["Computers", "Health Care", "Manufacturing", "Textiles"];
        
        [Bindable]
        private var industry:String = "All";
        
        private function initApp():void
        {
            dsCompany.autoCommit = false;
            dsCompany.fill(companies);
            employeeList.enabled = false;
        }

        private function companyResultHandler(event:ResultEvent):void
        {      		
            Hourglass.remove();
            if (dgCompany.selectedIndex == -1)
            {
                newCompany();
            }
        }

        private function employeeResultHandler(event:ResultEvent):void
        {
            Hourglass.remove();
        }

        private function faultHandler(event:FaultEvent):void
        {
            Hourglass.remove();
            Alert.show(event.fault.faultString, "Error");
        }

        private function conflictHandler(event:DataConflictEvent):void
        {
            Hourglass.remove();
            var conflicts:Conflicts = dsCompany.conflicts;
            conflictsDialog.conflicts = dsCompany.conflicts;
            conflictsDialog.validateNow(); //measure so the height will be correct
            currentState = 'conflicts';
            generalPanel.validateNow(); //avoid jumpiness on the next frame
            event.preventDefault();
        }

        private function companyChange():void
        {
            if (dgCompany.selectedIndex > -1)
            {
                if (company != companies.getItemAt(dgCompany.selectedIndex))
                {
                    company = companies.getItemAt(dgCompany.selectedIndex) as Company;
                    dsEmployee.fill(employees, "by-company", company.companyId);
                    employeeList.enabled = true;
                }
            }
        }
        
        private function searchCompanies():void
        {
            if (industry == "All")
			{
                dsCompany.fill(companies, searchText.text);
   			}
   			else
   			{
                dsCompany.fill(companies, searchText.text, industry);
      		}
        }

        private function industryChanged():void
        {
            industry = industryCombo.selectedItem as String; 
            searchCompanies();
        }        

        private function newCompany():void
        {
            dgCompany.selectedIndex = -1;
            company = new Company();
            employees = new ArrayCollection();             
            detailsTab.selectedIndex = 0;
            companyIndustryCombo.selectedIndex = 0;  
            employeeList.enabled = false;
        }

        private function updateCompany():void
        {
            if (companyNameValidator.validate().type == ValidationResultEvent.VALID)
            {
                if (!companies.contains(company))
                {
                    // for new company, we need to set the company's industry 
                    // to the selectedItem of the combo box
                    company.industry = companyIndustryCombo.selectedItem as String;

                    Hourglass.show(this);
                    var token:AsyncToken = dsCompany.createItem(company);
                    token.addResponder(new ItemResponder(
                        function (data:Object, token:Object=null):void
                        {
                            dgCompany.selectedIndex = companies.getItemIndex(company);
                            dsEmployee.fill(employees, "by-company", company.companyId);
                            employeeList.enabled = true;
                        },
                        function (info:Object, token:Object=null):void
                        {
                            //ignore error
                        }));                    
                    dsCompany.commit();
                    
                }
                else if (dsCompany.commitRequired)
                {
                    Hourglass.show(this);
                    dsCompany.commit();
                }
            }
        }
        
        private function revertCompany():void
        {
            dsCompany.revertChanges(company);
        }        

        public function deleteCompany(company:Company):void
        {
            Hourglass.show(this);
            dsCompany.deleteItem(company);
            dsCompany.commit();
        }

        private function addEmployee():void
        {
            if (company)
            {
                var employee:Employee = new Employee();
                employee.firstName = "First Name";
                employee.lastName = "Last Name";
                employee.company = company;
                employees.addItem(employee);
            }
        }
        
        private function itemEditEndEventHandler(event:DataGridEvent):void
        {
            // put a validation, firstName and lastName are required
            if (event.dataField == "firstName" || event.dataField == "lastName")
            {
                var newData:String= TextInput(dgEmployees.itemEditorInstance).text;

                // Determine if the new value is an empty String. 
                if(newData == "")
                {
                    // Prevent the user from removing focus, 
                    // and leave the item editor open.
                    event.preventDefault();
                    // Write a message to the errorString property. 
                    // This message appears when the user mouses over the editor.
                    TextInput(dgEmployees.itemEditorInstance).errorString = "Enter a valid string.";
                    return;
                }
            }
        }
                
        public function removeEmployee(employee:Employee):void
        {
            employees.removeItemAt(employees.getItemIndex(employee));
        }
        
		]]>
	</mx:Script>
	
	<mx:Style>
	   .panelTitle
	   {
	       color: #dddddd;
	       fontWeight: "bold";
	   }
	   
	</mx:Style>

	<mx:DataService id="dsCompany" destination="crm.company"
		result="companyResultHandler(event)"
		conflict="conflictHandler(event)"
		fault="faultHandler(event)"/>

	<mx:DataService id="dsEmployee" destination="crm.employee"
		result="employeeResultHandler(event)"
		conflict="conflictHandler(event)"
		fault="faultHandler(event)"/>
		
	<mx:ArrayCollection id="companies"/>
	<mx:ArrayCollection id="employees"/>

    <mx:Binding source="companyName.text" destination="company.name"/>
    <mx:Binding source="address.text" destination="company.address"/>
    <mx:Binding source="city.text" destination="company.city"/>
    <mx:Binding source="state.text" destination="company.state"/>
    <mx:Binding source="zip.text" destination="company.zip"/>
    <mx:Binding source="companyIndustryCombo.selectedItem as String" destination="company.industry"/>

    <mx:Validator id="companyNameValidator" required="true"
        source="{company}" property="name" trigger="{companyName}"
        triggerEvent="focusOut" listener="{companyName}" />
        
    <mx:Label text="Flex CRM" color="#ffffff" fontSize="18" fontWeight="bold"/>

    <mx:HDividedBox width="100%" height="100%">

        <mx:Panel title="Company List" width="100%" height="100%" borderColor="#a38465" titleStyleName="panelTitle" borderAlpha="1">
            <mx:DataGrid id="dgCompany" dataProvider="{companies}" width="100%" height="100%" 
                verticalGridLines="false" horizontalGridLines="true" horizontalGridLineColor="#ffffff"
                change="companyChange()" valueCommit="companyChange()"  
                headerColors="[#a38465, #a38465]"
                color="#000000" alternatingItemColors="[#e6e6e6]" themeColor="#cc9900">                
                <mx:columns>
                    <mx:DataGridColumn dataField="companyId" width="50" headerText="ID" />
                    <mx:DataGridColumn dataField="name" headerText="Company Name" />
                    <mx:DataGridColumn dataField="city" headerText="City" />
                    <mx:DataGridColumn dataField="industry" headerText="Industry" />
                    <mx:DataGridColumn dataField="companyId" width="20" headerText="" >
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:LinkButton icon="@Embed('assets/icon_tool_trash.png')" 
                                    click="{outerDocument.deleteCompany(data as Company)}">
                                    <mx:Script>
                                        <![CDATA[
                                           import flex.samples.crm.company.Company;                                            
                                        ]]>
                                    </mx:Script>
                                </mx:LinkButton>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                </mx:columns>
            </mx:DataGrid>
            
            <mx:ControlBar>
                <mx:LinkButton label="+" fontWeight="bold" fontSize="15" click="newCompany()"/>
                <mx:VRule height="20"/>
                <mx:ComboBox id="industryCombo" dataProvider="{industries}" 
                     change="industryChanged()"/>
                <mx:TextInput id="searchText" width="100%" enter="searchCompanies()"/>
                <mx:Button label="Search" click="searchCompanies()" width="60"/>
            </mx:ControlBar>
        </mx:Panel>

        <mx:TabNavigator id="detailsTab" width="100%" height="100%" 
            cornerRadius="4" backgroundColor="#a38465" paddingTop="6" borderThickness="0" dropShadowEnabled="true">

            <mx:Panel id="generalPanel" label="General" width="100%" height="100%" 
                headerHeight="0" borderAlpha="0" dropShadowEnabled="false" verticalGap="0">
                <mx:Form width="100%" height="100%"  backgroundColor="#e6e6e6" id="companyForm">
                    <mx:FormItem label="Company Name" required="true">
                        <mx:TextInput id="companyName" width="250" text="{company.name}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Address">
                        <mx:TextInput id="address" width="250" text="{company.address}"/>
                    </mx:FormItem>
                    <mx:FormItem label="City">
                        <mx:TextInput id="city" width="250" text="{company.city}"/>
                    </mx:FormItem>
                    <mx:FormItem label="State">
                        <mx:TextInput id="state" width="250" text="{company.state}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Zip">
                        <mx:TextInput id="zip" width="250" text="{company.zip}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Industry">
                        <mx:ComboBox id="companyIndustryCombo" dataProvider="{companyIndustries}" 
                            selectedItem="{company.industry}" width="250"/>
                    </mx:FormItem>
                </mx:Form>
				<ConflictsDialog width="100%" id="conflictsDialog" visible="false" includeInLayout="false" />                
                <mx:ControlBar id="generalControlButtons" height="47">
                   <mx:Button label="Update" click="updateCompany()"/>
                   <mx:Button label="Revert" click="revertCompany()"/> 
                </mx:ControlBar>            
            </mx:Panel>

            <mx:Panel label="Employees" id="employeeList" width="100%" height="100%" headerHeight="0" borderAlpha="0" dropShadowEnabled="false">
                <mx:DataGrid id="dgEmployees" dataProvider="{employees}" width="100%" height="100%" 
                    alternatingItemColors="[#e6e6e6, #e6e6e6]" headerColors="[#a38465, #a38465]" themeColor="#cc9900"
                    itemEditEnd="itemEditEndEventHandler(event)" verticalGridLines="false"
                    horizontalGridLines="true" horizontalGridLineColor="#ffffff" editable="true">
                    <mx:columns>
                        <mx:DataGridColumn dataField="firstName" headerText="First Name"/>
                        <mx:DataGridColumn dataField="lastName" headerText="Last Name"/>
                        <mx:DataGridColumn dataField="title" headerText="Title"/>
                        <mx:DataGridColumn dataField="email" headerText="Email"/>
                        <mx:DataGridColumn dataField="phone" headerText="Phone"/>
                        <mx:DataGridColumn dataField="employeeId" width="20" headerText="" editable="false">
                            <mx:itemRenderer>
                                <mx:Component>
                                    <mx:LinkButton icon="@Embed('assets/icon_tool_trash.png')" 
                                        click="{outerDocument.removeEmployee(data as Employee)}">
                                        <mx:Script>
                                            <![CDATA[
                                               import flex.samples.crm.employee.Employee; 
                                            ]]>
                                        </mx:Script>
                                    </mx:LinkButton>
                                </mx:Component>
                            </mx:itemRenderer>
                        </mx:DataGridColumn>                            
                    </mx:columns>
                </mx:DataGrid>
                <mx:ControlBar height="47">
                    <mx:Button label="+" click="addEmployee()" width="60"/>
                </mx:ControlBar>    
            </mx:Panel>

        </mx:TabNavigator>

    </mx:HDividedBox>
    
	<mx:states>
		<mx:State name="conflicts">
		    <mx:SetProperty target="{conflictsDialog}" name="visible" value="true" />
		    <mx:SetProperty target="{conflictsDialog}" name="includeInLayout" value="true" />
		    <mx:SetProperty target="{companyForm}" name="enabled" value="false" />
		    <mx:SetProperty target="{generalControlButtons}" name="enabled" value="false" />
		</mx:State>
	</mx:states>
</mx:Application>
