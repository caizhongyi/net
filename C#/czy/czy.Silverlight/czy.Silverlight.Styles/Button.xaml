<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:vsm="clr-namespace:System.Windows;assembly=System.Windows"
    >

    <Style TargetType="Button" x:Key="ButtonBlue1">
        <!--Set the Background, Foreground, FontSize, Width, 
          Height, Margin, and Template properties for
          the Button.-->
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1" >
                    <GradientStop Color="#FF194464" Offset="0.8"/>
                    <GradientStop Color="White" Offset="0.2"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="35"/>
        <!--<Setter Property="Margin" Value="1"/>-->
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="RootElement">
                        <vsm:VisualStateManager.VisualStateGroups>

                            <!--Define the states and transitions for the common states.
                    The states in the VisualStateGroup are mutually exclusive to
                    each other.-->
                            <vsm:VisualStateGroup x:Name="CommonStates">

                                <!--Define the VisualTransitions that can be used when the control
                      transitions between VisualStates that are defined in the
                      VisualStatGroup.-->
                                <vsm:VisualStateGroup.Transitions>

                                    <!--Take one half second to trasition to the MouseOver state.-->
                                    <vsm:VisualTransition To="MouseOver" 
                                          GeneratedDuration="0:0:0.5" />

                                    <!--Take one hundredth of a second to transition from the
                        Pressed state to the MouseOver state.-->
                                    <vsm:VisualTransition From="Pressed" To="MouseOver" 
                                          GeneratedDuration="0:0:0.01" />

                                    <!--Take one and a half seconds to transition from the
                        MouseOver state to the Normal state. 
                        Have the SolidColorBrush, BorderBrush, fade to blue, 
                        then to yellow, and then to black in that time.-->
                                    <vsm:VisualTransition From="MouseOver" To="Normal" 
                                          GeneratedDuration="0:0:1.5">
                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames
                          Storyboard.TargetProperty="Color"
                          Storyboard.TargetName="BorderBrush"
                          FillBehavior="HoldEnd" >

                                                <ColorAnimationUsingKeyFrames.KeyFrames>

                                                    <LinearColorKeyFrame Value="White" 
                                                 KeyTime="0:0:0.1" />
                                                 
                                                </ColorAnimationUsingKeyFrames.KeyFrames>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </vsm:VisualTransition>
                                </vsm:VisualStateGroup.Transitions>

                                <!--The Normal state is the state the button is in
                      when it is not in another state from this VisualStateGroup.
                      There is no special visual behavior for this state, but
                      the VisualState must be defined in order for the button
                      to return to its initial state.-->
                                <vsm:VisualState x:Name="Normal" />

                                <!--Change the border of the button to red when the
                      mouse is over the button.-->
                                <vsm:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="BorderBrush" 
                                      Storyboard.TargetProperty="Color" To="Blue" />

                                    </Storyboard>
                                </vsm:VisualState>

                                <!--Change the border of the button to Transparent when the
                      button is pressed.-->
                                <vsm:VisualState x:Name="Pressed">
                                    <Storyboard >
                                        <ColorAnimation Storyboard.TargetName="BorderBrush" 
                                      Storyboard.TargetProperty="Color" To="Transparent" 
                                      />
                                    </Storyboard>
                                </vsm:VisualState>

                                <!--Show the DisabledRect when the IsEnabled property on
                      the button is false.-->
                                <vsm:VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="DisabledRect" 
                                       Storyboard.TargetProperty="Opacity"
                                       To="1" Duration="0" />
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>

                            <!--Define the states and transitions for the focus states.
                    The states in the VisualStateGroup are mutually exclusive to
                    each other.-->
                            <vsm:VisualStateGroup x:Name="FocusStates">

                                <!--Define the VisualStates in this VistualStateGroup.-->
                                <vsm:VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" 
                                                     Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                                <vsm:VisualState x:Name="Unfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" 
                                                     Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </vsm:VisualState>
                            </vsm:VisualStateGroup>
                        </vsm:VisualStateManager.VisualStateGroups>

                        <!--Create the SolidColorBrush for the Background 
                  as an object elemment and give it a name so 
                  it can be referred to elsewhere in the control template.-->
                        <Border.Background>
                            <SolidColorBrush x:Name="BorderBrush" Color="Black"/>
                        </Border.Background>

                        <!--Create a border that has a different color by adding smaller grid.
                  The background of this grid is specified by the button's Background
                  property.-->
                        <Grid Background="{TemplateBinding Background}" >

                            <!--Create a Rectangle that indicates that the
                    Button has focus.-->
                            <Rectangle Name="FocusVisual" 
                          Visibility="Collapsed" Margin="2" 
                          Stroke="{TemplateBinding Foreground}" StrokeThickness="1" 
                          StrokeDashArray="1.5 1.5"/>


                            <!--Use a ContentPresenter to display the Content of
                    the Button.-->
                            <ContentPresenter
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  Margin="4,5,4,4" />

                            <!--Create a rectangle that causes the button to appear
                  grayed out when it is disabled.-->
                            <Rectangle x:Name="DisabledRect" 
                         Fill="#A5FFFFFF"
                         Opacity="0" IsHitTestVisible="false" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="ButtonBlue">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="#FFE0E6F3" Direction="10" ShadowDepth="2"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF4052A9" Offset="0.022"/>
                    <GradientStop Color="#FF0E0C0C" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFA3AEB9" Offset="0"/>
                    <GradientStop Color="#FF8399A9" Offset="0.375"/>
                    <GradientStop Color="#FF718597" Offset="0.375"/>
                    <GradientStop Color="#FF173145" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
      
</ResourceDictionary>
