// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "_smsgate.h"

/////////////////////////////////////////////////////////////////////////////
// C_Smsgate

IMPLEMENT_DYNCREATE(C_Smsgate, CWnd)

/////////////////////////////////////////////////////////////////////////////
// C_Smsgate properties

/////////////////////////////////////////////////////////////////////////////
// C_Smsgate operations

short C_Smsgate::GetCommPort()
{
	short result;
	InvokeHelper(0x68030008, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void C_Smsgate::SetCommPort(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x68030008, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

VARIANT C_Smsgate::NewMsg()
{
	VARIANT result;
	InvokeHelper(0x6003000c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::Connect(short* WaitTime)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_PI2;
	InvokeHelper(0x60030017, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		WaitTime);
	return result;
}

CString C_Smsgate::Sendsms(BSTR* Msg, BSTR* Mobile, short* s_Report)
{
	CString result;
	static BYTE parms[] =
		VTS_PBSTR VTS_PBSTR VTS_PI2;
	InvokeHelper(0x60030018, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Msg, Mobile, s_Report);
	return result;
}

CString C_Smsgate::SendAsc2(VARIANT* AscMsg, VARIANT* tomobile, VARIANT* smsreport)
{
	CString result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x6003001a, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		AscMsg, tomobile, smsreport);
	return result;
}

VARIANT C_Smsgate::AnswerCall()
{
	VARIANT result;
	InvokeHelper(0x6003001c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL C_Smsgate::HangUpCall()
{
	BOOL result;
	InvokeHelper(0x6003001d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::CallPhone(BSTR* PhoneNo, short* WaitTime)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_PBSTR VTS_PI2;
	InvokeHelper(0x6003001e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		PhoneNo, WaitTime);
	return result;
}

VARIANT C_Smsgate::GetPhoneNo()
{
	VARIANT result;
	InvokeHelper(0x60030020, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::ReadMsg(short* whyre)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_PI2;
	InvokeHelper(0x60030022, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		whyre);
	return result;
}

VARIANT C_Smsgate::DelSms(short* del_which)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_PI2;
	InvokeHelper(0x60030023, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		del_which);
	return result;
}

VARIANT C_Smsgate::RevAuto()
{
	VARIANT result;
	InvokeHelper(0x60030025, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::RevAutoClose()
{
	VARIANT result;
	InvokeHelper(0x60030026, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::ClosePort()
{
	VARIANT result;
	InvokeHelper(0x60030027, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::GetErrmsg()
{
	VARIANT result;
	InvokeHelper(0x68030007, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void C_Smsgate::SetErrmsg(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x68030007, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT C_Smsgate::M_model()
{
	VARIANT result;
	InvokeHelper(0x60030039, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::M_ltd()
{
	VARIANT result;
	InvokeHelper(0x6003003a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::M_ver()
{
	VARIANT result;
	InvokeHelper(0x6003003b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::M_ServiceNo()
{
	VARIANT result;
	InvokeHelper(0x6003003c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::M_imei()
{
	VARIANT result;
	InvokeHelper(0x6003003d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::InputAT(BSTR* strAT)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x60030070, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		strAT);
	return result;
}

VARIANT C_Smsgate::ReadNB(VARIANT* pb_why)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x6003003e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		pb_why);
	return result;
}

long C_Smsgate::GetRevInterval()
{
	long result;
	InvokeHelper(0x68030006, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void C_Smsgate::SetRevInterval(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68030006, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString C_Smsgate::GetSmsService()
{
	CString result;
	InvokeHelper(0x68030005, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void C_Smsgate::SetSmsService(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x68030005, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL C_Smsgate::GetReadAndDel()
{
	BOOL result;
	InvokeHelper(0x68030004, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void C_Smsgate::SetReadAndDel(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68030004, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CString C_Smsgate::GetSn()
{
	CString result;
	InvokeHelper(0x68030003, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void C_Smsgate::SetSn(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x68030003, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL C_Smsgate::Link()
{
	BOOL result;
	InvokeHelper(0x6003003f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL C_Smsgate::GetIsbusy()
{
	BOOL result;
	InvokeHelper(0x68030002, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void C_Smsgate::SetIsbusy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68030002, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

VARIANT C_Smsgate::RdCenNo()
{
	VARIANT result;
	InvokeHelper(0x60030041, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

CString C_Smsgate::GetSettings()
{
	CString result;
	InvokeHelper(0x68030001, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void C_Smsgate::SetSettings(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x68030001, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString C_Smsgate::GetCopyRight()
{
	CString result;
	InvokeHelper(0x68030000, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void C_Smsgate::SetCopyRight(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x68030000, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

VARIANT C_Smsgate::get_report_all(VARIANT* start_is, VARIANT* strCodeis)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x60030044, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		start_is, strCodeis);
	return result;
}

VARIANT C_Smsgate::NewReport()
{
	VARIANT result;
	InvokeHelper(0x60030046, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::Get_ID1()
{
	VARIANT result;
	InvokeHelper(0x60030048, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::Get_ID2()
{
	VARIANT result;
	InvokeHelper(0x60030049, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT C_Smsgate::Get_ID3()
{
	VARIANT result;
	InvokeHelper(0x6003004a, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}
